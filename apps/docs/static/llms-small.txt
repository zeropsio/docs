<SYSTEM>This is the tiny developer documentation for Zerops.</SYSTEM>

# Start of Zerops documentation


<FAQ>
  <FAQItem question="Sample Question">sample answer</FAQItem>
</FAQ>




This quick start allows you to get hands-on experience of Zerops, whether you only want to see it in action or want to start small and scale up the project size later. The purpose of this guide is to get an existing Bun application up and running easily.

If you are already familiar with Zerops and you are interested in more detailed guides for your own application, feel free to head straight to the [How to](bun/how-to/create) section.

## Guides

We have created a repository, a _recipe_, containing the most simple Bun web application, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics with one-service app.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-bun',
      label: 'Bun + SQL database',
      customProps: {
        icon: Icons['github'],
        description: 'A more complex, multi-service application example.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=Bun&type=all&language=&sort=',
      label: 'All Bun recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspired.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



## Private internal access

Projects in Zerops represent a group of one or more services.
Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its [internal port](bun/how-to/build-pipeline#ports).

To connect to your application with `app` hostname running on [internal port](bun/how-to/build-pipeline#ports) `3000`, simply use `http://app:3000`

:::info
Do not use `https://` when communicating with Bun from other runtime services in the same project. The internal communication is done over a private network and is isolated from other projects.
:::

### Use Bun environment variables

Zerops creates default environment variables for each Bun service to help you with connection within the same project. To avoid the need to copy the access parameters manually, use [generated environment variables](bun/how-to/env-variables#generated-env-variables) of the Bun service.

#### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Example:

To access the `API_TOKEN` env variable of the `app` service, use `app_API_TOKEN` as the env variable key.

Read more about [env variables](bun/how-to/env-variables).

## Private access via VPN

### Start VPN connection

You can securely connect to your Bun application from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)

### Access Bun application through VPN

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](bun/how-to/env-variables) are available when connected through VPN. To connect to your Bun application in Zerops set the hostname and [internal port](bun/how-to/build-pipeline#ports) e.g. http://app:3000

:::info
Do not use `https://` when communicating with Bun over the VPN. The security is assured by the VPN. The internal communication is done over a private network and is isolated from other projects.
:::

### Connect via SSH

Use the <a href="/references/ssh">`ssh` command</a> to connect to your service via SSH.

### Stop VPN connection

[Stop the Zerops VPN](/references/vpn#stop-vpn) in zCLI.

## Public access through zerops.io subdomain

By default, your Bun service is not publicly accessible. To test your application, enable the [public access through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain).

## Public access through your domain

By default, your Bun service is not publicly accessible. When your application is ready for production or if you want to test it on the production domain, [configure the public access through your domain](/features/access#public-access-through-your-domain).

## Public access from another Zerops project

All services of the same project share a dedicated private network. To connect to a service within the same project, just use the service hostname and its [internal port](bun/how-to/build-pipeline#ports). Different projects are not connected inside Zerops. To connect to a runtime service from another Zerops project, you need to use public access either [through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain) or [through your domain](/features/access#public-access-through-your-domain).





Zerops provides a customizable build and runtime environment for your Bun application.

## Add zerops.yaml to your repository

Start by adding `zerops.yaml` file to the **root of your repository** and modify it to fit your application:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: bun@latest

      # OPTIONAL. Set the operating system for the build environment.
      # os: ubuntu

      # OPTIONAL. Customise the build environment by installing additional packages
      # or tools to the base build environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # REQUIRED. Build your application
      buildCommands:
        - bun i
        - bun run build

      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles:
        - dist
        - package.json
        - node_modules

      # OPTIONAL. Which files / folders you want to cache for the next build.
      # Next builds will be faster when the cache is used.
      cache: node_modules

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base: bun@latest

      # OPTIONAL. Sets the internal port(s) your app listens on:
      ports:
        # port number
        - port: 3000

      # OPTIONAL. Customise the runtime Bun environment by installing additional
      # dependencies to the base Bun runtime environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Bun application is started.
      # initCommands:
      #  - rm -rf ./cache

      # REQUIRED. Your Bun application start command
      start: bun start
```

The top-level element is always `zerops`.

### Setup

The first element `setup` contains the **hostname** of your service. A runtime service with the same hostname must exist in Zerops.
Zerops supports the definition of multiple runtime services in a single `zerops.yaml`. This is useful when you use a monorepo. Just add multiple setup elements in your `zerops.yaml`:

```yaml
zerops:
  # definition for app service
  - setup: app
    build: ...
    run: ...

  # definition for api service
  - setup: api
    build: ...
    run: ...
```

Each service configuration contains at least two sections: **build** and **run**. Both sections are required to build and deploy your Bun application in Zerops. If you'd like to use a readiness check, add an optional **deploy** section.

## Build pipeline configuration

### base

_REQUIRED._ Sets the base technology for the build environment.

Following options are available for Bun builds:

<UnorderedCodeList data={data.bun.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: bun@latest
      ...
```

<p>
  The base build environment contains {data.alpine.default}, the selected
  major version of Bun,
  <a href="/references/cli">Zerops command line tool</a>, `npm`,
  `yarn`, `git` and `npx` tools.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the build environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base:
        - bun@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [build base environments](/zerops-yaml/base-list#runtime-services).

To customise your build environment use the [prepareCommands](bun/how-to/build-pipeline#preparecommands) attribute.

:::note
Modifying the base technology will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for more details about cache invalidation.
:::

### os

_OPTIONAL._ Sets the operating system for the build environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customised.
:::

:::note
Changing the OS setting will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache behavior.
:::

### prepareCommands

_OPTIONAL._ Customises the build environment by installing additional dependencies or tools to the base build environment.

The base build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Bun defined in the [base](bun/how-to/build-pipeline#base) attribute
- [Zerops command line tool](/references/cli)
- `npm`, `yarn`, `git` and `npx` tools

To install additional packages or tools add one or more prepare commands:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: bun@latest

      # OPTIONAL. Customise the build environment by installing additional packages
      # or tools to the base build environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first build is triggered, Zerops will

1. create a build container
2. download your application code from your repository
3. run the prepare commands in the defined order

The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).

:::note
These commands are skipped when using cached environment. Modifying `prepareCommands` will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache invalidation.
:::

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](bun/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all prepare commands are finished, your custom build environment is ready for the build phase.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### buildCommands

_REQUIRED._ Defines build commands.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: bun@latest

      # REQUIRED. Build your application
      buildCommands:
        - bun i
        - bun run build
      ...
```

At least one command is required. Zerops triggers each command in the defined order in a dedicated build container.

Before the build commands are triggered the build container contains:

1. base environment defined by the [base](bun/how-to/build-pipeline#base) attribute
2. optional customisation of the base environment defined in the [prepareCommands](bun/how-to/build-pipeline#preparecommands) attribute
3. your application code

#### Run build commands as a single shell instance

Use following syntax to run all commands in the same environment context. For example, if one command changes the current directory, the next command continues in that directory. When one command creates an environment variable, the next command can access it.

```yaml
buildCommands:
  - |
    bun i
    bun run build
```

#### Run build commands as a separate shell instances

When the following syntax is used, each command is triggered in a separate environment context. For example, each shell instance starts in the home directory again. When one command creates an environment variable, it won't be available for the next command.

```yaml
buildCommands:
  - bun i
  - bun run build
```

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](bun/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the --verbose option.

```yaml
buildCommands:
  - bun i --verbose
  - bun run build
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the deploy phase.

### deployFiles

_REQUIRED._ Selects which files or folders will be deployed after the build has successfully finished. To filter out specific files or folders, use <a href="#deployignore">`.deployignore`</a> file.

```yaml
# REQUIRED. Select which files / folders to deploy after
# the build has successfully finished
deployFiles:
  - dist
  - package.json
  - node_modules
```

Determines files or folders produced by your build, which should be deployed to your runtime service containers.

The path starts from the **root directory** of your project (the location of `zerops.yaml`). You must enclose the name in quotes if the folder or the file name contains a space.

The files/folders will be placed into `/var/www` folder in runtime, e.g. `./src/assets/fonts` would result in `/var/www/src/assets/fonts`.

#### Examples

Deploys a folder, and a file from the project root directory:

```yaml
deployFiles:
  - dist
  - package.json
```

Deploys the whole content of the build container:

```yaml
deployFiles: .
```

Deploys a folder, and a file in a defined path:

```yaml
deployFiles:
  - ./path/to/file.txt
  - ./path/to/dir/
```

#### How to use a wildcard in the path

Zerops supports the `~` character as a wildcard for one or more folders in the path.

Deploys all `file.txt` files that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/file.txt
```

Deploys all folders that are located in any path that begins with `/path/to/`

```yaml
deployFiles: ./path/to/~/
```

Deploys all folders that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/
```

:::note Example
By default, `./src/assets/fonts` deploys to `/var/www/src/assets/fonts`, keeping the full path. Adding `~`, like `./src/assets/~fonts`, shortens it to `/var/www/fonts`
:::
#### .deployignore

Add a `.deployignore` file to the root of your project to specify which files and folders Zerops should ignore during deploy. The syntax follows the same pattern format as <a href="https://git-scm.com/docs/gitignore#_pattern_format">`.gitignore`</a>.

To ignore a specific file or directory path, start the pattern with a forward slash (`/`). Without the leading slash, the pattern will match files with that name in any directory.

:::tip
For consistency, it's recommended to configure both your `.gitignore` and `.deployignore` files with the same patterns.
:::

Examples:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      deployFiles: ./
```

```text title=".deployignore"
/src/file.txt
```
The example above ignores `file.txt` only in the root src directory.
```text title=".deployignore"
src/file.txt
```
This example above ignores `file.txt` in ANY directory named `src`, such as:
- `/src/file.txt`
- `/folder2/folder3/src/file.txt`
- `/src/src/file.txt`

:::note
`.deployignore` file also works with <a href="/references/cli/commands#deploy">`zcli service deploy`</a> command.
:::

### cache

_OPTIONAL._ Defines which files or folders will be cached for the next build.

```yaml
# OPTIONAL. Which files / folders you want to cache for the next build.
# Next builds will be faster when the cache is used.
cache: file.txt
```

The cache attribute helps optimize build times by preserving specified files between builds.

The cache attribute supports the [~ wildcard character](#how-to-use-a-wildcard-in-the-path).

Learn more about the [build cache system](/features/build-cache) in Zerops.

### envVariables

_OPTIONAL._ Defines the environment variables for the build environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      base: bun@latest
        …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](bun/how-to/env-variables) in Zerops.

## Runtime configuration

### base

_OPTIONAL._ Sets the base technology for the runtime environment.
If you don't specify the `run.base` attribute, Zerops keeps the current Bun version for your runtime.

Following options are available for Bun runtimes:

<UnorderedCodeList data={data.bun.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: bun@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
        base: bun@latest
      ...
```

<p>
  The base runtime environment contains {data.alpine.default}, the
  selected major version of Bun, Zerops command line tool, `npm`, `yarn`, `git` and `npx` tools.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the runtime environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: bun@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base:
        - bun@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [run base environments](/zerops-yaml/base-list).

To customise your build environment use the `prepareCommands` attribute.

### os

_OPTIONAL._ Sets the operating system for the runtime environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customised.
:::

### ports

_OPTIONAL._ Specifies one or more internal ports on which your application will listen.

Projects in Zerops represent a group of one or more services. Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its internal port.

For example, to connect to a Bun service with hostname = "app" and port = 3000 from another service of the same project, simply use `app:3000`. Read more about [how to access a Bun service](bun/how-to/access).

Each port has following attributes:

| parameter   | description                                                                                                                                                                                                                                                                                                            |
| ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| port        | Defines the port number. You can set any port number between _10_ and _65435_. Ports outside this interval are reserved for internal Zerops systems.                                                                                                                                                                   |
| protocol    | **Optional.** Defines the protocol. Allowed values are `TCP` or `UDP`. Default value is `TCP`.                                                                                                                                                                                                                         |
| httpSupport | **Optional.** `httpSupport = true` is the default setting for TCP protocol. Set `httpSupport = false` if a web server isn't running on the port. Zerops uses this information for the configuration of [public access](/features/access). `httpSupport = true` is available only in combination with the TCP protocol. |

### prepareCommands

_OPTIONAL._ Customises the Bun runtime environment by installing additional dependencies or tools to the runtime base environment.

<p>
  The base Bun environment contains {data.alpine.default} the selected
  major version of Bun, <a href="/references/cli">Zerops command line tool</a> and `npm`, `yarn`, `git` and `npx` tools. To install
  additional packages or tools add one or more prepare commands:
</p>

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Bun runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first deploy with a defined prepare attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](bun/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `prepareCommands` commands in the defined order

#### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](bun/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

#### Cache of your custom runtime environment

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the [build.addToRunPrepare](#copy-folders-or-files-from-your-build-container) and `run.prepareCommands` attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the custom runtime cache go to `yyy`

{/*TODO screenshot*/}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### Copy folders or files from your build container

<p>
  The prepare runtime container contains {data.alpine.default}, the selected major version of Bun, <a href="/references/cli">Zerops command line tool</a> and `npm`,
  `yarn`, `git` and `npx` tools.
</p>

The prepare runtime container does not contain your application code nor the built application. If you need to copy some folders or files from the build container to the runtime container (e.g. a configuration file) use the `addToRunPrepare` attribute in the [build section](#build-pipeline-configuration).

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...
      addToRunPrepare: ./runtime-config.yaml

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Bun runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

In the example above Zerops will copy the `runtime-config.yaml` file from your build container **after the build has finished** into the new **prepare runtime** container. The copied files and folders will be available in the `xxx` folder in the new prepare runtime container before the prepare commands are triggered.

### initCommands

_OPTIONAL._ Defines one or more commands to be run each time a new runtime container is started or a container is restarted.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Bun application is started.
      initCommands:
        - rm -rf ./cache
```

These commands are triggered in the runtime container before your Bun application is started via the [start command](bun/how-to/build-pipeline#start).

Use init commands to clean or initialise your application cache or similar operations.

:::caution
The init commands will delay the start of your application each time a new runtime container is started (including the [horizontal scaling](bun/how-to/scaling#horizontal-auto-scaling) or when a runtime container is restarted).

Do not use the init commands for customising your runtime environment. Use the [run:prepareCommands](bun/how-to/build-pipeline#preparecommands1) attribute instead.
:::

#### Command exit code

If any of the `initCommands` fails, it returns an exit code other than 0, but deploy is **not** canceled. After all init commands are finished, regardless of the status code, the application is started. Read the [runtime log](bun/how-to/logs#runtime-log) to troubleshoot the error.

#### Single or separated shell instances

You can configure your `initCommands` to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### envVariables

_OPTIONAL._ Defines the environment variables for the runtime environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to run your application ====
    run:
      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](bun/how-to/env-variables) in Zerops.

### start

_REQUIRED._ Defines the start command for your Bun application.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Bun application start command
      start: bun start
```

We recommend starting your Bun application using `bun start`.

### health check

_OPTIONAL._ Defines a health check.

`healthCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the health check to request a local URL using a HTTP GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Bun application start command
      start: bun start

      # OPTIONAL. Define a health check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      healthCheck:
        httpGet:
          port: 80
          path: /status
```

Read more about how the [health check works] in Zerops.

#### exec

Configures the health check to run a local command.
Following attributes are available:

| Parameter   | Description                                                                                                                                                                                                                                                                                                                     |
| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **command** | Defines a local command to be run.<br/>The command has access to the same [environment variables](bun/how-to/create#set-secret-environment-variables) as your Bun application.<br/>A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below. |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Bun application start command
      start: bun start

      # OPTIONAL. Define a health check with a shell command.
      healthCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [health check works] in Zerops.

### crontab

_OPTIONAL._ Defines cron jobs.

Setup cron jobs in the following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app

    # ==== how to run your application ====
    run:
      crontab:
        # REQUIRED. Sets the command to execute:
        - command: ""
        # REQUIRED. Sets the interval time to execute:
          timing: "0 * * * *"
```

Read more about setting up [cron](/references/cron) in Zerops.

## Deploy configuration

### readiness check

_OPTIONAL._ Defines a readiness check. Read more about how the [readiness check works](bun/how-to/deploy-process#readiness-checks) in Zerops.

`readinessCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the readiness check to request a local URL using a http GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        httpGet:
          port: 80
          path: /status

    # ==== how to run your application ====
    run: ...
```

Read more about how the [readiness check works](bun/how-to/deploy-process#readiness-checks) in Zerops.

#### exec

Configures the readiness check to run a local command.
Following attributes are available:

| Parameter   | Description                                                                                                                                                                                                                                                                                                                     |
| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **command** | Defines a local command to be run.<br/>The command has access to the same [environment variables](bun/how-to/create#set-secret-environment-variables) as your Bun application.<br/>A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below. |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [readiness check works](bun/how-to/deploy-process#readiness-checks) in Zerops.




<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Description of the build process

Zerops starts a temporary build container and performs following actions:

1. Installs the build environment:
   - Sets up base system and Go runtime
   - Restores cached files if available (based on `build.cache` configuration)
   - Validates cache against current `build.os`, `build.base`, and `build.prepareCommands`
2. Downloads your application source code from [GitHub ↗](https://www.github.com), [GitLab ↗](https://www.gitlab.com) or via [Zerops CLI](/references/cli)
3. Optionally [customizes the build environment](#customize-bun-build-environment)
4. Runs the build commands
5. Uploads the application artefact to the internal Zerops storage
6. Preserves specified files for future builds (based on `build.cache` configuration)
7. Optionally [customizes the runtime environment](/bun/how-to/customize-runtime)
8. [Deploys your application](/bun/how-to/deploy-process)

The build container is automatically deleted after the build has finished or failed.

## Cancel running build

When you know that the running build is not correct and you want to cancel it, you can do it in Zerops GUI. Go to the service detail, open the list of running processes and click on the **Open pipeline detail** button. Then click on the **Cancel build** button.

<p align="center">
  <img
    src="/img/screenshots/cancel_running_build.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

:::caution
The build cancellation is available before the build pipeline is finished. When the build is finished, the deployment cannot be cancelled.
:::

## Customize Bun build environment

The default Bun build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Bun defined in `zerops.yaml` [build.base](bun/how-to/build-pipeline#base) parameter
- [zCLI](/references/cli), Zerops command line tool
- `npm`, `yarn`, `git` and `npx` tools

If you prefer the Ubuntu OS instead of Alpine, set the [build.os](/bun/how-to/build-pipeline#os) attribute to `ubuntu`. To install additional packages or tools add one or more [build.prepareCommands](bun/how-to/build-pipeline#preparecommands) commands to your `zerops.yaml`.

:::info
The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).
:::

## Bun build hardware resources

Build of your Bun application is run in a separate build container with following resource configuration:

| HW resource   | Minimum | Maximum |
| ------------- | ------- | ------- |
| **CPU cores** | 6       | 20      |
| **RAM**       | 8 GB    | 8 GB    |
| **Disk**      | 1 GB    | 100 GB  |

The build container is always started with the minimum hardware resources and scales vertically up to the maximum resources.

:::info
Hardware resources of the build containers are not charged. The build costs are covered by the standard Zerops [project fee](https://zerops.io/#pricing).
:::

## Build time limit

The time limit for the whole build pipeline is **1 hour**. After 1 hour, Zerops will terminate the build pipeline and delete the build container.

## Troubleshooting build-related problems

### Failure of a build prepare command

If any [prepare command](bun/how-to/build-pipeline#preparecommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](bun/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom build environment is ready for the build phase.

### Invalidate the build cache
If you encounter unexpected build behavior or dependency issues, the problem might be related to [cached build data](/features/build-cache). While Zerops maintains the build cache to speed up deployments, sometimes you may need to start fresh.
To invalidate the build cache:

1. Go to your service detail in Zerops GUI
2. Choose **Pipelines & CI/CD Settings** from the left menu
3. Click on the **Invalidate build cache** button

This will force Zerops to run the next build clean, including all prepare commands, which can help resolve cache-related issues. After invalidation, your next build will also create a fresh cache.

### Failure of a build command

If any [build command](bun/how-to/build-pipeline#buildcommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](bun/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the `--verbose` option.

```yaml
buildCommands:
  - npm i --verbose
  - npm run build
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the [deploy](bun/how-to/deploy-process) phase.



Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart Bun service in Zerops GUI

To stop the Bun service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)*/}

To start the stopped Bun service choose the **Start** item from the same menu.

To restart the Bun service choose the **Restart** item from the same menu.

## Stop and start Bun using zCLI

zCLI is the Zerops command-line tool. To stop and start the Bun service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and services to choose from.
:::




Zerops provides a powerful Bun runtime service with extensive build support. The Bun runtime is highly scalable and customizable to suit your development and production needs. With just a few clicks or commands, you can have a production-ready Bun environment up and running in no time.

## Create a Bun service using Zerops GUI

First, set up a project in the Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu under the **Services** section. From there, you can add a new Bun service:

<Video
  width="100%"
  autoplay="true"
  loop="loop"
  muted="muted"
  preload="none"
  src="/vids/services/bun.webm"
  plays-inline="true"
/>

### Choose a Bun version

Zerops supports the following Bun versions:

<UnorderedList data={data.bun.readable} />

:::info
You can easily [upgrade](bun/how-to/upgrade) the major version at any time later.
:::

### Set a hostname

Enter a unique service identifier like "app", "cache", "gui", etc. Duplicate services with the same name within the same project are not allowed.

#### Limitations:

- Maximum 25 characters
- Must contain only lowercase ASCII letters (a-z) or numbers (0-9)

:::caution
The hostname is fixed after the service is created and cannot be changed later.
:::

### Set secret environment variables

Add environment variables with sensitive data, such as passwords, tokens, salts, certificates, etc. These will be securely saved inside Zerops and added to your runtime service upon start.

Setting secret environment variables is optional. You can always set them later in the Zerops GUI.

Read more about the [different types of environment variables](bun/how-to/env-variables#types-of-env-variables-in-zerops) in Zerops.

### Configure auto scaling

Zerops automatically scales Bun services both vertically and horizontally. Vertical scaling adjusts the hardware resources (CPU, RAM, and disk) of a Bun container, while horizontal scaling adds or removes entire containers.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. The power your application receives depends on the other applications running on the same CPU core. In the best-case scenario, your application gets 10/10 of the CPU core power, and 1/10 in the worst-case scenario.

**Dedicated**
The CPU core is dedicated exclusively to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

You can choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto scaling

Vertical auto scaling has the following default configuration:

<ResourceTable />

Bun services always start with the minimal resources.

In most cases, the default parameters will work without issues. If you need to limit the cost of the Bun service, you can lower the maximum resources. Zerops will never scale above the selected maximums.

If you experience insufficient Bun performance or capacity, you can increase the minimum resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine-tune](bun/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application's needs.
:::

:::info
You can change the vertical auto scaling parameters at any time.
:::

#### Horizontal auto scaling

When a container needs more CPU or RAM but is already consuming the maximum resources defined for vertical auto scaling, Zerops will add a new container to your Bun service. When your Bun service doesn't need as much power and all containers are vertically scaled down such that their CPU allocation is near the minimum resources, Zerops will gradually remove entire containers.

Horizontal auto scaling has the following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>Minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>Maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Bun services always start with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

[Learn more](bun/how-to/scaling) about Bun auto scaling in Zerops.

#### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will automatically start a new container and deploy your application. However, the application will be unavailable for a short period. This mode is recommended for non-critical applications or development environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers based on your application's load. An application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed down to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents temporary outages in case any of the Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically, and the broken container will be deleted.

:::caution
Make sure your application is designed to run in multiple containers.
:::

## Create a Bun service using zCLI

zCLI is the Zerops command-line tool. To create a new Bun service via the command line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](bun/how-to/create#create-a-project-description-file)
3. [Create a project with a Bun and PostgreSQL service](#full-example)

### Create a project description file

Zerops uses a YAML format to describe the project infrastructure.

#### Basic example:

Create a directory called `my-project`. Inside the `my-project` directory, create a `description.yaml` file with the following content:
```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in Bun@{version} format
    type: bun@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes your future project infrastructure. The project will contain one Bun version 20 service with default [auto scaling](bun/how-to/scaling) configuration. Hostname will be set to "app", the internal port(s) the service listens on will be defined later in the [zerops.yaml](bun/how-to/build-pipeline#ports). Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

#### Full example:

Create a directory my-project. Create an description.yaml file inside the my-project directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a Bun and PostgreSQL database
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in Bun@{version} format
    type: bun@latest
    # optional: vertical auto scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
  - # second service hostname
    hostname: db
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"non_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain a Bun service and a [PostgreSQL](/postgresql/overview) service.

Bun service with "app" hostname, the internal port(s) the service listens on will be defined later in the [zerops.yaml](bun/how-to/build-pipeline#ports). Bun service will run on version 20 with a custom vertical and horizontal scaling. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The hostname of the PostgreSQL service will be set to "db". The [single container](/postgresql/how-to/create#single-container) mode will be chosen and the default [auto scaling configuration](/postgresql/how-to/create#set-auto-scaling-configuration) will be set.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

| Parameter       | Description                                                                                                                     | Limitations             |
| --------------- | ------------------------------------------------------------------------------------------------------------------------------- | ----------------------- |
| **name**        | The name of the new project. Duplicates are allowed.                                                                            |                         |
| **description** | **Optional.** Description of the new project.                                                                                   | Maximum 255 characters. |
| **tags**        | **Optional.** One or more string tags. Tags do not have a functional meaning, they only provide better orientation in projects. |

At least one service in `services:` section is required. You can create a project with multiple services. The example above contains Bun and PostgreSQL services but you can create a `description.yaml` with your own combination of [services](/features/infrastructure).

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit">Parameter</th>
      <th className="w-fit">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">
        <b>hostname</b>
      </td>
      <td className="w-fit">
        The unique service identifier.
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>type</b>
      </td>
      <td className="w-fit">
        Specifies the service type and version.
        <br />
        See what [Bun service types](/references/import-yaml/type-list#runtime-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>verticalAutoscaling</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Defines <a href="bun/how-to/create#set-auto-scaling-configuration"> custom vertical auto scaling parameters</a>.<br />
        All verticalAutoscaling attributes are optional. Not specified attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - cpuMode</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minCpu/maxCpu</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minCpu or maxCpu in CPU cores (integer).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minRam/maxRam</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minRam or maxRam in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minDisk/maxDisk</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minDisk or maxDisk in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>minContainers</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Default = 1. Defines the minimum number of containers
        for <a href="bun/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.<br />
        <br />
        <b>Limitations:</b>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maxContainers</b>
      </td>
      <td className="w-fit">
        Defines the maximum number of containers for <a href="bun/how-to/create#horizontal-auto-scaling"> horizontal autoscaling</a>.<br />
        <br />
        <b>Limitations:</b>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>envSecrets</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Defines one or more secret env variables as a key value
        map. See env variable <a href="bun/how-to/env-variables#env-variable-restrictions">restrictions</a>.
      </td>
    </tr>
  </tbody>
</table>

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>
### Add Bun service to an existing project

#### Example:

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in Bun@{version} format
    type: bun@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one Bun service version 20 with default [auto scaling](bun/how-to/scaling) configuration will be added to your project. Hostname of the new service will be set to `app`. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The content of the `services:` section of `import.yaml` is identical to the project description file. The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the import.yaml file is 100 kB.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline_custom_runtime.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>


The default Bun runtime environment contains:

- <span>{data.alpine.default}</span>
- selected version of Bun selected when the runtime service was created.
- <a href="/references/cli">
    `zCLI`
  </a>
  , Zerops command line tool
- `npm`, `yarn`, `git` and `npx` tools

If you prefer the Ubuntu OS instead of Alpine, set the [build.os](/bun/how-to/build-pipeline#os) attribute to `ubuntu`. To install additional packages or tools add one or more <a href="bun/how-to/build-pipeline#preparecommands1">`run.prepareCommands`</a> commands to your `zerops.yaml`.

When the first deploy with a defined `prepareCommands` attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](bun/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `run.prepareCommands` commands in the defined order

### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](bun/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

The prepare runtime container is automatically deleted after the prepare runtime phase has finished or failed.

### Custom runtime environment cache

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the <a href="bun/how-to/build-pipeline#copy-folders-or-files-from-your-build-container">`build.addToRunPrepare`</a> and <a href="bun/how-to/build-pipeline#preparecommands-1">`run.prepareCommands`</a> attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the custom runtime cache go to `yyy`

{/*TODO screenshot*/}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.



## Delete Bun service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete Bun using zCLI

zCLI is the Zerops command-line tool. To delete the Bun service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step3.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Application artefact

When the [build phase](bun/how-to/build-process) is finished, the application artefact is stored in the internal Zerops storage and the build container is deleted.

If you triggered the deploy pipeline [manually](bun/how-to/trigger-pipeline#manual-deploy-using-zerops-cli) using Zerops CLI, the application artefact is also uploaded to the internal Zerops storage.

Zerops uses the stored artefact to deploy the identical version of your application each time a new container is started:

- when a new application version is deployed
- when the application [scales horizontally](bun/how-to/create#horizontal-auto-scaling)
- when a runtime container fails and a new container is started automatically

## First deploy

When your application is deployed for the first time, Zerops will start one or more runtime containers based on the service [auto scaling settings](bun/how-to/scaling).

Zerops performs following actions for each new container:

1. Installs the runtime environment
2. Downloads the application artefact from the internal storage
3. Optionally runs the [init commands](bun/how-to/build-pipeline#initcommands)
4. Starts your application using the [start command](bun/how-to/build-pipeline#start)
5. Optionally waits until the [readiness check](bun/how-to/build-pipeline#readiness-check) succeeds
6. The container is now active and receives incoming requests.

Services with multiple containers are deployed in parallel.

:::info
If your application needs to be initialized in each runtime container, add [init commands](bun/how-to/build-pipeline#initcommands) to `zerops.yaml`.
:::

:::caution
Do not use the `initCommands` for customising your runtime environment. See [how to customise the runtime environment](bun/how-to/build-pipeline#preparecommands-1).
:::

## Further deploys

When a previous version of your application is already running, Zerops will start new containers. The count of new containers will be the same as the count of existing containers.

Zerops performs the identical actions for each new container as the first deployment.
When all new containers are started your service contains both new and old versions for a short period of time.

The old containers are then removed from the project balancer so they don't receive new requests. The Bun process inside each of the old containers is terminated and all old containers are gradually deleted.

## Readiness checks

If your application isn't ready to handle requests right after it is started via the [start command](bun/how-to/build-pipeline#start), configure a [readiness check](bun/how-to/build-pipeline#readiness-check) in your `zerops.yaml`.

If the readiness check is defined, Zerops will:

1. Start your application
2. Perform a readiness check
3. If the readiness check fails, wait 5 seconds and repeat step 2.
4. If the readiness check succeeds, set the container as active.

Application in the runtime container with a pending readiness check won't receive any incoming requests. Only active containers receive incoming requests to your Bun service.

If the readiness check is still failing after 5 minutes, the specific runtime container is marked as failed and Zerops will delete it, create a new runtime container and perform the deploy.

The <a href="bun/how-to/build-pipeline#httpget">`httpGet`</a> readiness check is successful when the URL returns HTTP status code `2xx`. The timeout is 5 seconds. When the URL returns a `3xx` HTTP status, the readiness check HTTP client will follow the redirect.

The <a href="bun/how-to/build-pipeline#exec">`exec.command`</a> readiness check is successful when the command returns status code 0. The timeout is 5 seconds.

Read the [runtime log](bun/how-to/logs#runtime-log) to troubleshoot failed readiness checks.

## Application versions

Zerops keeps 10 last versions of your application in the internal storage.

The list of application versions is available in Zerops GUI. Go to the service detail and choose **Service dashboard & runtime containers** from the left menu. The active version is highlighted, show all archived version by clicking on the button below.

<p align="center">
  <img
    src="/img/screenshots/pipeline_history.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

The pipeline detail is accessible from the additional menu. The pipeline detail contains

- The pipeline config (`zerops.yaml`) that was used for the selected version
- The build log (if available)
- The prepare runtime log (if available)

You can download the build artefact of the selected version or delete an inactive version manually.

## Restore an archived version

You can restore an archived version by choosing the **Activate** item from the additional menu.
Zerops will deploy the selected version and the active version will be archived.

The environment variables will be restored to the latest moment when the selected version was active.



Environment variables help you run your application in different environments. They allow you to isolate all specific environment aspects from your application code and keep your app encapsulated. You can create several projects in Zerops that represent different environments (development, stage, production) or even each developer can have a project with its own environment.

In Zerops you do not have to create a `.env` file manually. Zerops handles the environment variables for you.

## Types of env variables in Zerops

There are 3 different sets of env variables in Zerops:

| environment | type   | defined in                                                                        |
| ----------- | ------ | --------------------------------------------------------------------------------- |
| build       | basic  | [zerops.yaml](bun/how-to/build-pipeline#envvariables)                          |
| runtime     | basic  | [zerops.yaml](bun/how-to/build-pipeline#envvariables-1)                        |
| runtime     | secret | [Zerops GUI](bun/how-to/env-variables#set-secret-env-variables-in-zerops-gui) |

Use the [secret env variables](bun/how-to/create#set-secret-environment-variables) for all sensitive data you don't want to store in your application code. Secret env variables are also useful if you need for testing where you need to change the value of some env variables frequently. Secret variables are managed in Zerops GUI and you don't have to redeploy your application.

The basic build and runtime env variables are listed in your [zerops.yaml](/zerops-yaml/specification) and deployed together with your application code. When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your zerops.yaml and redeploy your application to Zerops.

You can [reference](bun/how-to/env-variables#reference-a-local-variable-in-another-variable-value) another variable of the same service or even a variable of [another service](bun/how-to/env-variables#reference-a-variable-of-another-project-service) within the same project.

## Set secret env variables in Zerops GUI

Use secret variables to store passwords, tokens and other sensitive information that shouldn't be part of your repository and listed in zerops.yaml.

<p align="center">
  <img
    src="/img/screenshots/runtime_secret_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

You can set env variables when you [create](bun/how-to/create) a new Bun service or you can set them later.

To configure env variables for an existing service, go to the service detail and choose **Environment variables** in the left menu. Scroll to the **Secret variables** section and click on the **Add secret variable** button and set variable key and value.

You can edit or delete env variables that you've created by clicking on the menu on the right side of each row.

The changes you've made in the list of env variables will be automatically applied to all containers of your project's services.

:::caution
You need to **restart** the runtime service after you update environment variables. The Bun process running in the container receives the list env variables only when it starts. Update of the env variables while the Bun process is running does not affect your application.
:::

## Set basic build env variables in zerops.yaml

To set basic env variables for the build environment, add the `envVariables` attribute to the build section in your `zerops.yaml`

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
       …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Set basic runtime env variables in zerops.yaml

To set basic env variables for the runtime environment, add the `envVariables` attribute to the runtime section in your `zerops.yaml`.

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    run:
       …

      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Env variable restrictions

**key**

- must satisfy the following regular expression: `[a-zA-Z_]+[a-zA-Z0-9_]*`
- all variable keys in the same service must be unique regardless of case
- keys are case sensitive

**value**

- must contain only ASCII characters
- the _End of Line_ character is forbidden

These restrictions apply to all [types of env variables](bun/how-to/env-variables#types-of-env-variables-in-zerops).

## Referencing other env variables

You can reference another variable of the same service using `${key}` in your variable value. You can even reference a variable from a different service using `${hostname_key}`. The referenced variable doesn't need to exist when you are entering your variable.

### Reference a local variable in another variable value

| Variable key | Variable value      | Computed variable value |
| ------------ | ------------------- | ----------------------- |
| id           | 12345               | 12345                   |
| hostname     | app                 | app                     |
| name         | `${id}-${hostname}` | 12345-app               |

### Reference a variable of another project service

Let's say your project contains two PostgreSQL services `dbtest` and `dbprod`. Both services have a `connectionString` variable. Then you can create a `dbConnectionString` env variable in your Bun runtime and set `${dbtest_connectionString}` as the variable value. Zerops will fill in the value of the `connectionString` variable of the `dbtest` service.

When you change the `dbConnectionString` value to `${dbprod_connectionString}`, Zerops will fill in the value of the `connectionString` variable of the `dbprod` service.

:::caution
When you change the value of the `connectionString` variable in the service `dbtest` you need to **restart** the Bun service. The Bun process running in the container receives the list env variables only when it starts. Update of the env variables while the Bun process is running does not affect your application.
:::

## Generated env variables

Zerops creates several helper variables when a Bun service is created, e.g. `hostname`, `PATH`. Some helper variables are read-only (`hostname`), others are editable (`PATH`). Generated variables cannot be deleted.

Generated env variables are listed on the **Environment variables** page. Scroll to the **Generated variables** section.

{/* TODO screenshot of the generated env variables of the respective runtime*/}

<p align="center">
  <img
    src="/img/screenshots/nodejs_generated_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## How to read env variables from your Bun app

Zerops passes all environment variables from all project services when your Bun app is deployed and started.

To access the local environment variable i.e. the variable set to this Bun service in your app, use:

```sh
process.env.YOUR_VARIABLE_KEY_HERE
```

## How to read env variables of another service

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Examples:

To access the `connectionString` env variable of the `mariadb1` service, use `mariadb1_connectionString` as the env variable key.
To access the `password` env variable of the `mariadb2` service, use `mariadb2_password` as the env variable key.

## How to read runtime env variables in the build environment

You can use runtime env variables in the build environment using the `RUNTIME_` prefix. For example if you have a runtime variable with the `connectionString` key, use the `RUNTIME_connectionString` to read the variable in the build environment. This rule applies both for basic and secret runtime variables.

## Basic and secret env variable with the same key

If you create a secret env variable and a basic runtime env variable with the same key, Zerops saves the basic runtime env variable from your zerops.yaml and ignores the secret env variable.

If you create a basic build env variable and a runtime env variable with the same key, Zerops saves both because the build and runtime environments have separate sets of env variables.



## Zerops GUI

In Zerops GUI, go to the service detail page and choose **Service containers & resources overview** and scroll down to the list of containers.

<p align="center">
  <img
    src="/img/screenshots/nodejs_containers_list.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Then click on the file browser icon and the file browser opens:

<p align="center">
  <img
    src="/img/screenshots/nodejs_file_browser.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

If your service is in the [HA mode], you can switch between containers in the top left corner.

## zCLI & SSH

You can connect to the container via SSH with the Zerops CLI and browse its files.
How to [connect to your service via SSH](/references/ssh).



Zerops provides 3 different logs:

- [build log](#build-log)
- [prepare runtime log](#prepare-runtime-log)
- [runtime log](#runtime-log)

## How to access logs

### Build log

#### Zerops GUI

To access a build log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Build log**. The build log button is available only if the [build pipeline](bun/how-to/trigger-pipeline) was triggered for the selected deploy.

#### zCLI

To access a build log in Zerops CLI use

```sh
zcli service log --showBuildLogs
```

Read more about the [zcli service log](/references/cli/access-logs) command.

### Prepare runtime log

#### Zerops GUI

To access a prepare runtime log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Prepare runtime log**. The prepare runtime log button is available only if the [prepare runtime pipeline](bun/how-to/build-pipeline#preparecommands-1) was triggered for the selected deploy.

#### zCLI

_Prepare runtime log is currently not supported in zCLI._

### Runtime log

#### Zerops GUI

To access a runtime log in Zerops GUI, go to the service detail and choose **Runtime log** in the left menu.

<p align="center">
  <img
    src="/img/screenshotsbun_runtime_log.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Each runtime container has its own log. If your service has multiple containers, select the container in the log header.

You can filter log records by minimum severity or by time.

#### zCLI

To access the log of the runtime containers in Zerops CLI use

```sh
zcli service log
```

Read more about the [zcli service log](/references/cli/access-logs) command.

## Bun logging configuration

Zerops logs all messages sent

- to the standard error (`stderr`)
- to the standard output (`stdout`)
- via the Bun `console.log` method

### Severity level

By default the `console.log` creates a message with the `Informational (6)` severity.

Add a severity number in the `<N>` format as a prefix to set a custom severity as shown below:

```js
console.log('A message with the informational severity ...');
console.log('<0>Emergency (0) severity > system is unusable.');
console.log('<1>Alert (1) severity > action must be taken immediately.');
console.log('<2>Critical (2) severity > critical conditions.');
console.log('<3>Error (3) severity > error conditions.');
console.log('<4>Warning (4) severity > warning conditions.');
console.log('<5>Notice (5) severity > normal, but significant, condition.');
console.log('<6>Informational (6) severity > informational message.');
console.log('<7>Debug (7) severity > debug-level message.');
```

:::info

`console.info`, `console.warn`, `console.debug`
, and `console.error` are just aliases to the `
  console.log
` method. They don't set the appropriate severity number. Use the `
  &lt;N&gt;
` prefix instead. :::




Zerops performs an automated scaling of hardware resources required to run your runtime application based on its usage. If the current use of your application does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your application is under heavy load or needs to store more data, then auto scaling increases the resources to make sure it runs smoothly.

## Vertical and horizontal auto scaling

Each application you deploy starts with the minimum hardware resources: **CPU** cores, **RAM** and **Disk**. Zerops monitors the usage of these 3 resources and if the usage exceeds a set threshold, more CPU cores, RAM or Disk is allocated to the service. This is called **vertical scaling**.

<p align="center">
  <Image
    lightImage="/img/gui/resources.webp"
    darkImage="/img/gui/resources.webp"
    alt="Resources of a Zerops service"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

**Horizontal scaling** adds or removes whole containers.

Zerops has a preference for vertical scaling because it's faster and more precise. If the vertical auto scaling hits the defined maximum a new container is started automatically. When your application doesn't need so much power and all containers are vertically scaled down, Zerops will gradually remove whole containers.

<p align="center">
  <img
    src="/img/screenshots/scaling2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Configure auto scaling

To change the auto scaling settings go to the Bun service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### CPU mode

#### Shared

Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

#### Dedicated

The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

Bun service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Bun service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Bun performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Bun service. When your Bun service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Bun service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your application starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your application.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your application doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

By default Zerops keeps a minimum free RAM in each container. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your application need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 0.125 GB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the application is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each Bun service. Zerops will never scale above the entered values. If your application is in [highly available mode], maximal resources are identical for all containers of the Bun service.

### Not enough resources to scale up

If one of the Bun containers needs more resources but there are not enough of them on the underlying machine, a new container with the required hardware resources will be started on another machine. When the new container is ready, it will be added to the service balancer. The old container will be removed from the balancer and deleted.

### Automatic scale down

When the application no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the application from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal autoscaling

Zerops prefers vertical scaling over horizontal scaling because vertical scaling is faster and allows finer adjustment to the required performance. Horizontal scaling can be disabled by setting the same number for the minimum and maximum container count. Zerops will then scale the Bun service only vertically.

Your application is created with the defined minimum number of containers. Zerops will add a new container when any of the service's containers reaches the maximum limit for vertical scaling for CPU cores or RAM. Zerops doesn't start a new container when the maximum disk space is reached. No more containers are added when the defined maximum container limit is reached.

The new container is started with a minimum disk size and with an average CPU cores and RAM of the existing containers.

By customising the vertical auto scaling limits, you can cause the horizontal scaling to start earlier. For example if you lower the vertical auto scaling maximum to 1 CPU core, Zerops will start a new container if some of the running containers are using the whole CPU core for more than 20 seconds.

If the application no longer needs as much power, Zerops will gradually remove containers to the defined minimum count. The container is removed after its CPU cores are scaled down to the defined minimum and the free CPU is safely above the minimum threshold for vertical scaling. Zerops only **removes containers** with a minimum **15 minute lifetime**.

## Monitor Bun resources

Zerops provides information about how much hardware resources the Bun service is currently using. Go to the service detail in Zerops GUI and select **Service dashboard & runtime containers** in the left menu. Zerops also provides the history of resource usage.



Zerops provides [shared storage service](/shared-storage/overview) that can be connected to runtime services. Shared storage enables your runtime service to share files between all containers of the same service or even among containers of different runtime services.

## Connect a shared storage in Zerops GUI

Connect your Bun service directly when creating a new shared storage service. Just select your Bun service in the **Share with Services** block on the **Add new shared storage service** page.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_1.png)

To connect the existing shared storage to the Bun service, go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Select a runtime service and the shared storage will be connected to the selected runtime.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_2.png)

Zerops will create a new folder `/mnt/[shared storage name]`` in the runtime root folder. E.g. `/mnt/teststorage`for a`teststorage` shared storage. The content of this folder is shared among all containers of the runtime service you've selected. If you select multiple runtimes, the content of the folder will be shared among all containers of selected services.

## Disconnect a shared storage in Zerops GUI

Go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Switch off the toggle to disconnect the shared storage from the selected runtime.

:::note
Your runtime service will be automatically restarted when a shared storage is disconnected.
:::

## Create Bun service with a shared storage using zCLI

zCLI is the Zerops command-line tool. To create a new Bun service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](bun/how-to/shared-storage#create-a-project-description-file)
3. [Create a project with a Bun service and a shared storage](bun/how-to/shared-storage#create-a-project-with-a-bun-service-and-a-shared-storage)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### description.yaml format

[Read the basics](bun/how-to/create#create-a-project-description-file) how to define the Bun service using the description.yaml.

#### Example with a shared storage

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project

  # optional: project description
  description: A project with a Bun and a shared storage

  # optional: project tags
  tags:
    - DEMO
    - ZEROPS

# array of project services
services:
  - # service name
    hostname: teststorage

    # shared storage service has no version
    type: shared-storage

    # mode: HA / NON_HA
    mode: NON_HA

  - # service name
    hostname: app

    # service type and version number in Bun@{version} format
    type: bun@latest

    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2

    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4

    # Mount the shared storage to the Bun service
    mount:
      - teststorage
```

The mount attribute accepts an array of shared storage names you want to mount to your runtime service.

### Create a project with a Bun service and a shared storage

Follow the article [How to create a project based on the description.yaml](bun/how-to/create#create-a-project-based-on-the-descriptionyaml).




<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-1.webp"
    darkImage="/img/mind-maps/build-deploy/step-1-dark.webp"
    alt="build deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Automatic builds and deploys from GitHub or GitLab

Integrate Zerops to your GitHub or GitLab repository and configure the automatic builds and deploys.

Follow these steps:

1. Add [zerops.yaml](bun/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository.
2. Connect your GitHub repository or connect your GitLab repository

Then each time you create a new tag or push to a specific branch, depending on the configuration, GitHub or GitLab will initiate a new build & deploy pipeline.

<p align="center">
  <Image
    lightImage="/img/gui/github-integration.webp"
    darkImage="/img/gui/github-integration.webp"
    alt="github integration"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

### Skip the automatic pipeline once

To ensure that a pipeline is not triggered by your next push, add `[ci skip]` or `[skip ci]` to the commit message. It is case insensitive.

:::note
You will still see a successful delivery of a webhook in your Github/Gitlab repository as a webhook is actually triggered, but with no action.
:::

## Manual builds and deploys using Zerops CLI

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    darkImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    alt="Manual Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

To start a new build & deploy pipeline manually, use the Zerops CLI.

Follow these steps:

1. Add <a href="bun/how-to/build-pipeline#add-zeropsyaml-to-your-repository">`zerops.yaml`</a> to your repository.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli push` command.

The `zcli push` command uploads your application code, builds and deploys your application in Zerops.

The command triggers the [build pipeline](bun/how-to/trigger-pipeline) defined in `zerops.yaml`. `zerops.yaml` must be in the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

zCLI uploads all files and subdirectories of the working directory to Zerops and starts the build pipeline. If the `.gitignore` file is found, it is interpreted and the defined files and folders will be ignored.

If you just want to deploy your application to Zerops, use the [zcli deploy](#manual-deploy-using-zerops-cli) command instead.

#### Push command parameters

```sh
Usage:
  zcli push [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.
  -h, --help                     the service push command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

zCLI commands are interactive, when you press enter after `zcli push`, you will be given a list of your projects to choose from.

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

## Manual deploy using Zerops CLI

To start only a deploy pipeline, use the Zerops CLI.

Follow these steps:

1. Add [zerops.yaml](bun/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository. Omit the build section.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli service deploy` command.

The `zcli service deploy` command uploads your application and deploys it in Zerops. Use this tool if you have your own build process. If you want to build your application in Zerops, use an [automatic](#automatic-builds-and-deploys-from-github-or-gitlab) or [manual](#manual-builds-and-deploys-using-zerops-cli) build process.

#### Deploy command parameters

```sh
Usage:
  zcli service deploy pathToFileOrDir [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
  -h, --help                     the service deploy command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

`pathToFileOrDir` defines a path to one or more directories and/or files relative to the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

`zerops.yaml` must be placed in the working directory.

:::info
You can change the deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your working directory.
:::



You can upgrade or downgrade your Bun service to a different major Bun version by setting the <a href="bun/how-to/build-pipeline#base-1">`run.base`</a> parameter in your `zerops.yaml`. When you [trigger a new pipeline](bun/how-to/trigger-pipeline), Zerops will start new runtime container(s) with the required Bun version. If you don't specify the `run.base` attribute in your `zerops.yaml`, Zerops keeps the current Bun version for your runtime.

If you want to build your application with a different major Bun version, change the <a href="bun/how-to/build-pipeline#base">`build.base`</a> parameter in your `zerops.yaml`. The `build.base` is the required attribute.





[Bun ↗](https:/bun.org/en) is an asynchronous event-driven JavaScript runtime, which is designed to build scalable network applications.

As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-bun), a **_recipe_**, containing the most simple Bun web application. The repo will be used as a source from which the app will be built.

<CustomCard title="Feel free to deploy the recipe yourself" emoji="🚀">
  This is the most bare-bones example of Bun app running on Zerops — as few libraries as possible,
  just a simple endpoint with connect, read and write to a Zerops PostgreSQL database.

  <DeployButton link="Bun" badgeWidth="200" />
</CustomCard>

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)


2. In the **Projects** box click on **Import a project** and paste in the following YAML config ([source ↗](https://github.com/zeropsio/recipe-bun/blob/main/zerops-project-import.yaml)):

```yaml
project:
  name: recipe-bun
  tags:
    - zerops-recipe

services:
  - hostname: api
    type: bun@1.1
    enableSubdomainAccess: true
    buildFromGit: https://github.com/zeropsio/recipe-bun

  - hostname: db
    type: postgresql@16
    mode: NON_HA
    priority: 1
```

3. Click on **Import project** and wait until all pipelines have finished.

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://api-806-3000.prg1.zerops.app`.
2. Click or the `subdomain` URL to open it in a browser and you should see

```
{"message":"This is a simple, basic Bun application running on Zerops.io,\n          each request adds an entry to the PostgreSQL database and returns a count.\n          See the source repository (https://github.com/zeropsio/recipe-bun) for more information.","newEntry":"dfd1e873-bfc8-4f36-af07-e32561820b93","count":"1"}
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::


## How to start

It doesn't matter whether it's your first curious introduction to Zerops, you have already mastered the basics and are looking for a tiny detail or inspiration. Below, choose a section that fits your needs:

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: 'bun/getting-started',
      label: 'New to Zerops?',
      customProps: {
        icon: Icons['rocket-launch'],
        description: 'There is no better way to start than to try it yourself.',
      },
    },
    {
      type: 'link',
      href: 'bun/how-to/create',
      label: 'Care for details?',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description:
          'Dive in all Zerops has to offer for your Bun application.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=Bun&type=all&language=&sort=',
      label: 'Bun recipes',
      customProps: {
        icon: Icons['github'],
        description:
          'Get inspired by already existing repositories, ready to be imported to Zerops.',
      },
    },
  ]}
/>

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: 'bun/how-to/create',
      label: 'Create Bun service',
      customProps: {
        icon: Icons['Bun'],
        description: 'Start with creating a Bun service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: 'bun/how-to/build-pipeline#add-zeropsyaml-to-your-repository',
      label: 'Zerops.yaml',
      customProps: {
        icon: Icons['puzzle'],
        description:
          'See a full example of zerops.yaml file to create your own app.',
      },
    },
    {
      type: 'link',
      href: 'bun/how-to/scaling',
      label: 'Scaling configuration',
      customProps: {
        icon: Icons['adjustments'],
        description:
          'Set up scaling of your Bun application so that it runs smoothly while using only necessary resources.',
      },
    },
  ]}
/>

{" "}

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'bun/how-to/build-process#customize-bun-build-environment',
      label: 'Customize build environment',
      customProps: {
        icon: Icons['sparkles'],
      },
    },
    {
      type: 'link',
      href: 'bun/how-to/customize-runtime',
      label: 'Customize runtime environment',
      customProps: {
        icon: Icons['sparkles-solid'],
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'bun/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>




<FAQ>
  <FAQItem question="Sample Question">sample answer</FAQItem>
</FAQ>




This quick start allows you to get hands-on experience of Zerops, whether you only want to see it in action or want to start small and scale up the project size later. The purpose of this guide is to get an existing Deno application up and running easily.

If you are already familiar with Zerops and you are interested in more detailed guides for your own application, feel free to head straight to the [How to](/deno/how-to/create) section.

## Guides

We have created a repository, a _recipe_, containing the most simple Deno web application, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics with one-service app.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-deno',
      label: 'Deno + SQL database',
      customProps: {
        icon: Icons['github'],
        description: 'A more complex, multi-service application example.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=deno&type=all&language=&sort=',
      label: 'All Deno recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspired.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



## Private internal access

Projects in Zerops represent a group of one or more services.
Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its [internal port](/deno/how-to/build-pipeline#ports).

To connect to your application with `app` hostname running on [internal port](/deno/how-to/build-pipeline#ports) `3000`, simply use `http://app:3000`

:::info
Do not use `https://` when communicating with Deno from other runtime services in the same project. The internal communication is done over a private network and is isolated from other projects.
:::

### Use Deno environment variables

Zerops creates default environment variables for each Deno service to help you with connection within the same project. To avoid the need to copy the access parameters manually, use [generated environment variables](/deno/how-to/env-variables#generated-env-variables) of the Deno service.

#### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Example:

To access the `API_TOKEN` env variable of the `app` service, use `app_API_TOKEN` as the env variable key.

Read more about [env variables](/deno/how-to/env-variables).

## Private access via VPN

### Start VPN connection

You can securely connect to your Deno application from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)

### Access Deno application through VPN

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/deno/how-to/env-variables) are available when connected through VPN. To connect to your Deno application in Zerops set the hostname and [internal port](/deno/how-to/build-pipeline#ports) e.g. http://app:3000

:::info
Do not use `https://` when communicating with Deno over the VPN. The security is assured by the VPN. The internal communication is done over a private network and is isolated from other projects.
:::

### Connect via SSH

Use the <a href="/references/ssh">`ssh` command</a> to connect to your service via SSH.

### Stop VPN connection

[Stop the Zerops VPN](/references/vpn#stop-vpn) in zCLI.

## Public access through zerops.io subdomain

By default, your Deno service is not publicly accessible. To test your application, enable the [public access through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain).

## Public access through your domain

By default, your Deno service is not publicly accessible. When your application is ready for production or if you want to test it on the production domain, [configure the public access through your domain](/features/access#public-access-through-your-domain).

## Public access from another Zerops project

All services of the same project share a dedicated private network. To connect to a service within the same project, just use the service hostname and its [internal port](/deno/how-to/build-pipeline#ports). Different projects are not connected inside Zerops. To connect to a runtime service from another Zerops project, you need to use public access either [through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain) or [through your domain](/features/access#public-access-through-your-domain).




Zerops provides a customizable build and runtime environment for your Deno application.

## Add zerops.yaml to your repository

Start by adding `zerops.yaml` file to the **root of your repository** and modify it to fit your application:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: deno@latest

      # OPTIONAL. Set the operating system for the build environment.
      # os: ubuntu

      # OPTIONAL. Customise the build environment by installing additional packages
      # or tools to the base build environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # REQUIRED. Build your application
      buildCommands:
        - deno task build

      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles:
        - dist
        - deno.jsonc

      # OPTIONAL. Which files / folders you want to cache for the next build.
      # Next builds will be faster when the cache is used.
      # cache: directory

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base: deno@latest

      # OPTIONAL. Sets the internal port(s) your app listens on:
      ports:
        # port number
        - port: 3000

      # OPTIONAL. Customise the runtime Deno environment by installing additional
      # dependencies to the base Deno runtime environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Deno application is started.
      # initCommands:
      #  - rm -rf ./cache

      # REQUIRED. Your Deno application start command
      start: deno task start
```

The top-level element is always `zerops`.

### Setup

The first element `setup` contains the **hostname** of your service. A runtime service with the same hostname must exist in Zerops.
Zerops supports the definition of multiple runtime services in a single `zerops.yaml`. This is useful when you use a monorepo. Just add multiple setup elements in your `zerops.yaml`:

```yaml
zerops:
  # definition for app service
  - setup: app
    build: ...
    run: ...

  # definition for api service
  - setup: api
    build: ...
    run: ...
```

Each service configuration contains at least two sections: **build** and **run**. Both sections are required to build and deploy your Deno application in Zerops. If you'd like to use a readiness check, add an optional **deploy** section.

## Build pipeline configuration

### base

_REQUIRED._ Sets the base technology for the build environment.

Following options are available for Deno builds:

<UnorderedCodeList data={data.deno.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: deno@latest
      ...
```

<p>
  The base build environment contains {data.alpine.default}, the selected
  major version of Deno, <a href="/references/cli">Zerops command line tool</a>, `npm`, `yarn`, `git` and `npx` tools.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the build environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base:
        - deno@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [build base environments](/zerops-yaml/base-list#runtime-services).

To customise your build environment use the [prepareCommands](/deno/how-to/build-pipeline#preparecommands) attribute.

:::note
Modifying the base technology will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for more details about cache invalidation.
:::

### os

_OPTIONAL._ Sets the operating system for the build environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customised.
:::

:::note
Changing the OS setting will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache behavior.
:::

### prepareCommands

_OPTIONAL._ Customises the build environment by installing additional dependencies or tools to the base build environment.

The base build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Deno defined in the [base](/deno/how-to/build-pipeline#base) attribute
- [Zerops command line tool](/references/cli)
- `npm`, `yarn`, `git` and `npx` tools

To install additional packages or tools add one or more prepare commands:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: deno@latest

      # OPTIONAL. Customise the build environment by installing additional packages
      # or tools to the base build environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first build is triggered, Zerops will

1. create a build container
2. download your application code from your repository
3. run the prepare commands in the defined order

The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).

:::note
These commands are skipped when using cached environment. Modifying `prepareCommands` will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache invalidation.
:::

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/deno/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all prepare commands are finished, your custom build environment is ready for the build phase.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### buildCommands

_REQUIRED._ Defines build commands.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: deno@latest

      # REQUIRED. Build your application
      buildCommands:
        - deno task build
      ...
```

At least one command is required. Zerops triggers each command in the defined order in a dedicated build container.

Before the build commands are triggered the build container contains:

1. base environment defined by the [base](/deno/how-to/build-pipeline#base) attribute
2. optional customisation of the base environment defined in the [prepareCommands](/deno/how-to/build-pipeline#preparecommands) attribute
3. your application code

#### Run build commands as a single shell instance

Use following syntax to run all commands in the same environment context. For example, if one command changes the current directory, the next command continues in that directory. When one command creates an environment variable, the next command can access it.

```yaml
buildCommands:
  - |
    deno test
    deno task build
```

#### Run build commands as a separate shell instances

When the following syntax is used, each command is triggered in a separate environment context. For example, each shell instance starts in the home directory again. When one command creates an environment variable, it won't be available for the next command.

```yaml
buildCommands:
  - deno task build
```

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/deno/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the --verbose option.

```yaml
buildCommands:
  - npm i --verbose
  - npm run build
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the deploy phase.

### deployFiles

_REQUIRED._ Selects which files or folders will be deployed after the build has successfully finished. To filter out specific files or folders, use <a href="#deployignore">`.deployignore`</a> file.

```yaml
# REQUIRED. Select which files / folders to deploy after
# the build has successfully finished
deployFiles:
  - dist
  - package.json
  - node_modules
```

Determines files or folders produced by your build, which should be deployed to your runtime service containers.

The path starts from the **root directory** of your project (the location of `zerops.yaml`). You must enclose the name in quotes if the folder or the file name contains a space.

The files/folders will be placed into `/var/www` folder in runtime, e.g. `./src/assets/fonts` would result in `/var/www/src/assets/fonts`.

#### Examples

Deploys a folder, and a file from the project root directory:

```yaml
deployFiles:
  - dist
  - package.json
```

Deploys the whole content of the build container:

```yaml
deployFiles: .
```

Deploys a folder, and a file in a defined path:

```yaml
deployFiles:
  - ./path/to/file.txt
  - ./path/to/dir/
```

#### How to use a wildcard in the path

Zerops supports the `~` character as a wildcard for one or more folders in the path.

Deploys all `file.txt` files that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/file.txt
```

Deploys all folders that are located in any path that begins with `/path/to/`

```yaml
deployFiles: ./path/to/~/
```

Deploys all folders that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/
```

:::note Example
By default, `./src/assets/fonts` deploys to `/var/www/src/assets/fonts`, keeping the full path. Adding `~`, like `./src/assets/~fonts`, shortens it to `/var/www/fonts`
:::
#### .deployignore

Add a `.deployignore` file to the root of your project to specify which files and folders Zerops should ignore during deploy. The syntax follows the same pattern format as <a href="https://git-scm.com/docs/gitignore#_pattern_format">`.gitignore`</a>.

To ignore a specific file or directory path, start the pattern with a forward slash (`/`). Without the leading slash, the pattern will match files with that name in any directory.

:::tip
For consistency, it's recommended to configure both your `.gitignore` and `.deployignore` files with the same patterns.
:::

Examples:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      deployFiles: ./
```

```text title=".deployignore"
/src/file.txt
```
The example above ignores `file.txt` only in the root src directory.
```text title=".deployignore"
src/file.txt
```
This example above ignores `file.txt` in ANY directory named `src`, such as:
- `/src/file.txt`
- `/folder2/folder3/src/file.txt`
- `/src/src/file.txt`

:::note
`.deployignore` file also works with <a href="/references/cli/commands#deploy">`zcli service deploy`</a> command.
:::

### cache

_OPTIONAL._ Defines which files or folders will be cached for the next build.

```yaml
# OPTIONAL. Which files / folders you want to cache for the next build.
# Next builds will be faster when the cache is used.
cache: file.txt
```

The cache attribute helps optimize build times by preserving specified files between builds.

The cache attribute supports the [~ wildcard character](#how-to-use-a-wildcard-in-the-path).

Learn more about the [build cache system](/features/build-cache) in Zerops.

### envVariables

_OPTIONAL._ Defines the environment variables for the build environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      base: deno@latest
        …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/deno/how-to/env-variables) in Zerops.

## Runtime configuration

### base

_OPTIONAL._ Sets the base technology for the runtime environment.
If you don't specify the `run.base` attribute, Zerops keeps the current Deno version for your runtime.

Following options are available for Deno builds:

<UnorderedCodeList data={data.deno.readable} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: deno@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
        base: deno@latest
      ...
```

<p>
  The base runtime environment contains {data.alpine.default}, the
  selected major version of Deno, Zerops command line tool, `npm`, `yarn`, `git` and `npx` tools.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the runtime environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: deno@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base:
        - deno@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [run base environments](/zerops-yaml/base-list).

To customise your build environment use the `prepareCommands` attribute.

### os

_OPTIONAL._ Sets the operating system for the runtime environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customised.
:::

### ports

_OPTIONAL._ Specifies one or more internal ports on which your application will listen.

Projects in Zerops represent a group of one or more services. Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its internal port.

For example, to connect to a Deno service with hostname = "app" and port = 3000 from another service of the same project, simply use `app:3000`. Read more about [how to access a Deno service](/deno/how-to/access).

Each port has following attributes:

| parameter   | description                                                                                                                                                                                                                                                                                                            |
| ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| port        | Defines the port number. You can set any port number between _10_ and _65435_. Ports outside this interval are reserved for internal Zerops systems.                                                                                                                                                                   |
| protocol    | **Optional.** Defines the protocol. Allowed values are `TCP` or `UDP`. Default value is `TCP`.                                                                                                                                                                                                                         |
| httpSupport | **Optional.** `httpSupport = true` is the default setting for TCP protocol. Set `httpSupport = false` if a web server isn't running on the port. Zerops uses this information for the configuration of [public access](/features/access). `httpSupport = true` is available only in combination with the TCP protocol. |

### prepareCommands

_OPTIONAL._ Customises the Deno runtime environment by installing additional dependencies or tools to the runtime base environment.

<p>
  The base Deno environment contains {data.alpine.default} the selected
  major version of Deno, <a href="/references/cli">Zerops command line tool</a> and `npm`, `yarn`, `git` and `npx` tools. To install
  additional packages or tools add one or more prepare commands:
</p>

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Deno runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first deploy with a defined prepare attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/deno/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `prepareCommands` commands in the defined order

#### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/deno/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

#### Cache of your custom runtime environment

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the [build.addToRunPrepare](#copy-folders-or-files-from-your-build-container) and `run.prepareCommands` attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the custom runtime cache go to `yyy`

{/*TODO screenshot*/}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### Copy folders or files from your build container

<p>
  The prepare runtime container contains {data.alpine.default}, the
  selected major version of Deno, <a href="/references/cli">Zerops command line tool</a> and `npm`, `yarn`, `git` and `npx` tools.
</p>

The prepare runtime container does not contain your application code nor the built application. If you need to copy some folders or files from the build container to the runtime container (e.g. a configuration file) use the `addToRunPrepare` attribute in the [build section](#build-pipeline-configuration).

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...
      addToRunPrepare: ./runtime-config.yaml

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Deno runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

In the example above Zerops will copy the `runtime-config.yaml` file from your build container **after the build has finished** into the new **prepare runtime** container. The copied files and folders will be available in the `xxx` folder in the new prepare runtime container before the prepare commands are triggered.

### initCommands

_OPTIONAL._ Defines one or more commands to be run each time a new runtime container is started or a container is restarted.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Deno application is started.
      initCommands:
        - rm -rf ./cache
```

These commands are triggered in the runtime container before your Deno application is started via the [start command](/deno/how-to/build-pipeline#start).

Use init commands to clean or initialise your application cache or similar operations.

:::caution
The init commands will delay the start of your application each time a new runtime container is started (including the [horizontal scaling](/deno/how-to/scaling#horizontal-auto-scaling) or when a runtime container is restarted).

Do not use the init commands for customising your runtime environment. Use the [run:prepareCommands](/deno/how-to/build-pipeline#preparecommands-1) attribute instead.
:::

#### Command exit code

If any of the `initCommands` fails, it returns an exit code other than 0, but deploy is **not** canceled. After all init commands are finished, regardless of the status code, the application is started. Read the [runtime log](/deno/how-to/logs#runtime-log) to troubleshoot the error.

#### Single or separated shell instances

You can configure your `initCommands` to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### envVariables

_OPTIONAL._ Defines the environment variables for the runtime environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to run your application ====
    run:
      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/deno/how-to/env-variables) in Zerops.

### start

_REQUIRED._ Defines the start command for your Deno application.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Deno application start command
      start: deno task start
```

We recommend starting your Deno application using `deno task start`.

### health check

_OPTIONAL._ Defines a health check.

`healthCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the health check to request a local URL using a HTTP GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Deno application start command
      start: deno task start

      # OPTIONAL. Define a health check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      healthCheck:
        httpGet:
          port: 80
          path: /status
```

Read more about how the [health check works] in Zerops.

#### exec

Configures the health check to run a local command.
Following attributes are available:

| Parameter   | Description                                                                                                                                                                                                                                                                                                                     |
| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **command** | Defines a local command to be run.<br/>The command has access to the same [environment variables](/deno/how-to/create#set-secret-environment-variables) as your Deno application.<br/>A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below. |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Deno application start command
      start: deno task start

      # OPTIONAL. Define a health check with a shell command.
      healthCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [health check works] in Zerops.

### crontab

_OPTIONAL._ Defines cron jobs.

Setup cron jobs in the following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app

    # ==== how to run your application ====
    run:
      crontab:
        # REQUIRED. Sets the command to execute:
        - command: ""
        # REQUIRED. Sets the interval time to execute:
          timing: "0 * * * *"
```

Read more about setting up [cron](/references/cron) in Zerops.

## Deploy configuration

### readiness check

_OPTIONAL._ Defines a readiness check. Read more about how the [readiness check works](/deno/how-to/deploy-process#readiness-checks) in Zerops.

`readinessCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the readiness check to request a local URL using a http GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        httpGet:
          port: 80
          path: /status

    # ==== how to run your application ====
    run: ...
```

Read more about how the [readiness check works](/deno/how-to/deploy-process#readiness-checks) in Zerops.

#### exec

Configures the readiness check to run a local command.
Following attributes are available:

| Parameter   | Description                                                                                                                                                                                                                                                                                                                     |
| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **command** | Defines a local command to be run.<br/>The command has access to the same [environment variables](/deno/how-to/create#set-secret-environment-variables) as your Deno application.<br/>A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below. |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [readiness check works](/deno/how-to/deploy-process#readiness-checks) in Zerops.




<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Description of the build process

Zerops starts a temporary build container and performs following actions:

1. Installs the build environment:
   - Sets up base system and Go runtime
   - Restores cached files if available (based on `build.cache` configuration)
   - Validates cache against current `build.os`, `build.base`, and `build.prepareCommands`
2. Downloads your application source code from [GitHub ↗](https://www.github.com), [GitLab ↗](https://www.gitlab.com) or via [Zerops CLI](/references/cli)
3. Optionally [customizes the build environment](#customize-deno-build-environment)
4. Runs the build commands
5. Uploads the application artefact to the internal Zerops storage
6. Preserves specified files for future builds (based on `build.cache` configuration)
7. Optionally [customizes the runtime environment](/deno/how-to/customize-runtime)
8. [Deploys your application](/deno/how-to/deploy-process)

The build container is automatically deleted after the build has finished or failed.

## Cancel running build

When you know that the running build is not correct and you want to cancel it, you can do it in Zerops GUI. Go to the service detail, open the list of running processes and click on the **Open pipeline detail** button. Then click on the **Cancel build** button.

<p align="center">
  <img
    src="/img/screenshots/cancel_running_build.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

:::caution
The build cancellation is available before the build pipeline is finished. When the build is finished, the deployment cannot be cancelled.
:::

## Customize Deno build environment

The default Deno build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Deno defined in `zerops.yaml` [build.base](/deno/how-to/build-pipeline#base) parameter
- [zCLI](/references/cli), Zerops command line tool
- `npm`, `yarn`, `git` and `npx` tools

If you prefer the Ubuntu OS instead of Alpine, set the [build.os](/deno/how-to/build-pipeline#os) attribute to `ubuntu`. To install additional packages or tools add one or more [build.prepareCommands](/deno/how-to/build-pipeline#preparecommands) commands to your `zerops.yaml`.

:::info
The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).
:::

## Deno build hardware resources

Build of your Deno application is run in a separate build container with following resource configuration:

| HW resource   | Minimum | Maximum |
| ------------- | ------- | ------- |
| **CPU cores** | 6       | 20      |
| **RAM**       | 8 GB    | 8 GB    |
| **Disk**      | 1 GB    | 100 GB  |

The build container is always started with the minimum hardware resources and scales vertically up to the maximum resources.

:::info
Hardware resources of the build containers are not charged. The build costs are covered by the standard Zerops [project fee](https://zerops.io/#pricing).
:::

## Build time limit

The time limit for the whole build pipeline is **1 hour**. After 1 hour, Zerops will terminate the build pipeline and delete the build container.

## Troubleshooting build-related problems

### Failure of a build prepare command

If any [prepare command](/deno/how-to/build-pipeline#preparecommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/deno/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom build environment is ready for the build phase.

### Invalidate the build cache
If you encounter unexpected build behavior or dependency issues, the problem might be related to [cached build data](/features/build-cache). While Zerops maintains the build cache to speed up deployments, sometimes you may need to start fresh.
To invalidate the build cache:

1. Go to your service detail in Zerops GUI
2. Choose **Pipelines & CI/CD Settings** from the left menu
3. Click on the **Invalidate build cache** button

This will force Zerops to run the next build clean, including all prepare commands, which can help resolve cache-related issues. After invalidation, your next build will also create a fresh cache.

### Failure of a build command

If any [build command](/deno/how-to/build-pipeline#buildcommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/deno/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the `--verbose` option.

```yaml
buildCommands:
  - npm i --verbose
  - npm run build
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the [deploy](/deno/how-to/deploy-process) phase.



Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart Deno service in Zerops GUI

To stop the Deno service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)**/}
To start the stopped Deno service choose the **Start** item from the same menu.

To restart the Deno service choose the **Restart** item from the same menu.

## Stop and start Deno using zCLI

zCLI is the Zerops command-line tool. To stop and start the Deno service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and services to choose from.
:::




Zerops provides a powerful Deno runtime service with extensive build support. The Deno runtime is highly scalable and customizable to suit your development and production needs. With just a few clicks or commands, you can have a production-ready Deno environment up and running in no time.

## Create a Deno service using Zerops GUI

First, set up a project in the Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu under the **Services** section. From there, you can add a new Deno service:

<Video
  src="/vids/services/deno.webm"
  type="video/webm"
/>

### Choose a Deno version

Zerops supports the following Deno versions:

<UnorderedList data={data.deno.readable} />

:::info
You can easily [upgrade](/deno/how-to/upgrade) the major version at any time later.
:::

### Set a hostname

Enter a unique service identifier like "app", "cache", "gui", etc. Duplicate services with the same name within the same project are not allowed.

#### Limitations:

- Maximum 25 characters
- Must contain only lowercase ASCII letters (a-z) or numbers (0-9)

:::caution
The hostname is fixed after the service is created and cannot be changed later.
:::

### Set secret environment variables

Add environment variables with sensitive data, such as passwords, tokens, salts, certificates, etc. These will be securely saved inside Zerops and added to your runtime service upon start.

Setting secret environment variables is optional. You can always set them later in the Zerops GUI.

Read more about the [different types of environment variables](/deno/how-to/env-variables#types-of-env-variables-in-zerops) in Zerops.

### Configure auto scaling

Zerops automatically scales Deno services both vertically and horizontally. Vertical scaling adjusts the hardware resources (CPU, RAM, and disk) of a Deno container, while horizontal scaling adds or removes entire containers.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. The power your application receives depends on the other applications running on the same CPU core. In the best-case scenario, your application gets 10/10 of the CPU core power, and 1/10 in the worst-case scenario.

**Dedicated**
The CPU core is dedicated exclusively to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

You can choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto scaling

Vertical auto scaling has the following default configuration:

<ResourceTable />

Deno services always start with the minimal resources.

In most cases, the default parameters will work without issues. If you need to limit the cost of the Deno service, you can lower the maximum resources. Zerops will never scale above the selected maximums.

If you experience insufficient Deno performance or capacity, you can increase the minimum resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine-tune](/deno/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application's needs.
:::

:::info
You can change the vertical auto scaling parameters at any time.
:::

#### Horizontal auto scaling

When a container needs more CPU or RAM but is already consuming the maximum resources defined for vertical auto scaling, Zerops will add a new container to your Deno service. When your Deno service doesn't need as much power and all containers are vertically scaled down such that their CPU allocation is near the minimum resources, Zerops will gradually remove entire containers.

Horizontal auto scaling has the following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>Minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>Maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Deno services always start with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

[Learn more](/deno/how-to/scaling) about Deno auto scaling in Zerops.

#### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will automatically start a new container and deploy your application. However, the application will be unavailable for a short period. This mode is recommended for non-critical applications or development environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers based on your application's load. An application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed down to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents temporary outages in case any of the Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically, and the broken container will be deleted.

:::caution
Make sure your application is designed to run in multiple containers.
:::

## Create a Deno service using zCLI

zCLI is the Zerops command-line tool. To create a new Deno service via the command line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/deno/how-to/create#create-a-project-description-file)
3. [Create a project with a Deno and PostgreSQL service](#full-example)

### Create a project description file

Zerops uses a YAML format to describe the project infrastructure.

#### Basic example:

Create a directory called `my-project`. Inside the `my-project` directory, create a `description.yaml` file with the following content:
```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in deno@{version} format
    type: deno@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes your future project infrastructure. The project will contain one Deno version 20 service with default [auto scaling](/deno/how-to/scaling) configuration. Hostname will be set to "app", the internal port(s) the service listens on will be defined later in the [zerops.yaml](/deno/how-to/build-pipeline#ports). Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

#### Full example:

Create a directory my-project. Create an description.yaml file inside the my-project directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a Deno and PostgreSQL database
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in deno@{version} format
    type: deno@latest
    # optional: vertical auto scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
  - # second service hostname
    hostname: db
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"non_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain a Deno service and a [PostgreSQL](/postgresql/overview) service.

Deno service with "app" hostname, the internal port(s) the service listens on will be defined later in the [zerops.yaml](/deno/how-to/build-pipeline#ports). Deno service will run on version 20 with a custom vertical and horizontal scaling. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The hostname of the PostgreSQL service will be set to "db". The [single container](/postgresql/how-to/create#single-container) mode will be chosen and the default [auto scaling configuration](/postgresql/how-to/create#set-auto-scaling-configuration) will be set.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

| Parameter       | Description                                                                                                                     | Limitations             |
| --------------- | ------------------------------------------------------------------------------------------------------------------------------- | ----------------------- |
| **name**        | The name of the new project. Duplicates are allowed.                                                                            |                         |
| **description** | **Optional.** Description of the new project.                                                                                   | Maximum 255 characters. |
| **tags**        | **Optional.** One or more string tags. Tags do not have a functional meaning, they only provide better orientation in projects. |

At least one service in `services:` section is required. You can create a project with multiple services. The example above contains Deno and PostgreSQL services but you can create a `description.yaml` with your own combination of [services](/features/infrastructure).

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit">Parameter</th>
      <th className="w-fit">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">
        <b>hostname</b>
      </td>
      <td className="w-fit">
        The unique service identifier.
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>type</b>
      </td>
      <td className="w-fit">
        Specifies the service type and version.
        <br />
        See what [Deno service types](/references/import-yaml/type-list#runtime-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>verticalAutoscaling</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Defines <a href="/deno/how-to/create#set-auto-scaling-configuration">custom vertical auto scaling parameters</a>.<br />
        All verticalAutoscaling attributes are optional. Not specified
        attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - cpuMode</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minCpu/maxCpu</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minCpu or maxCpu in CPU cores (integer).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minRam/maxRam</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minRam or maxRam in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minDisk/maxDisk</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minDisk or maxDisk in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>minContainers</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Default = 1. Defines the minimum number of containers
        for <a href="/deno/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.<br />
        <br />
        <b>Limitations:</b>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maxContainers</b>
      </td>
      <td className="w-fit">
        Defines the maximum number of containers for <a href="/deno/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.<br />
        <br />
        <b>Limitations:</b>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>envSecrets</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Defines one or more secret env variables as a key value
        map. See env variable <a href="/deno/how-to/env-variables#env-variable-restrictions">restrictions</a>.
      </td>
    </tr>
  </tbody>
</table>

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>
### Add Deno service to an existing project

#### Example:

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in deno@{version} format
    type: deno@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one Deno service version 20 with default [auto scaling](/deno/how-to/scaling) configuration will be added to your project. Hostname of the new service will be set to `app`. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The content of the `services:` section of `import.yaml` is identical to the project description file. The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the import.yaml file is 100 kB.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline_custom_runtime.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>


The default Deno runtime environment contains:

- <span>{data.alpine.default}</span>
- selected version of Deno selected when the runtime service was created.
- <a href="/references/cli">
    `zCLI`
  </a>
  , Zerops command line tool
- `npm`, `yarn`, `git` and `npx` tools

If you prefer the Ubuntu OS instead of Alpine, set the [build.os](/deno/how-to/build-pipeline#os) attribute to `ubuntu`. To install additional packages or tools add one or more <a href="/deno/how-to/build-pipeline#preparecommands-1">`run.prepareCommands`</a> commands to your `zerops.yaml`.

When the first deploy with a defined `prepareCommands` attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/deno/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `run.prepareCommands` commands in the defined order

### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/deno/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

The prepare runtime container is automatically deleted after the prepare runtime phase has finished or failed.

### Custom runtime environment cache

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the <a href="/deno/how-to/build-pipeline#copy-folders-or-files-from-your-build-container">`build.addToRunPrepare`</a> and <a href="/deno/how-to/build-pipeline#preparecommands-1">`run.prepareCommands`</a> attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the custom runtime cache go to `yyy`

{/*TODO screenshot*/}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.



## Delete Deno service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete Deno using zCLI

zCLI is the Zerops command-line tool. To delete the Deno service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step3.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Application artefact

When the [build phase](/deno/how-to/build-process) is finished, the application artefact is stored in the internal Zerops storage and the build container is deleted.

If you triggered the deploy pipeline [manually](/deno/how-to/trigger-pipeline#manual-deploy-using-zerops-cli) using Zerops CLI, the application artefact is also uploaded to the internal Zerops storage.

Zerops uses the stored artefact to deploy the identical version of your application each time a new container is started:

- when a new application version is deployed
- when the application [scales horizontally](/deno/how-to/create#horizontal-auto-scaling)
- when a runtime container fails and a new container is started automatically

## First deploy

When your application is deployed for the first time, Zerops will start one or more runtime containers based on the service [auto scaling settings](/deno/how-to/scaling).

Zerops performs following actions for each new container:

1. Installs the runtime environment
2. Downloads the application artefact from the internal storage
3. Optionally runs the [init commands](/deno/how-to/build-pipeline#initcommands)
4. Starts your application using the [start command](/deno/how-to/build-pipeline#start)
5. Optionally waits until the [readiness check](/deno/how-to/build-pipeline#readiness-check) succeeds
6. The container is now active and receives incoming requests.

Services with multiple containers are deployed in parallel.

:::info
If your application needs to be initialized in each runtime container, add [init commands](/deno/how-to/build-pipeline#initcommands) to `zerops.yaml`.
:::

:::caution
Do not use the `initCommands` for customising your runtime environment. See [how to customise the runtime environment](/deno/how-to/build-pipeline#preparecommands-1).
:::

## Further deploys

When a previous version of your application is already running, Zerops will start new containers. The count of new containers will be the same as the count of existing containers.

Zerops performs the identical actions for each new container as the first deployment.
When all new containers are started your service contains both new and old versions for a short period of time.

The old containers are then removed from the project balancer so they don't receive new requests. The Deno process inside each of the old containers is terminated and all old containers are gradually deleted.

## Readiness checks

If your application isn't ready to handle requests right after it is started via the [start command](/deno/how-to/build-pipeline#start), configure a [readiness check](/deno/how-to/build-pipeline#readiness-check) in your `zerops.yaml`.

If the readiness check is defined, Zerops will:

1. Start your application
2. Perform a readiness check
3. If the readiness check fails, wait 5 seconds and repeat step 2.
4. If the readiness check succeeds, set the container as active.

Application in the runtime container with a pending readiness check won't receive any incoming requests. Only active containers receive incoming requests to your Deno service.

If the readiness check is still failing after 5 minutes, the specific runtime container is marked as failed and Zerops will delete it, create a new runtime container and perform the deploy.

The <a href="/deno/how-to/build-pipeline#httpget">`httpGet`</a> readiness check is successful when the URL returns HTTP status code `2xx`. The timeout is 5 seconds. When the URL returns a `3xx` HTTP status, the readiness check HTTP client will follow the redirect.

The <a href="/deno/how-to/build-pipeline#exec">`exec.command`</a> readiness check is successful when the command returns status code 0. The timeout is 5 seconds.

Read the [runtime log](/deno/how-to/logs#runtime-log) to troubleshoot failed readiness checks.

## Application versions

Zerops keeps 10 last versions of your application in the internal storage.

The list of application versions is available in Zerops GUI. Go to the service detail and choose **Service dashboard & runtime containers** from the left menu. The active version is highlighted, show all archived version by clicking on the button below.

<p align="center">
  <img
    src="/img/screenshots/pipeline_history.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

The pipeline detail is accessible from the additional menu. The pipeline detail contains

- The pipeline config (`zerops.yaml`) that was used for the selected version
- The build log (if available)
- The prepare runtime log (if available)

You can download the build artefact of the selected version or delete an inactive version manually.

## Restore an archived version

You can restore an archived version by choosing the **Activate** item from the additional menu.
Zerops will deploy the selected version and the active version will be archived.

The environment variables will be restored to the latest moment when the selected version was active.



Environment variables help you run your application in different environments. They allow you to isolate all specific environment aspects from your application code and keep your app encapsulated. You can create several projects in Zerops that represent different environments (development, stage, production) or even each developer can have a project with its own environment.

In Zerops you do not have to create a `.env` file manually. Zerops handles the environment variables for you.

## Types of env variables in Zerops

There are 3 different sets of env variables in Zerops:

| environment | type   | defined in                                                                        |
| ----------- | ------ | --------------------------------------------------------------------------------- |
| build       | basic  | [zerops.yaml](/deno/how-to/build-pipeline#envvariables)                          |
| runtime     | basic  | [zerops.yaml](/deno/how-to/build-pipeline#envvariables-1)                        |
| runtime     | secret | [Zerops GUI](#set-secret-env-variables-in-zerops-gui) |

Use the [secret env variables](/deno/how-to/create#set-secret-environment-variables) for all sensitive data you don't want to store in your application code. Secret env variables are also useful if you need for testing where you need to change the value of some env variables frequently. Secret variables are managed in Zerops GUI and you don't have to redeploy your application.

The basic build and runtime env variables are listed in your [zerops.yaml](/zerops-yaml/specification) and deployed together with your application code. When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your zerops.yaml and redeploy your application to Zerops.

You can [reference](/deno/how-to/env-variables#reference-a-local-variable-in-another-variable-value) another variable of the same service or even a variable of [another service](/deno/how-to/env-variables#reference-a-variable-of-another-project-service) within the same project.

## Set secret env variables in Zerops GUI

Use secret variables to store passwords, tokens and other sensitive information that shouldn't be part of your repository and listed in zerops.yaml.

<p align="center">
  <img
    src="/img/screenshots/runtime_secret_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

You can set env variables when you [create](/deno/how-to/create) a new Deno service or you can set them later.

To configure env variables for an existing service, go to the service detail and choose **Environment variables** in the left menu. Scroll to the **Secret variables** section and click on the **Add secret variable** button and set variable key and value.

You can edit or delete env variables that you've created by clicking on the menu on the right side of each row.

The changes you've made to environment variables will be automatically applied to all containers of your project's services.

:::caution
You need to **restart** the runtime service after you update environment variables. The Deno process running in the container receives the list env variables only when it starts. Update of the env variables while the Deno process is running does not affect your application.
:::

## Set basic build env variables in zerops.yaml

To set basic env variables for the build environment, add the `envVariables` attribute to the build section in your `zerops.yaml`

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
       …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Set basic runtime env variables in zerops.yaml

To set basic env variables for the runtime environment, add the `envVariables` attribute to the runtime section in your `zerops.yaml`.

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    run:
       …

      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Env variable restrictions

**key**

- must satisfy the following regular expression: `[a-zA-Z_]+[a-zA-Z0-9_]*`
- all variable keys in the same service must be unique regardless of case
- keys are case sensitive

**value**

- must contain only ASCII characters
- the _End of Line_ character is forbidden

These restrictions apply to all [types of env variables](/deno/how-to/env-variables#types-of-env-variables-in-zerops).

## Referencing other env variables

You can reference another variable of the same service using `${key}` in your variable value. You can even reference a variable from a different service using `${hostname_key}`. The referenced variable doesn't need to exist when you are entering your variable.

### Reference a local variable in another variable value

| Variable key | Variable value      | Computed variable value |
| ------------ | ------------------- | ----------------------- |
| id           | 12345               | 12345                   |
| hostname     | app                 | app                     |
| name         | `${id}-${hostname}` | 12345-app               |

### Reference a variable of another project service

Let's say your project contains two PostgreSQL services `dbtest` and `dbprod`. Both services have a `connectionString` variable. Then you can create a `dbConnectionString` env variable in your Deno runtime and set `${dbtest_connectionString}` as the variable value. Zerops will fill in the value of the `connectionString` variable of the `dbtest` service.

When you change the `dbConnectionString` value to `${dbprod_connectionString}`, Zerops will fill in the value of the `connectionString` variable of the `dbprod` service.

:::caution
When you change the value of the `connectionString` variable in the service `dbtest` you need to **restart** the Deno service. The Deno process running in the container receives the list env variables only when it starts. Update of the env variables while the Deno process is running does not affect your application.
:::

## Generated env variables

Zerops creates several helper variables when a Deno service is created, e.g. `hostname`, `PATH`. Some helper variables are read-only (`hostname`), others are editable (`PATH`). Generated variables cannot be deleted.

Generated env variables are listed on the **Environment variables** page. Scroll to the **Generated variables** section.

{/* TODO screenshot of the generated env variables of the respective runtime*/}

<p align="center">
  <img
    src="/img/screenshots/nodejs_generated_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## How to read env variables from your Deno app

Zerops passes all environment variables from all project services when your Deno app is deployed and started.

To access the local environment variable i.e. the variable set to this Deno service in your app, use:

```sh
process.env.YOUR_VARIABLE_KEY_HERE
```

## How to read env variables of another service

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Examples:

To access the `connectionString` env variable of the `mariadb1` service, use `mariadb1_connectionString` as the env variable key.
To access the `password` env variable of the `mariadb2` service, use `mariadb2_password` as the env variable key.

## How to read runtime env variables in the build environment

You can use runtime env variables in the build environment using the `RUNTIME_` prefix. For example if you have a runtime variable with the `connectionString` key, use the `RUNTIME_connectionString` to read the variable in the build environment. This rule applies both for basic and secret runtime variables.

## Basic and secret env variable with the same key

If you create a secret env variable and a basic runtime env variable with the same key, Zerops saves the basic runtime env variable from your zerops.yaml and ignores the secret env variable.

If you create a basic build env variable and a runtime env variable with the same key, Zerops saves both because the build and runtime environments have separate sets of env variables.



## Zerops GUI

In Zerops GUI, go to the service detail page and choose **Service containers & resources overview** and scroll down to the list of containers.

<p align="center">
  <img
    src="/img/screenshots/nodejs_containers_list.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Then click on the file browser icon and the file browser opens:

<p align="center">
  <img
    src="/img/screenshots/nodejs_file_browser.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

If your service is in the [HA mode], you can switch between containers in the top left corner.

## zCLI & SSH

You can connect to the container via SSH with the Zerops CLI and browse its files.
How to [connect to your service via SSH](/references/ssh).



Zerops provides 3 different logs:

- [build log](#build-log)
- [prepare runtime log](#prepare-runtime-log)
- [runtime log](#runtime-log)

## How to access logs

### Build log

#### Zerops GUI

To access a build log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Build log**. The build log button is available only if the [build pipeline](/deno/how-to/trigger-pipeline) was triggered for the selected deploy.

#### zCLI

To access a build log in Zerops CLI use

```sh
zcli service log --showBuildLogs
```

Read more about the [zcli service log](/references/cli/access-logs) command.

### Prepare runtime log

#### Zerops GUI

To access a prepare runtime log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Prepare runtime log**. The prepare runtime log button is available only if the [prepare runtime pipeline](/deno/how-to/build-pipeline#preparecommands-1) was triggered for the selected deploy.

#### zCLI

_Prepare runtime log is currently not supported in zCLI._

### Runtime log

#### Zerops GUI

To access a runtime log in Zerops GUI, go to the service detail and choose **Runtime log** in the left menu.

<p align="center">
  <img
    src="/img/screenshots/deno_runtime_log.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Each runtime container has its own log. If your service has multiple containers, select the container in the log header.

You can filter log records by minimum severity or by time.

#### zCLI

To access the log of the runtime containers in Zerops CLI use

```sh
zcli service log
```

Read more about the [zcli service log](/references/cli/access-logs) command.

## Deno logging configuration

Zerops logs all messages sent

- to the standard error (`stderr`)
- to the standard output (`stdout`)
- via the Deno `console.log` method

### Severity level

By default the `console.log` creates a message with the `Informational (6)` severity.

Add a severity number in the `<N>` format as a prefix to set a custom severity as shown below:

```js
console.log('A message with the informational severity ...');
console.log('<0>Emergency (0) severity > system is unusable.');
console.log('<1>Alert (1) severity > action must be taken immediately.');
console.log('<2>Critical (2) severity > critical conditions.');
console.log('<3>Error (3) severity > error conditions.');
console.log('<4>Warning (4) severity > warning conditions.');
console.log('<5>Notice (5) severity > normal, but significant, condition.');
console.log('<6>Informational (6) severity > informational message.');
console.log('<7>Debug (7) severity > debug-level message.');
```

:::info

`console.info`, `console.warn`, `console.debug`
, and `console.error` are just aliases to the `
  console.log
` method. They don't set the appropriate severity number. Use the `
  &lt;N&gt;
` prefix instead. :::




Zerops performs an automated scaling of hardware resources required to run your runtime application based on its usage. If the current use of your application does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your application is under heavy load or needs to store more data, then auto scaling increases the resources to make sure it runs smoothly.

## Vertical and horizontal auto scaling

Each application you deploy starts with the minimum hardware resources: **CPU** cores, **RAM** and **Disk**. Zerops monitors the usage of these 3 resources and if the usage exceeds a set threshold, more CPU cores, RAM or Disk is allocated to the service. This is called **vertical scaling**.

<p align="center">
  <Image
    lightImage="/img/gui/resources.webp"
    darkImage="/img/gui/resources.webp"
    alt="Resources of a Zerops service"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

**Horizontal scaling** adds or removes whole containers.

Zerops has a preference for vertical scaling because it's faster and more precise. If the vertical auto scaling hits the defined maximum a new container is started automatically. When your application doesn't need so much power and all containers are vertically scaled down, Zerops will gradually remove whole containers.

<p align="center">
  <img
    src="/img/screenshots/scaling2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Configure auto scaling

To change the auto scaling settings go to the Deno service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### CPU mode

#### Shared

Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

#### Dedicated

The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

Deno service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Deno service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Deno performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Deno service. When your Deno service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Deno service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your application starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your application.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your application doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

By default Zerops keeps a minimum free RAM in each container. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your application need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 0.125 GB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the application is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each Deno service. Zerops will never scale above the entered values. If your application is in [highly available mode], maximal resources are identical for all containers of the Deno service.

### Not enough resources to scale up

If one of the Deno containers needs more resources but there are not enough of them on the underlying machine, a new container with the required hardware resources will be started on another machine. When the new container is ready, it will be added to the service balancer. The old container will be removed from the balancer and deleted.

### Automatic scale down

When the application no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the application from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal autoscaling

Zerops prefers vertical scaling over horizontal scaling because vertical scaling is faster and allows finer adjustment to the required performance. Horizontal scaling can be disabled by setting the same number for the minimum and maximum container count. Zerops will then scale the Deno service only vertically.

Your application is created with the defined minimum number of containers. Zerops will add a new container when any of the service's containers reaches the maximum limit for vertical scaling for CPU cores or RAM. Zerops doesn't start a new container when the maximum disk space is reached. No more containers are added when the defined maximum container limit is reached.

The new container is started with a minimum disk size and with an average CPU cores and RAM of the existing containers.

By customising the vertical auto scaling limits, you can cause the horizontal scaling to start earlier. For example if you lower the vertical auto scaling maximum to 1 CPU core, Zerops will start a new container if some of the running containers are using the whole CPU core for more than 20 seconds.

If the application no longer needs as much power, Zerops will gradually remove containers to the defined minimum count. The container is removed after its CPU cores are scaled down to the defined minimum and the free CPU is safely above the minimum threshold for vertical scaling. Zerops only **removes containers** with a minimum **15 minute lifetime**.

## Monitor Deno resources

Zerops provides information about how much hardware resources the Deno service is currently using. Go to the service detail in Zerops GUI and select **Service dashboard & runtime containers** in the left menu. Zerops also provides the history of resource usage.



Zerops provides [shared storage service](/shared-storage/overview) that can be connected to runtime services. Shared storage enables your runtime service to share files between all containers of the same service or even among containers of different runtime services.

## Connect a shared storage in Zerops GUI

Connect your Deno service directly when creating a new shared storage service. Just select your Deno service in the **Share with Services** block on the **Add new shared storage service** page.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_1.png)

To connect the existing shared storage to the Deno service, go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Select a runtime service and the shared storage will be connected to the selected runtime.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_2.png)

Zerops will create a new folder `/mnt/[shared storage name]`` in the runtime root folder. E.g. `/mnt/teststorage`for a`teststorage` shared storage. The content of this folder is shared among all containers of the runtime service you've selected. If you select multiple runtimes, the content of the folder will be shared among all containers of selected services.

## Disconnect a shared storage in Zerops GUI

Go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Switch off the toggle to disconnect the shared storage from the selected runtime.

:::note
Your runtime service will be automatically restarted when a shared storage is disconnected.
:::

## Create Deno service with a shared storage using zCLI

zCLI is the Zerops command-line tool. To create a new Deno service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/deno/how-to/shared-storage#create-a-project-description-file)
3. [Create a project with a Deno service and a shared storage](/deno/how-to/shared-storage#create-a-project-with-a-deno-service-and-a-shared-storage)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### description.yaml format

[Read the basics](/deno/how-to/create#create-a-project-description-file) how to define the Deno service using the description.yaml.

#### Example with a shared storage

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project

  # optional: project description
  description: A project with a Deno and a shared storage

  # optional: project tags
  tags:
    - DEMO
    - ZEROPS

# array of project services
services:
  - # service name
    hostname: teststorage

    # shared storage service has no version
    type: shared-storage

    # mode: HA / NON_HA
    mode: NON_HA

  - # service name
    hostname: app

    # service type and version number in deno@{version} format
    type: deno@latest

    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2

    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4

    # Mount the shared storage to the Deno service
    mount:
      - teststorage
```

The mount attribute accepts an array of shared storage names you want to mount to your runtime service.

### Create a project with a Deno service and a shared storage

Follow the article [How to create a project based on the description.yaml](/deno/how-to/create#create-a-project-based-on-the-descriptionyaml).




<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-1.webp"
    darkImage="/img/mind-maps/build-deploy/step-1-dark.webp"
    alt="build deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Automatic builds and deploys from GitHub or GitLab

Integrate Zerops to your GitHub or GitLab repository and configure the automatic builds and deploys.

Follow these steps:

1. Add [zerops.yaml](/deno/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository.
2. Connect your GitHub repository or connect your GitLab repository

Then each time you create a new tag or push to a specific branch, depending on the configuration, GitHub or GitLab will initiate a new build & deploy pipeline.

<p align="center">
  <Image
    lightImage="/img/gui/github-integration.webp"
    darkImage="/img/gui/github-integration.webp"
    alt="github integration"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

### Skip the automatic pipeline once

To ensure that a pipeline is not triggered by your next push, add `[ci skip]` or `[skip ci]` to the commit message. It is case insensitive.

:::note
You will still see a successful delivery of a webhook in your Github/Gitlab repository as a webhook is actually triggered, but with no action.
:::

## Manual builds and deploys using Zerops CLI

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    darkImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    alt="Manual Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

To start a new build & deploy pipeline manually, use the Zerops CLI.

Follow these steps:

1. Add <a href="/deno/how-to/build-pipeline#add-zeropsyaml-to-your-repository">`zerops.yaml`</a> to your repository.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli push` command.

The `zcli push` command uploads your application code, builds and deploys your application in Zerops.

The command triggers the [build pipeline](/deno/how-to/trigger-pipeline) defined in `zerops.yaml`. `zerops.yaml` must be in the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

zCLI uploads all files and subdirectories of the working directory to Zerops and starts the build pipeline. If the `.gitignore` file is found, it is interpreted and the defined files and folders will be ignored.

If you just want to deploy your application to Zerops, use the [zcli deploy](#manual-deploy-using-zerops-cli) command instead.

#### Push command parameters

```sh
Usage:
  zcli push [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.
  -h, --help                     the service push command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

zCLI commands are interactive, when you press enter after `zcli push`, you will be given a list of your projects to choose from.

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

## Manual deploy using Zerops CLI

To start only a deploy pipeline, use the Zerops CLI.

Follow these steps:

1. Add [zerops.yaml](/deno/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository. Omit the build section.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli service deploy` command.

The `zcli service deploy` command uploads your application and deploys it in Zerops. Use this tool if you have your own build process. If you want to build your application in Zerops, use an [automatic](#automatic-builds-and-deploys-from-github-or-gitlab) or [manual](#manual-builds-and-deploys-using-zerops-cli) build process.

#### Deploy command parameters

```sh
Usage:
  zcli service deploy pathToFileOrDir [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
  -h, --help                     the service deploy command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

`pathToFileOrDir` defines a path to one or more directories and/or files relative to the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

`zerops.yaml` must be placed in the working directory.

:::info
You can change the deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your working directory.
:::



You can upgrade or downgrade your Deno service to a different major Deno version by setting the <a href="/deno/how-to/build-pipeline#base-1">`run.base`</a> parameter in your `zerops.yaml`. When you [trigger a new pipeline](/deno/how-to/trigger-pipeline), Zerops will start new runtime container(s) with the required Deno version. If you don't specify the `run.base` attribute in your `zerops.yaml`, Zerops keeps the current Deno version for your runtime.

If you want to build your application with a different major Deno version, change the <a href="/deno/how-to/build-pipeline#base">`build.base`</a> parameter in your `zerops.yaml`. The `build.base` is the required attribute.




[Deno ↗](https://deno.org/en) is an asynchronous event-driven JavaScript runtime, which is designed to build scalable network applications.

:::tip
Have you got any additional question? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::


As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-deno), a **_recipe_**, containing the most simple Deno web application. The repo will be used as a source from which the app will be built.

<CustomCard title="No Fuss, Just Deploy with Speed!" emoji="🚀">
  This is the most bare-bones example of Deno app running on Zerops — as few libraries as possible,
  just a simple endpoint with connect, read and write to a Zerops PostgreSQL database.

  <DeployButton link="deno" badgeWidth="200" />
</CustomCard>

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)


2. In the **Projects** box click on **Import a project** and paste in the following YAML config ([source ↗](https://github.com/zeropsio/recipe-deno/blob/main/zerops-project-import.yaml)):

```yaml
project:
  name: recipe-deno
  tags:
    - zerops-recipe

services:
  - hostname: api
    type: deno@1
    buildFromGit: https://github.com/zeropsio/recipe-deno
    enableSubdomainAccess: true

  - hostname: db
    type: postgresql@16
    mode: NON_HA
    priority: 1
```

3. Click on **Import project** and wait until all pipelines have finished.

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://api-7f6-8000.prg1.zerops.app`.
2. Click or the `subdomain` URL to open it in a browser and you should see

```
{"message":"This is a simple, basic Deno / Oak application running on Zerops.io,\n      each request adds an entry to the PostgreSQL database and returns a count.\n      See the source repository (https://github.com/zeropsio/recipe-deno) for more information.","newEntry":"274b0cc1-5b6d-4351-b8ec-53cf82bd9d0f","count":1}
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::

## How to start

It doesn't matter whether it's your first curious introduction to Zerops, you have already mastered the basics and are looking for a tiny detail or inspiration. Below, choose a section that fits your needs:

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/deno/getting-started',
      label: 'New to Zerops?',
      customProps: {
        icon: Icons['rocket-launch'],
        description: 'There is no better way to start than to try it yourself.',
      },
    },
    {
      type: 'link',
      href: '/deno/how-to/create',
      label: 'Care for details?',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description:
          'Dive in all Zerops has to offer for your Deno application.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=deno&type=all&language=&sort=',
      label: 'Deno recipes',
      customProps: {
        icon: Icons['github'],
        description:
          'Get inspired by already existing repositories, ready to be imported to Zerops.',
      },
    },
  ]}
/>

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/deno/how-to/create',
      label: 'Create Deno service',
      customProps: {
        icon: Icons['deno'],
        description: 'Start with creating a Deno service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: '/deno/how-to/build-pipeline#add-zeropsyaml-to-your-repository',
      label: 'Zerops.yaml',
      customProps: {
        icon: Icons['puzzle'],
        description:
          'See a full example of zerops.yaml file to create your own app.',
      },
    },
    {
      type: 'link',
      href: '/deno/how-to/scaling',
      label: 'Scaling configuration',
      customProps: {
        icon: Icons['adjustments'],
        description:
          'Set up scaling of your Deno application so that it runs smoothly while using only necessary resources.',
      },
    },
  ]}
/>

{" "}

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/deno/how-to/build-process#customize-deno-build-environment',
      label: 'Customize build environment',
      customProps: {
        icon: Icons['sparkles'],
      },
    },
    {
      type: 'link',
      href: '/deno/how-to/customize-runtime',
      label: 'Customize runtime environment',
      customProps: {
        icon: Icons['sparkles-solid'],
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/deno/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>




Zerops provides Docker support through dedicated Virtual Machine (VM) environments, ensuring maximum compatibility and isolation while maintaining integration with the broader Zerops ecosystem. This guide explains how to effectively use Docker services on Zerops, including best practices and important considerations.

## Why VMs

While Zerops primarily uses native Linux containers for optimal performance, this VM-based approach allows you to run virtually any Docker container while maintaining Zerops' robust infrastructure management.

You can learn more about [differences](/features/container-vs-vm) between Containers and Virtual Machines on Zerops.

Before using Docker services, consider these important aspects:

### Virtual Machine Environment

Docker services on Zerops operate in a full VM environment, which has several implications:

- **Slower Boot Times**: VMs require more time to initialize due to full kernel boot
- **Higher Resource Usage**: VMs include additional system overhead compared to native containers
- **Scaling Limitations**:
    - Vertical scaling requires VM restart
    - Resources must be set as fixed values (no min-max ranges)
    - Zerops automatically restarts the VM when resource values are changed in UI
- **Storage Management**: Disk space can only be increased, not decreased without recreation
- **Build Phase Limitations**: Build phase runs in containers, not in the VM environment

### Advantages

Despite these limitations, Docker services offer some benefits:

- **Broad Compatibility**: Run almost any Docker container with minimal modification
- **Familiar Environment**: Standard Docker runtime environment

## Configuration Guide

### Supported Version

Currently supported Docker versions:
<UnorderedCodeList data={data.docker.import}/>

### Basic Structure

Docker services in Zerops are configured through the `zerops.yaml` file. Here's a typical configuration pattern:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    run:
      prepareCommands:
        - docker image pull <your-image>
      start: docker run --network=host <your-image>
      ports:
        - port: <port-number>
          httpSupport: true
```

Refer to the [Docker recipe repository](https://github.com/zeropsio/recipe-docker) for an example configuration.

:::note
We are actively working on improving the speed of image caching after `run.prepareCommands` and reducing the startup time of runtime VMs. These improvements will be released in future updates.
:::

### Network Configuration

Docker services require the `--network=host` flag for proper integration with Zerops:

- **Direct Port Management**: Ports are managed through `zerops.yaml`
- **Simplified Configuration**: Avoids double port exposure in Docker and Zerops
- **Native Performance**: Direct access to host networking

### Docker Compose Support

For projects using Docker Compose, additional configuration is required:

1. **File Deployment**:
   ```yaml title="zerops.yaml"
   build:
     deployFiles: ./docker-compose.yaml
     addToRunPrepare: ./docker-compose.yaml
   ```

2. **Network Mode**:
   ```yaml title="docker-compose.yaml"
   services:
     your-service:
       network_mode: host
   ```

3. **Start Command**:
   ```yaml title="zerops.yaml"
   run:
     start: docker compose up --force-recreate
   ```

### Environment Variables

When using Docker services, there's an additional layer to consider since environment variables defined in Zerops must be explicitly passed to your Docker containers.

#### 1. Defining Variables in Zerops

Define your environment variables in the `run.envVariables` section of your `zerops.yaml` (example uses [referenced](/features/env-variables#referencing-variables) variables):

```yaml title="zerops.yaml"
zerops:
  - setup: app
    run:
      envVariables:
        DB_HOST: ${db_hostname}
        DB_PORT: ${db_port}
```

#### 2. Passing Variables to Docker Containers

For single containers, pass variables using the `-e` flag:

```yaml title="zerops.yaml"
run:
  prepareCommands:
    - docker image pull my-application:latest
  start: docker run -e DB_HOST -e DB_PORT --network=host my-application:latest
```

For Docker Compose setups, pass environment variables in your `docker-compose.yaml`:

```yaml title="docker-compose.yaml"
services:
  api:
    image: my-application:latest
    network_mode: host
    environment:
      - DB_HOST
      - DB_PORT
```

## Implementation Examples

### Single Container

```yaml title="zerops.yaml"
zerops:
  - setup: app
    run:
      prepareCommands:
        - docker image pull crccheck/hello-world
      start: docker run --network=host crccheck/hello-world
      ports:
        - port: 8000
          httpSupport: true
```

### Single Service with Docker Compose

```yaml title="zerops.yaml"
zerops:
  - setup: api
    build:
      deployFiles: ./docker-compose.yaml
      addToRunPrepare: ./docker-compose.yaml
    run:
      prepareCommands:
        - docker compose pull api
      start: docker compose up api --force-recreate
      ports:
        - port: 8000
          httpSupport: true
```

### Multiple Services with Docker Compose

```yaml title="zerops.yaml"
zerops:
  - setup: apps
    build:
      deployFiles: ./docker-compose.yaml
      addToRunPrepare: ./docker-compose.yaml
    run:
      prepareCommands:
        - docker compose pull
      start: docker compose up --force-recreate
      ports:
        - port: 8000
          httpSupport: true
```

## Best Practices

#### Image Management
- Use `prepareCommands` for image pulling
- Consider using specific image tags instead of `latest`

#### Resource Planning
- Account for VM overhead in resource allocation
- Plan for longer initialization times
- Consider the impact on scaling operations

#### Migration Consideration
- Evaluate if your workload could run on native containers
- Consider gradual migration for complex applications
- Balance development effort against operational benefits

## Limitations and Workarounds

### Build Phase

Since the build phase runs in containers rather than VMs:

- Use `run.prepareCommands` for Docker-specific build steps
- Consider external CI/CD for complex Docker builds
- Leverage pre-built images when possible

### Scaling Operations

Docker services on Zerops have specific scaling characteristics that differ from native containers:

#### Vertical Scaling
- Resources must be defined with **fixed** values instead of min-max ranges
- CPU, RAM, and disk are specified as single values:
  ```yaml
  verticalAutoscaling:
    cpu: 3
    ram: 2
    disk: 20
  ```
- Any change to these values through the UI triggers an automatic VM restart
- Plan your resource allocation carefully to minimize scaling operations

#### Horizontal Scaling
- Still supports multiple containers through `minContainers` and `maxContainers`
- Consider breaking large services into smaller components
- Implement proper health checks for reliable scaling
- Use horizontal scaling when possible to avoid VM restarts



<FAQ>
  <FAQItem question="Sample Question">sample answer</FAQItem>
</FAQ>




This quick start allows you to get hands-on experience of Zerops, whether you only want to see it in action or want to start small and scale up the project size later. The purpose of this guide is to get an existing .NET application up and running easily.

If you are already familiar with Zerops and you are interested in more detailed guides for your own application, feel free to head straight to the [How to](/dotnet/how-to/create) section.

## Guides

We have created a repository, a _recipe_, containing the most simple .NET web application, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics on the way.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-dotnet',
      label: '.NET + SQL database',
      customProps: {
        icon: Icons['github'],
        description: 'A more complex, multi-service application example.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=dotnet&type=all&language=&sort=',
      label: 'All .NET recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspiration.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



## Private internal access

Projects in Zerops represent a group of one or more services.
Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its [internal port](/dotnet/how-to/build-pipeline#ports).

To connect to your application with `app` hostname running on [internal port](/dotnet/how-to/build-pipeline#ports) `5000`, simply use `http://app:5000`

:::info
Do not use `https://` when communicating with .NET from other runtime services in the same project. The internal communication is done over a private network and is isolated from other projects.
:::

### Use .NET environment variables

Zerops creates default environment variables for each .NET service to help you with connection within the same project. To avoid the need to copy the access parameters manually, use [generated environment variables](/dotnet/how-to/env-variables#generated-env-variables) of the .NET service.

#### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Example:

To access the `API_TOKEN` env variable of the `app` service, use `app_API_TOKEN` as the env variable key.

Read more about [env variables](/dotnet/how-to/env-variables).

## Private access via VPN

### Start VPN connection

You can securely connect to your .NET application from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)

### Access .NET application through VPN

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/dotnet/how-to/env-variables) are available when connected through VPN. To connect to your .NET application in Zerops set the hostname and [internal port](/dotnet/how-to/build-pipeline#ports) e.g. http://app:5000

:::info
Do not use `https://` when communicating with .NET over the VPN. The security is assured by the VPN. The internal communication is done over a private network and is isolated from other projects.
:::

### Connect via SSH

Use the <a href="/references/ssh">`ssh` command</a> to connect to your service via SSH.

### Stop VPN connection

[Stop the Zerops VPN](/references/vpn#stop-vpn) in zCLI.

## Public access through zerops.io subdomain

By default, your .NET service is not publicly accessible. To test your application, enable the [public access through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain).

## Public access through your domain

By default, your .NET service is not publicly accessible. When your application is ready for production or if you want to test it on the production domain, [configure the public access through your domain](/features/access#public-access-through-your-domain).

## Public access from another Zerops project

All services of the same project share a dedicated private network. To connect to a service within the same project, just use the service hostname and its [internal port](/dotnet/how-to/build-pipeline#ports). Different projects are not connected inside Zerops. To connect to a runtime service from another Zerops project, you need to use public access either [through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain) or [through your domain](/features/access#public-access-through-your-domain).





Zerops provides a customizable build and runtime environment for your .NET application.

## Add zerops.yaml to your repository

Start by adding `zerops.yaml` file to the **root of your repository** and modify it to fit your application:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: dotnet@6

      # OPTIONAL. Set the operating system for the build environment.
      # os: ubuntu

      # OPTIONAL. Customize the build environment by installing additional packages
      # or tools to the base build environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # REQUIRED. Build your application
      buildCommands:
        - npm i
        - npm run build

      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles:
        - dist
        - package.json
        - node_modules

      # OPTIONAL. Which files / folders you want to cache for the next build.
      # Next builds will be faster when the cache is used.
      cache: node_modules

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base: dotnet@latest

      # OPTIONAL. Sets the internal port(s) your app listens on:
      ports:
        # port number
        - port: 5000

      # OPTIONAL. Customize the runtime .NET environment by installing additional
      # dependencies to the base .NET runtime environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your .NET application is started.
      # initCommands:
      #  - rm -rf ./cache

      # REQUIRED. Your .NET application start command
      start: npm start
```

The top-level element is always `zerops`.

### Setup

The first element `setup` contains the **hostname** of your service. A runtime service with the same hostname must exist in Zerops.
Zerops supports the definition of multiple runtime services in a single `zerops.yaml`. This is useful when you use a monorepo. Just add multiple setup elements in your `zerops.yaml`:

```yaml
zerops:
  # definition for app service
  - setup: app
    build: ...
    run: ...

  # definition for api service
  - setup: api
    build: ...
    run: ...
```

Each service configuration contains at least two sections: **build** and **run**. Both sections are required to build and deploy your .NET application in Zerops. If you'd like to use a readiness check, add an optional **deploy** section.

## Build pipeline configuration

### base

_REQUIRED._ Sets the base technology for the build environment.

Following options are available for .NET builds:

<UnorderedCodeList data={data.dotnet.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: dotnet@6
      ...
```

<p>
  The base build environment contains {data.alpine.default}, the selected
  major version of .NET, <a href="/references/cli">Zerops command line tool</a>, `ASP .NET` and `git`.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the build environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base:
        - dotnet@6
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [build base environments](/zerops-yaml/base-list#runtime-services).

To customize your build environment use the [prepareCommands](/dotnet/how-to/build-pipeline#preparecommands) attribute.

:::note
Modifying the base technology will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for more details about cache invalidation.
:::

### os

_OPTIONAL._ Sets the operating system for the build environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customized.
:::

:::note
Changing the OS setting will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache behavior.
:::

### prepareCommands

_OPTIONAL._ Customizes the build environment by installing additional dependencies or tools to the base build environment.

The base build environment contains:

- <span>{data.alpine.default}</span>
- selected version of .NET defined in the [base](/dotnet/how-to/build-pipeline#base) attribute
- [Zerops command line tool](/references/cli)
- `ASP .NET` and `git`

To install additional packages or tools add one or more prepare commands:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: dotnet@6

      # OPTIONAL. Customize the build environment by installing additional packages
      # or tools to the base build environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first build is triggered, Zerops will

1. create a build container
2. download your application code from your repository
3. run the prepare commands in the defined order

The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).

:::note
These commands are skipped when using cached environment. Modifying `prepareCommands` will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache invalidation.
:::

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/dotnet/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all prepare commands are finished, your custom build environment is ready for the build phase.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### buildCommands

_REQUIRED._ Defines build commands.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: dotnet@6

      # REQUIRED. Build your application
      buildCommands:
        - dotnet build -o app
      ...
```

At least one command is required. Zerops triggers each command in the defined order in a dedicated build container.

Before the build commands are triggered the build container contains:

1. base environment defined by the [base](/dotnet/how-to/build-pipeline#base) attribute
2. optional customisation of the base environment defined in the [prepareCommands](/dotnet/how-to/build-pipeline#preparecommands) attribute
3. your application code

#### Run build commands as a single shell instance

Use following syntax to run all commands in the same environment context. For example, if one command changes the current directory, the next command continues in that directory. When one command creates an environment variable, the next command can access it.

```yaml
buildCommands:
  - |
    apt-get -y install dotnet-runtime-6.0 aspnetcore-runtime-6.0 dotnet-sdk-6.0 # already installed for .NET service
    dotnet build -o app
```

#### Run build commands as a separate shell instances

When the following syntax is used, each command is triggered in a separate environment context. For example, each shell instance starts in the home directory again. When one command creates an environment variable, it won't be available for the next command.

```yaml
buildCommands:
  - apt-get -y install dotnet-runtime-6.0 aspnetcore-runtime-6.0 dotnet-sdk-6.0 # already installed for .NET service
  - dotnet build -o app
```

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/dotnet/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the `--verbosity <LEVEL>` option.

```yaml
buildCommands:
  - dotnet build --verbosity detailed
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the deploy phase.

### deployFiles

_REQUIRED._ Selects which files or folders will be deployed after the build has successfully finished. To filter out specific files or folders, use <a href="#deployignore">`.deployignore`</a> file.

```yaml
# REQUIRED. Select which files / folders to deploy after
# the build has successfully finished
deployFiles:
  - app
```

Determines files or folders produced by your build, which should be deployed to your runtime service containers.

The path starts from the **root directory** of your project (the location of `zerops.yaml`). You must enclose the name in quotes if the folder or the file name contains a space.

The files/folders will be placed into `/var/www` folder in runtime, e.g. `./src/assets/fonts` would result in `/var/www/src/assets/fonts`.

#### Examples

Deploys a folder, and a file from the project root directory:

```yaml
deployFiles:
  - app
  - file.txt
```

Deploys the whole content of the build container:

```yaml
deployFiles: .
```

Deploys a folder, and a file in a defined path:

```yaml
deployFiles:
  - ./path/to/file.txt
  - ./path/to/dir/
```

#### How to use a wildcard in the path

Zerops supports the `~` character as a wildcard for one or more folders in the path.

Deploys all `file.txt` files that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/file.txt
```

Deploys all folders that are located in any path that begins with `/path/to/`

```yaml
deployFiles: ./path/to/~/
```

Deploys all folders that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/
```

:::note Example
By default, `./src/assets/fonts` deploys to `/var/www/src/assets/fonts`, keeping the full path. Adding `~`, like `./src/assets/~fonts`, shortens it to `/var/www/fonts`
:::
#### .deployignore

Add a `.deployignore` file to the root of your project to specify which files and folders Zerops should ignore during deploy. The syntax follows the same pattern format as <a href="https://git-scm.com/docs/gitignore#_pattern_format">`.gitignore`</a>.

To ignore a specific file or directory path, start the pattern with a forward slash (`/`). Without the leading slash, the pattern will match files with that name in any directory.

:::tip
For consistency, it's recommended to configure both your `.gitignore` and `.deployignore` files with the same patterns.
:::

Examples:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      deployFiles: ./
```

```text title=".deployignore"
/src/file.txt
```
The example above ignores `file.txt` only in the root src directory.
```text title=".deployignore"
src/file.txt
```
This example above ignores `file.txt` in ANY directory named `src`, such as:
- `/src/file.txt`
- `/folder2/folder3/src/file.txt`
- `/src/src/file.txt`

:::note
`.deployignore` file also works with <a href="/references/cli/commands#deploy">`zcli service deploy`</a> command.
:::

### cache

_OPTIONAL._ Defines which files or folders will be cached for the next build.

```yaml
# OPTIONAL. Which files / folders you want to cache for the next build.
# Next builds will be faster when the cache is used.
cache: file.txt
```

The cache attribute helps optimize build times by preserving specified files between builds.

The cache attribute supports the [~ wildcard character](#how-to-use-a-wildcard-in-the-path).

Learn more about the [build cache system](/features/build-cache) in Zerops.

### envVariables

_OPTIONAL._ Defines the environment variables for the build environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      base: dotnet@6
        …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        DOTNET_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/dotnet/how-to/env-variables) in Zerops.

## Runtime configuration

### base

_OPTIONAL._ Sets the base technology for the runtime environment.
If you don't specify the `run.base` attribute, Zerops keeps the current .NET version for your runtime.

Following options are available for .NET builds:

<UnorderedCodeList data={data.dotnet.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: dotnet@6
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
        base: dotnet@6
      ...
```

<p>
  The base runtime environment contains {data.alpine.default}, the
  selected major version of .NET, <a href="/references/cli">Zerops command line tool</a> and `ASP .NET` and `git`.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the runtime environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: dotnet@6
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base:
        - dotnet@6
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [run base environments](/zerops-yaml/base-list).

To customise your build environment use the `prepareCommands` attribute.

### os

_OPTIONAL._ Sets the operating system for the runtime environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customised.
:::

### ports

_OPTIONAL._ Specifies one or more internal ports on which your application will listen.

Projects in Zerops represent a group of one or more services. Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its internal port.

For example, to connect to a .NET service with hostname = "app" and port = 5000 from another service of the same project, simply use `app:5000`. Read more about [how to access a .NET service](/dotnet/how-to/access).

Each port has following attributes:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">port</td>
      <td className="w-fit">Defines the port number. You can set any port number between <em>10</em> and <em>65435</em>. Ports outside this interval are reserved for internal Zerops systems.</td>
    </tr>
    <tr>
      <td className="w-fit">protocol</td>
      <td className="w-fit"><strong>Optional.</strong> Defines the protocol. Allowed values are <code>TCP</code> or <code>UDP</code>. Default value is <code>TCP</code>.</td>
    </tr>
    <tr>
      <td className="w-fit">httpSupport</td>
      <td className="w-fit"><strong>Optional.</strong> <code>httpSupport = true</code> is the default setting for TCP protocol. Set <code>httpSupport = false</code> if a web server isn't running on the port. Zerops uses this information for the configuration of <a href="/features/access">public access</a>. <code>httpSupport = true</code> is available only in combination with the TCP protocol.</td>
    </tr>
  </tbody>
</table>


### prepareCommands

_OPTIONAL._ Customises the .NET runtime environment by installing additional dependencies or tools to the runtime base environment.

<p>
  The base .NET environment contains {data.alpine.default}, the selected
  major version of .NET, <a href="/references/cli">Zerops command line tool</a> and `ASP .NET` and `git`. To install additional packages
  or tools add one or more prepare commands:
</p>

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base .NET runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first deploy with a defined prepare attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/dotnet/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `prepareCommands` commands in the defined order

#### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/dotnet/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

#### Cache of your custom runtime environment

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the [build.addToRunPrepare](#copy-folders-or-files-from-your-build-container) and `run.prepareCommands` attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.

{/* TODO screenshot** */}

When the prepare cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### Copy folders or files from your build container

<p>
  The prepare runtime container contains {data.alpine.default}, the
  selected major version of .NET,
  <a href="/references/cli">Zerops command line tool</a> and
  `ASP .NET` and `git`.
</p>

The prepare runtime container does not contain your application code nor the built application. If you need to copy some folders or files from the build container to the runtime container (e.g. a configuration file) use the `addToRunPrepare` attribute in the [build section](#build-pipeline-configuration).

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...
      addToRunPrepare: ./runtime-config.yaml

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base .NET runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

In the example above Zerops will copy the `runtime-config.yaml` file from your build container **after the build has finished** into the new **prepare runtime** container. The copied files and folders will be available in the `xxx` folder in the new prepare runtime container before the prepare commands are triggered.

### initCommands

_OPTIONAL._ Defines one or more commands to be run each time a new runtime container is started or a container is restarted.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your .NET application is started.
      initCommands:
        - rm -rf ./cache
```

These commands are triggered in the runtime container before your .NET application is started via the [start command](/dotnet/how-to/build-pipeline#start).

Use init commands to clean or initialise your application cache or similar operations.

:::caution
The init commands will delay the start of your application each time a new runtime container is started (including the [horizontal scaling](/dotnet/how-to/scaling#horizontal-auto-scaling) or when a runtime container is restarted).

Do not use the init commands for customising your runtime environment. Use the [run:prepareCommands](/dotnet/how-to/build-pipeline#preparecommands-1) attribute instead.
:::

#### Command exit code

If any of the `initCommands` fails, it returns an exit code other than 0, but deploy is **not** canceled. After all init commands are finished, regardless of the status code, the application is started. Read the [runtime log](/dotnet/how-to/logs#runtime-log) to troubleshoot the error.

#### Single or separated shell instances

You can configure your `initCommands` to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### envVariables

_OPTIONAL._ Defines the environment variables for the runtime environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to run your application ====
    run:
      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        DOTNET_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/dotnet/how-to/env-variables) in Zerops.

### start

_REQUIRED._ Defines the start command for your .NET application.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your .NET application start command
      start: cd app && dotnet dnet.dll
```

### health check

_OPTIONAL._ Defines a health check.

`healthCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the health check to request a local URL using a HTTP GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your .NET application start command
      start: cd app && dotnet dnet.dll

      # OPTIONAL. Define a health check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      healthCheck:
        httpGet:
          port: 80
          path: /status
```

Read more about how the [health check works] in Zerops.

#### exec

Configures the health check to run a local command.
Following attributes are available:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/dotnet/how-to/create#set-secret-environment-variables">environment variables</a> as your .NET application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>
                                                                                                                                                                                                                                                                            
**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your .NET application start command
      start: cd app && dotnet dnet.dll

      # OPTIONAL. Define a health check with a shell command.
      healthCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [health check works] in Zerops.

### crontab

_OPTIONAL._ Defines cron jobs.

Setup cron jobs in the following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app

    # ==== how to run your application ====
    run:
      crontab:
        # REQUIRED. Sets the command to execute:
        - command: ""
        # REQUIRED. Sets the interval time to execute:
          timing: "0 * * * *"
```

Read more about setting up [cron](/references/cron) in Zerops.

## Deploy configuration

### readiness check

_OPTIONAL._ Defines a readiness check. Read more about how the [readiness check works](/dotnet/how-to/deploy-process#readiness-checks) in Zerops.

`readinessCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the readiness check to request a local URL using a http GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        httpGet:
          port: 80
          path: /status

    # ==== how to run your application ====
    run: ...
```

Read more about how the [readiness check works](/dotnet/how-to/deploy-process#readiness-checks) in Zerops.

#### exec

Configures the readiness check to run a local command.
Following attributes are available:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/dotnet/how-to/create#set-secret-environment-variables">environment variables</a> as your .NET application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [readiness check works](/dotnet/how-to/deploy-process#readiness-checks) in Zerops.



<p align="center">
  <Image
    lightImage="/img/screenshots/build_deploy_pipeline-step2.png"
    darkImage="/img/screenshots/build_deploy_pipeline-step2.png"
    alt="Build Deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Description of the build process

Zerops starts a temporary build container and performs following actions:

1. Installs the build environment:
   - Sets up base system and Go runtime
   - Restores cached files if available (based on `build.cache` configuration)
   - Validates cache against current `build.os`, `build.base`, and `build.prepareCommands`
2. Downloads your application source code from [GitHub ↗](https://www.github.com), [GitLab ↗](https://www.gitlab.com) or via [Zerops CLI](/references/cli)
3. Optionally [customizes the build environment](#customize-net-build-environment)
4. Runs the build commands
5. Uploads the application artefact to the internal Zerops storage
6. Preserves specified files for future builds (based on `build.cache` configuration)
7. Optionally [customizes the runtime environment](/dotnet/how-to/customize-runtime)
8. [Deploys your application](/dotnet/how-to/deploy-process)

The build container is automatically deleted after the build has finished or failed.

## Cancel running build

When you know that the running build is not correct and you want to cancel it, you can do it in Zerops GUI. Go to the service detail, select **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Cancel build** button.

{/* TODO - screenshot of a running build pipeline */}

The build cancellation is available before the build pipeline is finished. When the build is finished, the deployment cannot be cancelled.


## Customize .NET build environment

The default .NET build environment contains:

- <span>{data.alpine.default}</span>
- selected version of .NET defined in `zerops.yaml` [build.base](/dotnet/how-to/build-pipeline#base) parameter
- [zCLI](/references/cli)
- ASP .NET and Git

:::note
To use Ubuntu instead of the default Alpine, set the [build.os](/zerops-yaml/specification#os-) attribute.

Additional packages and tools can be installed using [build.prepareCommands](/zerops-yaml/specification#preparecommands-).
:::

:::info
The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).
:::

## .NET build hardware resources

Build of your .NET application is run in a separate build container with following resource configuration:

| HW resource   | Minimum | Maximum |
| ------------- | ------- | ------- |
| **CPU cores** | 6       | 20      |
| **RAM**       | 8 GB    | 8 GB    |
| **Disk**      | 1 GB    | 100 GB  |

The build container is always started with the minimum hardware resources and scales vertically up to the maximum resources.

:::info
Hardware resources of the build containers are not charged. The build costs are covered by the standard Zerops [project fee](https://zerops.io/#pricing).
:::

## Build time limit

The time limit for the whole build pipeline is **1 hour**. After 1 hour, Zerops will terminate the build pipeline and delete the build container.

## Troubleshooting build-related problems

### Failure of a build prepare command

If any [prepare command](/dotnet/how-to/build-pipeline#preparecommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/dotnet/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom build environment is ready for the build phase.

### Invalidate the build cache
If you encounter unexpected build behavior or dependency issues, the problem might be related to [cached build data](/features/build-cache). While Zerops maintains the build cache to speed up deployments, sometimes you may need to start fresh.
To invalidate the build cache:

1. Go to your service detail in Zerops GUI
2. Choose **Pipelines & CI/CD Settings** from the left menu
3. Click on the **Invalidate build cache** button

This will force Zerops to run the next build clean, including all prepare commands, which can help resolve cache-related issues. After invalidation, your next build will also create a fresh cache.

### Failure of a build command

If any [build command](/dotnet/how-to/build-pipeline#buildcommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/dotnet/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the `--verbosity <LEVEL>` option.

```yaml
buildCommands:
  - dotnet build --verbosity detailed
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the [deploy](/dotnet/how-to/deploy-process) phase.



Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart .NET service in Zerops GUI

To stop the .NET service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)*/}

To start the stopped .NET service choose the **Start** item from the same menu.

To restart the .NET service choose the **Restart** item from the same menu.

## Stop and start .NET using zCLI

zCLI is the Zerops command-line tool. To stop and start the .NET service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and services to choose from.
:::




Zerops provides a .NET runtime service with extensive build support. .NET runtime is highly scalable and customisable to suit both development and production.

## Create .NET service using Zerops GUI

First, set up a project in Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu in the **Services** block. Then add a new .NET service:

<Video
  src="/vids/services/dotnet.webm"
  type="video/webm"
/>

### Choose .NET version

Following .NET versions are currently supported:

<UnorderedList data={data.dotnet.readable} />

:::info
You can [change](/dotnet/how-to/upgrade) the major version at any time later.
:::

### Set a hostname

Enter a unique service identifier like "app","cache", "gui" etc. Duplicate services with the same name in the same project are forbidden.

#### Limitations:

- maximum 25 characters
- must contain only lowercase ASCII letters (a-z) or numbers (0-9)

:::caution
The hostname is fixed after the service is created. It can't be changed later.
:::

### Set secret environment variables

Add environment variables with sensitive data, such as password, tokens, salts, certificates etc. These will be securely saved inside Zerops and added to your runtime service upon start.

Setting the secret environment variables is optional. You can set them later in Zerops GUI.

Read more about [different types of env variables](/dotnet/how-to/env-variables#types-of-env-variables-in-zerops) in Zerops.

### Set auto scaling configuration

Zerops scales the .NET services automatically both vertically and horizontally. Vertical scaling means increasing or decreasing the hardware resources (CPU, RAM and disk) of a .NET container. Horizontal scaling adds or removes whole containers.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

**Dedicated**
The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

Choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

.NET service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the .NET service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient .NET performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](/dotnet/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

:::info
You can change the vertical auto scaling parameters later.
:::

#### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your .NET service. When your .NET service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

.NET service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

[Learn more](/dotnet/how-to/scaling) about .NET auto scaling.

#### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Create .NET service using zCLI

zCLI is the Zerops command-line tool. To create a new .NET service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/dotnet/how-to/create#create-a-project-description-file)
3. [Create a project with a .NET and PostgreSQL service](#full-example)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### Basic example:

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in dotnet@6 format
    type: dotnet@6
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes your future project infrastructure. The project will contain one .NET version 6 service with default [auto scaling](/dotnet/how-to/scaling) configuration. Hostname will be set to "app", the internal port(s) the service listens on will be defined later in the [zerops.yaml](/dotnet/how-to/build-pipeline#ports). Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

#### Full example:

Create a directory my-project. Create an description.yaml file inside the my-project directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a .NET and PostgreSQL database
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in dotnet@6 format
    type: dotnet@6
    # optional: vertical auto scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4
    # optional: create secret env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
  - # second service hostname
    hostname: db
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"non_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain a .NET service and a [PostgreSQL](/postgresql/overview) service.

.NET service with "app" hostname, the internal port(s) the service listens on will be defined later in the [zerops.yaml](/dotnet/how-to/build-pipeline#ports). .NET service will run on version 6 with a custom vertical and horizontal scaling. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The hostname of the PostgreSQL service will be set to "db". The [single container](/postgresql/how-to/create#single-container) mode will be chosen and the default [auto scaling configuration](/postgresql/how-to/create#set-auto-scaling-configuration) will be set.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Limitations</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>name</strong></td>
      <td className="w-fit">The name of the new project. Duplicates are allowed.</td>
      <td className="w-fit"></td>
    </tr>
    <tr>
      <td className="w-fit"><strong>description</strong></td>
      <td className="w-fit"><strong>Optional.</strong> Description of the new project.</td>
      <td className="w-fit">Maximum 255 characters.</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>tags</strong></td>
      <td className="w-fit"><strong>Optional.</strong> One or more string tags. Tags do not have a functional meaning, they only provide better orientation in projects.</td>
      <td className="w-fit"></td>
    </tr>
  </tbody>
</table>


At least one service in `services:` section is required. You can create a project with multiple services. The example above contains .NET and PostgreSQL services but you can create a `description.yaml` with your own combination of [services](/features/infrastructure).

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>hostname</strong></td>
      <td className="w-fit">
        The unique service identifier.
         
        The hostname of the new database will be set to the `hostname` value.
         
        <strong>Limitations:</strong>
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>type</strong></td>
      <td className="w-fit">
        Specifies the service type and version.

        See what [.NET service types](/references/import-yaml/type-list#runtime-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>verticalAutoscaling</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Defines <a href="/dotnet/how-to/create#set-auto-scaling-configuration">custom vertical auto scaling parameters</a>.
        
        All verticalAutoscaling attributes are optional. Not specified attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- cpuMode</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minCpu/maxCpu</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minCpu or maxCpu in CPU cores (integer).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minRam/maxRam</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minRam or maxRam in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minDisk/maxDisk</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minDisk or maxDisk in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>minContainers</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Default = 1. Defines the minimum number of containers for <a href="/dotnet/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.
         
        <strong>Limitations:</strong>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>maxContainers</strong></td>
      <td className="w-fit">
        Defines the maximum number of containers for <a href="/dotnet/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.
         
        <strong>Limitations:</strong>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>envSecrets</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Defines one or more secret env variables as a key value map. See env variable <a href="/dotnet/how-to/env-variables#env-variable-restrictions">restrictions</a>.
      </td>
    </tr>
  </tbody>
</table>

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>
### Add .NET service to an existing project

#### Example:

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in dotnet@6 format
    type: dotnet@6
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one .NET service version 6 with default [auto scaling](/dotnet/how-to/scaling) configuration will be added to your project. Hostname of the new service will be set to `app`. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The content of the `services:` section of `import.yaml` is identical to the project description file. The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the import.yaml file is 100 kB.




<p align="center">
  <Image
    lightImage="/img/screenshots/build_deploy_pipeline_custom_runtime.png"
    darkImage="/img/screenshots/build_deploy_pipeline_custom_runtime.png"
    alt="Build Deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>


The default .NET runtime environment contains:

- <span>{data.alpine.default}</span>
- Selected version of .NET when the runtime service was created.
- [zCLI](/references/cli)
- ASP .NET and Git

:::note
To use Ubuntu instead of the default Alpine, set the [run.os](/zerops-yaml/specification#os--1) attribute.

Additional packages and tools can be installed using [run.prepareCommands](/zerops-yaml/specification#preparecommands--1).
:::

## Runtime Flow

When the first deploy with a defined `prepareCommands` attribute is triggered, Zerops will

1. Create a prepare runtime container
2. Optionally: [copy selected folders or files from your build container](/dotnet/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. Run the `prepareCommands` in the defined order

## Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/dotnet/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

The prepare runtime container is automatically deleted after the prepare runtime phase has finished or failed.

## Custom runtime environment cache

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the <a href="/dotnet/how-to/build-pipeline#copy-folders-or-files-from-your-build-container">build.addToRunPrepare</a> and <a href="/dotnet/how-to/build-pipeline#preparecommands-1">run.prepareCommands</a> attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

:::tip
To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.
:::

{/* TODO - Screenshot */}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.



## Delete .NET service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete .NET using zCLI

zCLI is the Zerops command-line tool. To delete the .NET service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects to choose from.




<p align="center">
  <Image
    lightImage="/img/screenshots/build_deploy_pipeline-step3.png"
    darkImage="/img/screenshots/build_deploy_pipeline-step3.png"
    alt="Build Deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Application artefact

When the [build phase](/dotnet/how-to/build-process) is finished, the application artefact is stored in the internal Zerops storage and the build container is deleted.

If you triggered the deploy pipeline [manually](/dotnet/how-to/trigger-pipeline#manual-deploy-using-zerops-cli) using Zerops CLI, the application artefact is also uploaded to the internal Zerops storage.

Zerops uses the stored artefact to deploy the identical version of your application each time a new container is started:

- when a new application version is deployed
- when the application [scales horizontally](/dotnet/how-to/create#horizontal-auto-scaling)
- when a runtime container fails and a new container is started automatically

## First deploy

When your application is deployed for the first time, Zerops will start one or more runtime containers based on the service [auto scaling settings](/dotnet/how-to/scaling).

Zerops performs following actions for each new container:

1. Installs the runtime environment
2. Downloads the application artefact from the internal storage
3. Optionally runs the [init commands](/dotnet/how-to/build-pipeline#initcommands)
4. Starts your application using the [start command](/dotnet/how-to/build-pipeline#start)
5. Optionally waits until the [readiness check](/dotnet/how-to/build-pipeline#readiness-check) succeeds
6. The container is now active and receives incoming requests.

Services with multiple containers are deployed in parallel.

:::info
If your application needs to be initialized in each runtime container, add [init commands](/dotnet/how-to/build-pipeline#initcommands) to `zerops.yaml`.
:::

:::caution
Do not use the `initCommands` for customising your runtime environment. See [how to customize the runtime environment](/dotnet/how-to/customize-runtime).
:::

## Further deploys

When a previous version of your application is already running, Zerops will start new containers. The count of new containers will be the same as the count of existing containers.

Zerops performs the identical actions for each new container as the first deployment.
When all new containers are started your service contains both new and old versions for a short period of time.

The old containers are then removed from the project balancer so they don't receive new requests. The .NET process inside each of the old containers is terminated and all old containers are gradually deleted.

## Readiness checks

If your application isn't ready to handle requests right after it is started via the [start command](/dotnet/how-to/build-pipeline#start), configure a [readiness check](/dotnet/how-to/build-pipeline#readiness-check) in your `zerops.yaml`.

If the readiness check is defined, Zerops will:

1. Start your application
2. Perform a readiness check
3. If the readiness check fails, wait 5 seconds and repeat step 2.
4. If the readiness check succeeds, set the container as active.

Application in the runtime container with a pending readiness check won't receive any incoming requests. Only active containers receive incoming requests to your .NET service.

If the readiness check is still failing after 5 minutes, the specific runtime container is marked as failed and Zerops will delete it, create a new runtime container and perform the deploy.

The <a href="/dotnet/how-to/build-pipeline#httpget">`httpGet`</a> readiness check is successful when the URL returns HTTP status code `2xx`. The timeout is 5 seconds. When the URL returns a `3xx` HTTP status, the readiness check HTTP client will follow the redirect.

The <a href="/dotnet/how-to/build-pipeline#exec">`exec.command`</a> readiness check is successful when the command returns status code 0. The timeout is 5 seconds.

Read the [runtime log](/dotnet/how-to/logs#runtime-log) to troubleshoot failed readiness checks.

## Application versions

Zerops keeps 10 last versions of your application in the internal storage.

The list of application versions is available in Zerops GUI. Go to the service detail and choose **Service dashboard & runtime containers** from the left menu. The active version is highlighted, show all archived version by clicking on the button below.

<p align="center">
  <Image
    lightImage="/img/screenshots/pipeline_history.png"
    darkImage="/img/screenshots/pipeline_history.png"
    alt="Pipeline History"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

The pipeline detail is accessible from the additional menu. The pipeline detail contains

- The pipeline config (`zerops.yaml`) that was used for the selected version
- The build log (if available)
- The prepare runtime log (if available)

You can download the build artefact of the selected version or delete an inactive version manually.

## Restore an archived version

You can restore an archived version by choosing the **Activate** item from the additional menu.
Zerops will deploy the selected version and the active version will be archived.

The environment variables will be restored to the latest moment when the selected version was active.




Environment variables help you run your application in different environments. They allow you to isolate all specific environment aspects from your application code and keep your app encapsulated. You can create several projects in Zerops that represent different environments (development, stage, production) or even each developer can have a project with its own environment.

In Zerops you do not have to create a `.env` file manually. Zerops handles the environment variables for you.

## Types of env variables in Zerops

There are 3 different sets of env variables in Zerops:

<table className="w-fit my-1.5">
  <thead>
    <tr className="text-center  rounded-lg">
      <th className="w-fit"><strong>Type</strong></th>
      <th className="w-fit"><strong>Environment</strong></th>
      <th className="w-fit"><strong>Defined in</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">build</td>
      <td className="w-fit"><a href="/dotnet/how-to/build-pipeline#envvariables">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/dotnet/how-to/build-pipeline#envvariables-1">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">secret</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/dotnet/how-to/env-variables#set-secret-env-variables-in-zerops-gui">Zerops GUI</a></td>
    </tr>
  </tbody>
</table>

Use the [secret env variables](/dotnet/how-to/create#set-secret-environment-variables) for all sensitive data you don't want to store in your application code. Secret env variables are also useful if you need for testing where you need to change the value of some env variables frequently. Secret variables are managed in Zerops GUI and you don't have to redeploy your application.

The basic build and runtime env variables are listed in your [zerops.yaml](/zerops-yaml/specification) and deployed together with your application code. When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your zerops.yaml and redeploy your application to Zerops.

You can [reference](/dotnet/how-to/env-variables#reference-a-local-variable-in-another-variable-value) another variable of the same service or even a variable of [another service](/dotnet/how-to/env-variables#reference-a-variable-of-another-project-service) within the same project.

## Set secret env variables in Zerops GUI

Use secret variables to store passwords, tokens and other sensitive information that shouldn't be part of your repository and listed in zerops.yaml.

<p align="center">
  <Image
    lightImage="/img/screenshots/secret_env.png"
    darkImage="/img/screenshots/secret_env.png"
    alt="Secrete ENVs"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set env variables when you [create](/dotnet/how-to/create) a new .NET service or you can set them later.

To configure env variables for an existing service, go to the service detail and choose **Environment variables** in the left menu. Scroll to the **Secret variables** section and click on the **Add secret variable** button and set variable key and value.

You can edit or delete env variables that you've created by clicking on the menu on the right side of each row.

The changes you've made to environment variables will be automatically applied to all containers of your project's services.

:::caution
You need to **restart** the runtime service after you update environment variables. The .NET process running in the container receives the list env variables only when it starts. Update of the env variables while the .NET process is running does not affect your application.
:::

## Set basic build env variables in zerops.yaml

To set basic env variables for the build environment, add the `envVariables` attribute to the build section in your `zerops.yaml`

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
       …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Set basic runtime env variables in zerops.yaml

To set basic env variables for the runtime environment, add the `envVariables` attribute to the runtime section in your `zerops.yaml`.

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    run:
       …

      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Env variable restrictions

**key**

- must satisfy the following regular expression: `[a-zA-Z_]+[a-zA-Z0-9_]*`
- all variable keys in the same service must be unique regardless of case
- keys are case sensitive

**value**

- must contain only ASCII characters
- the _End of Line_ character is forbidden

These restrictions apply to all [types of env variables](/dotnet/how-to/env-variables#types-of-env-variables-in-zerops).

## Referencing other env variables

You can reference another variable of the same service using `${key}` in your variable value. You can even reference a variable from a different service using `${hostname_key}`. The referenced variable doesn't need to exist when you are entering your variable.

### Reference a local variable in another variable value

| Variable key | Variable value      | Computed variable value |
| ------------ | ------------------- | ----------------------- |
| id           | 12345               | 12345                   |
| hostname     | app                 | app                     |
| name         | `${id}-${hostname}` | 12345-app               |

### Reference a variable of another project service

Let's say your project contains two PostgreSQL services `dbtest` and `dbprod`. Both services have a `connectionString` variable. Then you can create a `dbConnectionString` env variable in your .NET runtime and set `${dbtest_connectionString}` as the variable value. Zerops will fill in the value of the `connectionString` variable of the `dbtest` service.

When you change the `dbConnectionString` value to `${dbprod_connectionString}`, Zerops will fill in the value of the `connectionString` variable of the `dbprod` service.

:::caution
When you change the value of the `connectionString` variable in the service `dbtest` you need to **restart** the .NET service. The .NET process running in the container receives the list env variables only when it starts. Update of the env variables while the .NET process is running does not affect your application.
:::

## Generated env variables

Zerops creates several helper variables when a .NET service is created, e.g. `hostname`, `PATH`. Some helper variables are read-only (`hostname`), others are editable (`PATH`). Generated variables cannot be deleted.

Generated env variables are listed on the **Environment variables** page. Scroll to the **Generated variables** section.

<p align="center">
  <Image
    lightImage="/img/screenshots/nodejs_generated_variables.png"
    darkImage="/img/screenshots/nodejs_generated_variables.png"
    alt="Node.js Generated Variables"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## How to read env variables from your .NET app

Zerops passes all environment variables from all project services when your .NET app is deployed and started.

To access the local environment variable i.e. the variable set to this .NET service in your app, use:

```sh
Environment.GetEnvironmentVariable("YOUR_VARIABLE_KEY_HERE");
```

## How to read env variables of another service

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Examples:

To access the `connectionString` env variable of the `mariadb1` service, use `mariadb1_connectionString` as the env variable key.
To access the `password` env variable of the `mariadb2` service, use `mariadb2_password` as the env variable key.

## How to read runtime env variables in the build environment

You can use runtime env variables in the build environment using the `RUNTIME_` prefix. For example if you have a runtime variable with the `connectionString` key, use the `RUNTIME_connectionString` to read the variable in the build environment. This rule applies both for basic and secret runtime variables.

## Basic and secret env variable with the same key

If you create a secret env variable and a basic runtime env variable with the same key, Zerops saves the basic runtime env variable from your zerops.yaml and ignores the secret env variable.

If you create a basic build env variable and a runtime env variable with the same key, Zerops saves both because the build and runtime environments have separate sets of env variables.



## Zerops GUI

In Zerops GUI, go to the service detail page and choose **Service containers & resources overview** and scroll down to the list of containers.

<p align="center">
  <img
    src="/img/screenshots/nodejs_containers_list.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Then click on the file browser icon and the file browser opens:

<p align="center">
  <img
    src="/img/screenshots/nodejs_file_browser.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

If your service is in the [HA mode], you can switch between containers in the top left corner.

## zCLI & SSH

You can connect to the container via SSH with the Zerops CLI and browse its files.
How to [connect to your service via SSH](/references/ssh).



Zerops provides 3 different logs:

- [build log](#build-log)
- [prepare runtime log](#prepare-runtime-log)
- [runtime log](#runtime-log)

## How to access logs

### Build log

#### Zerops GUI

To access a build log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Build log**. The build log button is available only if the [build pipeline](/dotnet/how-to/trigger-pipeline) was triggered for the selected deploy.

#### zCLI

To access a build log in Zerops CLI use

```sh
zcli service log --showBuildLogs
```

Read more about the [zcli service log](/references/cli/access-logs) command.

### Prepare runtime log

#### Zerops GUI

To access a prepare runtime log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Prepare runtime log**. The prepare runtime log button is available only if the [prepare runtime pipeline](/dotnet/how-to/build-pipeline#preparecommands-1) was triggered for the selected deploy.

#### zCLI

_Prepare runtime log is currently not supported in zCLI._

### Runtime log

#### Zerops GUI

To access a runtime log in Zerops GUI, go to the service detail and choose **Runtime log** in the left menu.

{/* TODO screenshot** */}

Each runtime container has its own log. If your service has multiple containers, select the container in the log header.

You can filter log records by minimum severity or by time.

#### zCLI

To access the log of the runtime containers in Zerops CLI use

```sh
zcli service log
```

Read more about the [zcli service log](/references/cli/access-logs) command.

## .NET logging configuration

Zerops logs all messages sent

- to the standard error (`stderr`)
- to the standard output (`stdout`)
- via the .NET `Console` logging provider and `Log{LogLevel}` method

### Severity level

By default the `Log{LogLevel}` methods create messages with the `Informational (6)` severity.

Add a severity number in the `<N>` format as a prefix to set a custom severity as shown below:

```csharp
builder.Logging.AddConsole();
var app = builder.Build();
app.Logger.LogInformation('A message with the informational severity ...');
app.Logger.LogInformation('<0>Emergency (0) severity > system is unusable.');
app.Logger.LogInformation('<1>Alert (1) severity > action must be taken immediately.');
app.Logger.LogInformation('<2>Critical (2) severity > critical conditions.');
app.Logger.LogInformation('<3>Error (3) severity > error conditions.');
app.Logger.LogInformation('<4>Warning (4) severity > warning conditions.');
app.Logger.LogInformation('<5>Notice (5) severity > normal, but significant, condition.');
app.Logger.LogInformation('<6>Informational (6) severity > informational message.');
app.Logger.LogInformation('<7>Debug (7) severity > debug-level message.');
```

:::info

`logger.LogTrace`, `logger.LogInformation`,
`logger.LogWarning`, `logger.LogDebug`, `
  logger.LogError
` and `logger.LogCritical` are just aliases to the `
  logger.LogInformation
` method. They don't set the appropriate severity number. Use the `
  &lt;N&gt;
` prefix instead. :::




Zerops performs an automated scaling of hardware resources required to run your runtime application based on its usage. If the current use of your application does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your application is under heavy load or needs to store more data, then auto scaling increases the resources to make sure it runs smoothly.

## Vertical and horizontal auto scaling

Each application you deploy starts with the minimum hardware resources: **CPU** cores, **RAM** and **Disk**. Zerops monitors the usage of these 3 resources and if the usage exceeds a set threshold, more CPU cores, RAM or Disk is allocated to the service. This is called **vertical scaling**.


<p align="center">
  <Image
    lightImage="/img/gui/resources.webp"
    darkImage="/img/gui/resources.webp"
    alt="Resources of a Zerops service"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

**Horizontal scaling** adds or removes whole containers.

Zerops has a preference for vertical scaling because it's faster and more precise. If the vertical auto scaling hits the defined maximum a new container is started automatically. When your application doesn't need so much power and all containers are vertically scaled down, Zerops will gradually remove whole containers.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling2.png"
    darkImage="/img/screenshots/scaling2.png"
    alt="Scaling Resources"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Configure auto scaling

To change the auto scaling settings go to the .NET service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### CPU mode

#### Shared

Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

#### Dedicated

The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

.NET service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the .NET service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient .NET performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your .NET service. When your .NET service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

.NET service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your application starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your application.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your application doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

By default Zerops keeps a minimum free RAM in each container. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your application need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 0.125 GB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the application is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each .NET service. Zerops will never scale above the entered values. If your application is in [highly available mode], maximal resources are identical for all containers of the .NET service.

### Not enough resources to scale up

If one of the .NET containers needs more resources but there are not enough of them on the underlying machine, a new container with the required hardware resources will be started on another machine. When the new container is ready, it will be added to the service balancer. The old container will be removed from the balancer and deleted.

### Automatic scale down

When the application no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the application from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal autoscaling

Zerops prefers vertical scaling over horizontal scaling because vertical scaling is faster and allows finer adjustment to the required performance. Horizontal scaling can be disabled by setting the same number for the minimum and maximum container count. Zerops will then scale the .NET service only vertically.

Your application is created with the defined minimum number of containers. Zerops will add a new container when any of the service's containers reaches the maximum limit for vertical scaling for CPU cores or RAM. Zerops doesn't start a new container when the maximum disk space is reached. No more containers are added when the defined maximum container limit is reached.

The new container is started with a minimum disk size and with an average CPU cores and RAM of the existing containers.

By customising the vertical auto scaling limits, you can cause the horizontal scaling to start earlier. For example if you lower the vertical auto scaling maximum to 1 CPU core, Zerops will start a new container if some of the running containers are using the whole CPU core for more than 20 seconds.

If the application no longer needs as much power, Zerops will gradually remove containers to the defined minimum count. The container is removed after its CPU cores are scaled down to the defined minimum and the free CPU is safely above the minimum threshold for vertical scaling. Zerops only **removes containers** with a minimum **15 minute lifetime**.

## Monitor .NET resources

Zerops provides information about how much hardware resources the .NET service is currently using. Go to the service detail in Zerops GUI and select **Service dashboard & runtime containers** in the left menu. Zerops also provides the history of resource usage.



Zerops provides [shared storage service](/shared-storage/overview) that can be connected to runtime services. Shared storage enables your runtime service to share files between all containers of the same service or even among containers of different runtime services.

## Connect a shared storage in Zerops GUI

Connect your .NET service directly when creating a new shared storage service. Just select your .NET service in the **Share with Services** block on the **Add new shared storage service** page.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_1.png)

To connect the existing shared storage to the .NET service, go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Select a runtime service and the shared storage will be connected to the selected runtime.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_2.png)

Zerops will create a new folder `/mnt/[shared storage name]`` in the runtime root folder. E.g. `/mnt/teststorage`for a`teststorage` shared storage. The content of this folder is shared among all containers of the runtime service you've selected. If you select multiple runtimes, the content of the folder will be shared among all containers of selected services.

## Disconnect a shared storage in Zerops GUI

Go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Switch off the toggle to disconnect the shared storage from the selected runtime.

:::note
Your runtime service will be automatically restarted when a shared storage is disconnected.
:::

## Create .NET service with a shared storage using zCLI

zCLI is the Zerops command-line tool. To create a new .NET service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/dotnet/how-to/shared-storage#create-a-project-description-file)
3. [Create a project with a .NET service and a shared storage](/dotnet/how-to/shared-storage#create-a-project-with-a-net-service-and-a-shared-storage)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### description.yaml format

[Read the basics](/dotnet/how-to/create#create-a-project-description-file) how to define the .NET service using the description.yaml.

#### Example with a shared storage

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project

  # optional: project description
  description: A project with a .NET and a shared storage

  # optional: project tags
  tags:
    - DEMO
    - ZEROPS

# array of project services
services:
  - # service name
    hostname: teststorage

    # shared storage service has no version
    type: shared-storage

    # mode: HA / NON_HA
    mode: NON_HA

  - # service name
    hostname: app

    # service type and version number in dotnet@6 format
    type: dotnet@6

    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2

    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4

    # Mount the shared storage to the .NET service
    mount:
      - teststorage
```

The mount attribute accepts an array of shared storage names you want to mount to your runtime service.

### Create a project with a .NET service and a shared storage

Follow the article [How to create a project based on the description.yaml](/dotnet/how-to/create#create-a-project-based-on-the-descriptionyaml).




<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-1.webp"
    darkImage="/img/mind-maps/build-deploy/step-1-dark.webp"
    alt="build deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Automatic builds and deploys from GitHub or GitLab

Integrate Zerops to your GitHub or GitLab repository and configure the automatic builds and deploys.

Follow these steps:

1. Add [zerops.yaml](/dotnet/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository.
2. Connect your GitHub repository or connect your GitLab repository

Then each time you create a new tag or push to a specific branch, depending on the configuration, GitHub or GitLab will initiate a new build & deploy pipeline.

<p align="center">
  <Image
    lightImage="/img/gui/github-integration.webp"
    darkImage="/img/gui/github-integration.webp"
    alt="github integration"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

### Skip the automatic pipeline once

To ensure that a pipeline is not triggered by your next push, add `[ci skip]` or `[skip ci]` to the commit message. It is case insensitive.

:::note
You will still see a successful delivery of a webhook in your Github/Gitlab repository as a webhook is actually triggered, but with no action.
:::

## Manual builds and deploys using Zerops CLI

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    darkImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    alt="Manual Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

To start a new build & deploy pipeline manually, use the Zerops CLI.

Follow these steps:

1. Add <a href="/dotnet/how-to/build-pipeline#add-zeropsyaml-to-your-repository">`zerops.yaml`</a> to your repository.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli push` command.

The `zcli push` command uploads your application code, builds and deploys your application in Zerops.

The command triggers the [build pipeline](/dotnet/how-to/trigger-pipeline) defined in `zerops.yaml`. `zerops.yaml` must be in the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

zCLI uploads all files and subdirectories of the working directory to Zerops and starts the build pipeline. If the `.gitignore` file is found, it is interpreted and the defined files and folders will be ignored.

If you just want to deploy your application to Zerops, use the [zcli deploy](#manual-deploy-using-zerops-cli) command instead.

#### Push command parameters

```sh
Usage:
  zcli push [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.
  -h, --help                     the service push command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

zCLI commands are interactive, when you press enter after `zcli push`, you will be given a list of your projects to choose from.

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

## Manual deploy using Zerops CLI

To start only a deploy pipeline, use the Zerops CLI.

Follow these steps:

1. Add [zerops.yaml](/dotnet/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository. Omit the build section.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli service deploy` command.

The `zcli service deploy` command uploads your application and deploys it in Zerops. Use this tool if you have your own build process. If you want to build your application in Zerops, use an [automatic](#automatic-builds-and-deploys-from-github-or-gitlab) or [manual](#manual-builds-and-deploys-using-zerops-cli) build process.

#### Deploy command parameters

```sh
Usage:
  zcli service deploy pathToFileOrDir [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
  -h, --help                     the service deploy command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

`pathToFileOrDir` defines a path to one or more directories and/or files relative to the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

`zerops.yaml` must be placed in the working directory.

:::info
You can change the deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your working directory.
:::



You can upgrade or downgrade your .NET service to a different major .NET version by setting the <a href="/dotnet/how-to/build-pipeline#base-1">`run.base`</a> parameter in your `zerops.yaml`. When you [trigger a new pipeline](/dotnet/how-to/trigger-pipeline), Zerops will start new runtime container(s) with the required .NET version. If you don't specify the `run.base` attribute in your `zerops.yaml`, Zerops keeps the current .NET version for your runtime.

If you want to build your application with a different major .NET version, change the <a href="/dotnet/how-to/build-pipeline#base">`build.base`</a> parameter in your `zerops.yaml`. The `build.base` is the required attribute.





[.NET ↗](https://dotnet.microsoft.com/en-us/) is the free, open-source, cross-platform framework for building modern apps and powerful cloud services..

As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-dotnet-hello-world), a **_recipe_**, containing the most simple .NET web application. The repo will be used as a source from which the app will be built.

<CustomCard title="Feel free to deploy the recipe yourself" emoji="🚀">
  This is the most bare-bones example of .NET running on Zerops — as few libraries as possible,
  just a simple endpoint with connect, read and write to a Zerops PostgreSQL database.

  <DeployButton link="dotnet" badgeWidth="200" />
</CustomCard>

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)
2. In the **Projects** box click on **Import a project** and paste in the following YAML config ([source ↗](https://github.com/zeropsio/recipe-dotnet-hello-world/blob/main/import-project/description.yaml)):

```yaml
project:
  name: my-first-project
services:
  - hostname: helloworld
    type: dotnet@latest
    minContainers: 1
    maxContainers: 3
    buildFromGit: https://github.com/zeropsio/recipe-dotnet-hello-world@main
    enableSubdomainAccess: true
```

3. Click on **Import project** and wait until all pipelines have finished.

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://helloworld-24-8080.prg1.zerops.app`.
2. Click or the `subdomain` URL to open it in a browser and you should see

```
Hello, World!
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::

## How to start

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/dotnet/getting-started',
      label: 'New to Zerops?',
      customProps: {
        icon: Icons['rocket-launch'],
        description: 'Learn the basics by following a simple example.',
      },
    },
    {
      type: 'link',
      href: '/dotnet/how-to/create',
      label: 'Care for details?',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description:
          'Dive in all Zerops has to offer for your .NET application.',
      },
    },
  ]}
/>

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/dotnet/how-to/create',
      label: 'Create .NET service',
      customProps: {
        icon: Icons['dotnet'],
        description: 'Start with creating a .NET service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: '/dotnet/how-to/build-pipeline#add-zeropsyaml-to-your-repository',
      label: 'zerops.yaml',
      customProps: {
        icon: Icons['puzzle'],
        description:
          'See a full example of zerops.yaml file to create your own app.',
      },
    },
    {
      type: 'link',
      href: '/dotnet/how-to/scaling',
      label: 'Scaling configuration',
      customProps: {
        icon: Icons['adjustments'],
        description:
          'Set up scaling of your .NET application so that it runs smoothly while using only necessary resources.',
      },
    },
  ]}
/>

{" "}

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/dotnet/how-to/build-process#customize-net-build-environment',
      label: 'Customize build environment',
      customProps: {
        icon: Icons['sparkles'],
      },
    },
    {
      type: 'link',
      href: '/dotnet/how-to/customize-runtime',
      label: 'Customize runtime environment',
      customProps: {
        icon: Icons['sparkles-solid'],
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/dotnet/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>



Deploy [Elasticsearch] instances in Zerops with flexible scaling options, from standalone to highly available clusters.

## Connection

- **Port**: 9200
- **Protocol**: HTTP only
- **Internal Access**: `http://hostname:9200`
- **Note**: When accessing from another service within the same project, use the service hostname <!-- fixme (js) add link to generic DNS page -->

## Configuration

### How to install/uninstall plugins

Configure Elasticsearch plugins using a comma-separated list:

```yaml
envSecrets:
  PLUGINS: "analysis-icu,ingest-attachment"
```

- **Description**: Defines plugins to install at startup
- **Format**: `plugin1,plugin2,...`
- **Note**: Removing a plugin from this list triggers uninstallation on service restart

### How to adjust JVM heap allocation

Control JVM heap size as a percentage of container memory:

```yaml
envSecrets:
  HEAP_PERCENT: "75"
```

- **Description**: Percentage of container memory allocated to JVM heap
- **Default**: 50
- **Range**: 1-100
- **Note**: To increase available memory, adjust the service's RAM allocation in scaling configuration <!-- fixme (js) add link to generic scaling page -->
- **Important**: Changes to HEAP_PERCENT require a service restart to take effect

## Backup

- **Format:** .gz
- **Implementation:** Created using elasticdump and compressed using gzip

For detailed information about backup configuration and management, see [Backup Management](/features/backup)

## Example Configuration

```yaml
services:
  - hostname: elasticsearch
    type: elasticsearch@8.16
    mode: HA
    envSecrets:
      PLUGINS: "analysis-icu,ingest-attachment"
      HEAP_PERCENT: "75"
```

## Related Resources

- [Elasticsearch Official Documentation](https://www.elastic.co/guide/index.html)
- [Available Elasticsearch Plugins](https://www.elastic.co/guide/en/elasticsearch/plugins/current/index.html)



<FAQ>
  <FAQItem question="Sample Question">sample answer</FAQItem>
</FAQ>




This quick start allows you to get hands-on experience of Zerops, whether you only want to see it in action or want to start small and scale up the project size later. The purpose of this guide is to get an existing Elixir application up and running easily.

If you are already familiar with Zerops and you are interested in more detailed guides for your own application, feel free to head straight to the [How to](/elixir/how-to/create) section.

## Guides

We have created a repository, a _recipe_, containing the most simple Elixir web application, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics with one-service app.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-elixir',
      label: 'Elixir + SQL database',
      customProps: {
        icon: Icons['github'],
        description: 'A more complex, multi-service application example.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=elixir&type=all&language=&sort=',
      label: 'All Elixir recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspired.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



## Private internal access

Projects in Zerops represent a group of one or more services.
Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its [internal port](/elixir/how-to/build-pipeline#ports).

To connect to your application with `app` hostname running on [internal port](/elixir/how-to/build-pipeline#ports) `3000`, simply use `http://app:3000`

:::info
Do not use `https://` when communicating with Elixir from other runtime services in the same project. The internal communication is done over a private network and is isolated from other projects.
:::

### Use Elixir environment variables

Zerops creates default environment variables for each Elixir service to help you with connection within the same project. To avoid the need to copy the access parameters manually, use [generated environment variables](/elixir/how-to/env-variables#generated-env-variables) of the Elixir service.

#### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Example:

To access the `API_TOKEN` env variable of the `app` service, use `app_API_TOKEN` as the env variable key.

Read more about [env variables](/elixir/how-to/env-variables).

## Private access via VPN

### Start VPN connection

You can securely connect to your Elixir application from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)

### Access Elixir application through VPN

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/elixir/how-to/env-variables) are available when connected through VPN. To connect to your Elixir application in Zerops set the hostname and [internal port](/elixir/how-to/build-pipeline#ports) e.g. http://app:3000

:::info
Do not use `https://` when communicating with Elixir over the VPN. The security is assured by the VPN. The internal communication is done over a private network and is isolated from other projects.
:::

### Connect via SSH

Use the <a href="/references/ssh">`ssh` command</a> to connect to your service via SSH.

### Stop VPN connection

[Stop the Zerops VPN](/references/vpn#stop-vpn) in zCLI.

## Public access through zerops.io subdomain

By default, your Elixir service is not publicly accessible. To test your application, enable the [public access through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain).

## Public access through your domain

By default, your Elixir service is not publicly accessible. When your application is ready for production or if you want to test it on the production domain, [configure the public access through your domain](/features/access#public-access-through-your-domain).

## Public access from another Zerops project

All services of the same project share a dedicated private network. To connect to a service within the same project, just use the service hostname and its [internal port](/elixir/how-to/build-pipeline#ports). Different projects are not connected inside Zerops. To connect to a runtime service from another Zerops project, you need to use public access either [through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain) or [through your domain](/features/access#public-access-through-your-domain).





Zerops provides a customizable build and runtime environment for your Elixir application.

## Add zerops.yaml to your repository

Start by adding `zerops.yaml` file to the **root of your repository** and modify it to fit your application:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: elixir@latest

      # OPTIONAL. Set the operating system for the build environment.
      # os: ubuntu

      # OPTIONAL. Customise the build environment by installing additional packages
      # or tools to the base build environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # REQUIRED. Build your application
      buildCommands:
        - mix deps.get --only prod
        - mix compile
        - mix release

      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles: _build/prod/rel/app/

      # OPTIONAL. Which files / folders you want to cache for the next build.
      # Next builds will be faster when the cache is used.
      cache: node_modules

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base: elixir@latest

      # OPTIONAL. Sets the internal port(s) your app listens on:
      ports:
        # port number
        - port: 3000

      # OPTIONAL. Customise the runtime Elixir environment by installing additional
      # dependencies to the base Elixir runtime environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Elixir application is started.
      # initCommands:
      #  - rm -rf ./cache

      # REQUIRED. Your Elixir application start command
      start: npm start
```

The top-level element is always `zerops`.

### Setup

The first element `setup` contains the **hostname** of your service. A runtime service with the same hostname must exist in Zerops.
Zerops supports the definition of multiple runtime services in a single `zerops.yaml`. This is useful when you use a monorepo. Just add multiple setup elements in your `zerops.yaml`:

```yaml
zerops:
  # definition for app service
  - setup: app
    build: ...
    run: ...

  # definition for api service
  - setup: api
    build: ...
    run: ...
```

Each service configuration contains at least two sections: **build** and **run**. Both sections are required to build and deploy your Elixir application in Zerops. If you'd like to use a readiness check, add an optional **deploy** section.

## Build pipeline configuration

### base

_REQUIRED._ Sets the base technology for the build environment.

Following options are available for Elixir builds:

<UnorderedCodeList data={data.elixir.readable} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: elixir@latest
      ...
```

<p>
  The base build environment contains {data.alpine.default}, the selected
  major version of Elixir, <a href="/references/cli">Zerops command line tool</a>, `npm`, `yarn`, `git` and `npx` tools.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the build environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base:
        - elixir@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [build base environments](/zerops-yaml/base-list#runtime-services).

To customise your build environment use the [prepareCommands](/elixir/how-to/build-pipeline#preparecommands) attribute.

:::note
Modifying the base technology will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for more details about cache invalidation.
:::

### os

_OPTIONAL._ Sets the operating system for the build environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customised.
:::

:::note
Changing the OS setting will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache behavior.
:::

### prepareCommands

_OPTIONAL._ Customises the build environment by installing additional dependencies or tools to the base build environment.

The base build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Elixir defined in the [base](/elixir/how-to/build-pipeline#base) attribute
- [Zerops command line tool](/references/cli)
- `npm`, `yarn`, `git` and `npx` tools

To install additional packages or tools add one or more prepare commands:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: elixir@latest

      # OPTIONAL. Customise the build environment by installing additional packages
      # or tools to the base build environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first build is triggered, Zerops will

1. create a build container
2. download your application code from your repository
3. run the prepare commands in the defined order

The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).

:::note
These commands are skipped when using cached environment. Modifying `prepareCommands` will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache invalidation.
:::

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/elixir/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all prepare commands are finished, your custom build environment is ready for the build phase.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### buildCommands

_REQUIRED._ Defines build commands.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: elixir@latest

      # REQUIRED. Build your application
      buildCommands:
        - npm i
        - npm run build
      ...
```

At least one command is required. Zerops triggers each command in the defined order in a dedicated build container.

Before the build commands are triggered the build container contains:

1. base environment defined by the [base](/elixir/how-to/build-pipeline#base) attribute
2. optional customisation of the base environment defined in the [prepareCommands](/elixir/how-to/build-pipeline#preparecommands) attribute
3. your application code

#### Run build commands as a single shell instance

Use following syntax to run all commands in the same environment context. For example, if one command changes the current directory, the next command continues in that directory. When one command creates an environment variable, the next command can access it.

```yaml
buildCommands:
  - |
    npm i
    npm run build
```

#### Run build commands as a separate shell instances

When the following syntax is used, each command is triggered in a separate environment context. For example, each shell instance starts in the home directory again. When one command creates an environment variable, it won't be available for the next command.

```yaml
buildCommands:
  - npm i
  - npm run build
```

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/elixir/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the --verbose option.

```yaml
buildCommands:
  - npm i --verbose
  - npm run build
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the deploy phase.

### deployFiles

_REQUIRED._ Selects which files or folders will be deployed after the build has successfully finished. To filter out specific files or folders, use <a href="#deployignore">`.deployignore`</a> file.

```yaml
# REQUIRED. Select which files / folders to deploy after
# the build has successfully finished
deployFiles:
  - dist
  - package.json
  - node_modules
```

Determines files or folders produced by your build, which should be deployed to your runtime service containers.

The path starts from the **root directory** of your project (the location of `zerops.yaml`). You must enclose the name in quotes if the folder or the file name contains a space.

The files/folders will be placed into `/var/www` folder in runtime, e.g. `./src/assets/fonts` would result in `/var/www/src/assets/fonts`.

#### Examples

Deploys a folder, and a file from the project root directory:

```yaml
deployFiles:
  - dist
  - package.json
```

Deploys the whole content of the build container:

```yaml
deployFiles: .
```

Deploys a folder, and a file in a defined path:

```yaml
deployFiles:
  - ./path/to/file.txt
  - ./path/to/dir/
```

#### How to use a wildcard in the path

Zerops supports the `~` character as a wildcard for one or more folders in the path.

Deploys all `file.txt` files that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/file.txt
```

Deploys all folders that are located in any path that begins with `/path/to/`

```yaml
deployFiles: ./path/to/~/
```

Deploys all folders that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/
```

:::note Example
By default, `./src/assets/fonts` deploys to `/var/www/src/assets/fonts`, keeping the full path. Adding `~`, like `./src/assets/~fonts`, shortens it to `/var/www/fonts`
:::
#### .deployignore

Add a `.deployignore` file to the root of your project to specify which files and folders Zerops should ignore during deploy. The syntax follows the same pattern format as <a href="https://git-scm.com/docs/gitignore#_pattern_format">`.gitignore`</a>.

To ignore a specific file or directory path, start the pattern with a forward slash (`/`). Without the leading slash, the pattern will match files with that name in any directory.

:::tip
For consistency, it's recommended to configure both your `.gitignore` and `.deployignore` files with the same patterns.
:::

Examples:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      deployFiles: ./
```

```text title=".deployignore"
/src/file.txt
```
The example above ignores `file.txt` only in the root src directory.
```text title=".deployignore"
src/file.txt
```
This example above ignores `file.txt` in ANY directory named `src`, such as:
- `/src/file.txt`
- `/folder2/folder3/src/file.txt`
- `/src/src/file.txt`

:::note
`.deployignore` file also works with <a href="/references/cli/commands#deploy">`zcli service deploy`</a> command.
:::

### cache

_OPTIONAL._ Defines which files or folders will be cached for the next build.

```yaml
# OPTIONAL. Which files / folders you want to cache for the next build.
# Next builds will be faster when the cache is used.
cache: file.txt
```

The cache attribute helps optimize build times by preserving specified files between builds.

The cache attribute supports the [~ wildcard character](#how-to-use-a-wildcard-in-the-path).

Learn more about the [build cache system](/features/build-cache) in Zerops.

### envVariables

_OPTIONAL._ Defines the environment variables for the build environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      base: elixir@latest
        …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/elixir/how-to/env-variables) in Zerops.

## Runtime configuration

### base

_OPTIONAL._ Sets the base technology for the runtime environment.
If you don't specify the `run.base` attribute, Zerops keeps the current Elixir version for your runtime.

Following options are available for Elixir builds:

<UnorderedCodeList data={data.elixir.readable} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: elixir@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
        base: elixir@latest
      ...
```

<p>
  The base runtime environment contains {data.alpine.default}, the
  selected major version of Elixir, Zerops command line tool, `npm`, `yarn`, `git` and `npx` tools.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the runtime environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: elixir@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base:
        - elixir@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [run base environments](/zerops-yaml/base-list).

To customise your build environment use the `prepareCommands` attribute.

### os

_OPTIONAL._ Sets the operating system for the runtime environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customised.
:::

### ports

_OPTIONAL._ Specifies one or more internal ports on which your application will listen.

Projects in Zerops represent a group of one or more services. Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its internal port.

For example, to connect to a Elixir service with hostname = "app" and port = 3000 from another service of the same project, simply use `app:3000`. Read more about [how to access a Elixir service](/elixir/how-to/access).

Each port has following attributes:

| parameter   | description                                                                                                                                                                                                                                                                                                            |
| ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| port        | Defines the port number. You can set any port number between _10_ and _65435_. Ports outside this interval are reserved for internal Zerops systems.                                                                                                                                                                   |
| protocol    | **Optional.** Defines the protocol. Allowed values are `TCP` or `UDP`. Default value is `TCP`.                                                                                                                                                                                                                         |
| httpSupport | **Optional.** `httpSupport = true` is the default setting for TCP protocol. Set `httpSupport = false` if a web server isn't running on the port. Zerops uses this information for the configuration of [public access](/features/access). `httpSupport = true` is available only in combination with the TCP protocol. |

### prepareCommands

_OPTIONAL._ Customises the Elixir runtime environment by installing additional dependencies or tools to the runtime base environment.

<p>
  The base Elixir environment contains {data.alpine.default} the selected
  major version of Elixir, <a href="/references/cli">Zerops command line tool</a> and `npm`, `yarn`, `git` and `npx` tools. To install
  additional packages or tools add one or more prepare commands:
</p>

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Elixir runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first deploy with a defined prepare attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/elixir/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `prepareCommands` commands in the defined order

#### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/elixir/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

#### Cache of your custom runtime environment

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the [build.addToRunPrepare](#copy-folders-or-files-from-your-build-container) and `run.prepareCommands` attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the custom runtime cache go to `yyy`

{/*TODO screenshot*/}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### Copy folders or files from your build container

<p>
  The prepare runtime container contains {data.alpine.default}, the
  selected major version of Elixir, <a href="/references/cli">Zerops command line tool</a> and `npm`, `yarn`, `git` and `npx` tools.
</p>

The prepare runtime container does not contain your application code nor the built application. If you need to copy some folders or files from the build container to the runtime container (e.g. a configuration file) use the `addToRunPrepare` attribute in the [build section](#build-pipeline-configuration).

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...
      addToRunPrepare: ./runtime-config.yaml

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Elixir runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

In the example above Zerops will copy the `runtime-config.yaml` file from your build container **after the build has finished** into the new **prepare runtime** container. The copied files and folders will be available in the `xxx` folder in the new prepare runtime container before the prepare commands are triggered.

### initCommands

_OPTIONAL._ Defines one or more commands to be run each time a new runtime container is started or a container is restarted.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Elixir application is started.
      initCommands:
        - rm -rf ./cache
```

These commands are triggered in the runtime container before your Elixir application is started via the [start command](/elixir/how-to/build-pipeline#start).

Use init commands to clean or initialise your application cache or similar operations.

:::caution
The init commands will delay the start of your application each time a new runtime container is started (including the [horizontal scaling](/elixir/how-to/scaling#horizontal-auto-scaling) or when a runtime container is restarted).

Do not use the init commands for customising your runtime environment. Use the [run:prepareCommands](/elixir/how-to/build-pipeline#preparecommands-1) attribute instead.
:::

#### Command exit code

If any of the `initCommands` fails, it returns an exit code other than 0, but deploy is **not** canceled. After all init commands are finished, regardless of the status code, the application is started. Read the [runtime log](/elixir/how-to/logs#runtime-log) to troubleshoot the error.

#### Single or separated shell instances

You can configure your `initCommands` to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### envVariables

_OPTIONAL._ Defines the environment variables for the runtime environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to run your application ====
    run:
      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/elixir/how-to/env-variables) in Zerops.

### start

_REQUIRED._ Defines the start command for your Elixir application.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Elixir application start command
      start: npm start
```

We recommend starting your Elixir application using `npm start`.

### health check

_OPTIONAL._ Defines a health check.

`healthCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the health check to request a local URL using a HTTP GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Elixir application start command
      start: npm start

      # OPTIONAL. Define a health check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      healthCheck:
        httpGet:
          port: 80
          path: /status
```

Read more about how the [health check works] in Zerops.

#### exec

Configures the health check to run a local command.
Following attributes are available:

| Parameter   | Description                                                                                                                                                                                                                                                                                                                     |
| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **command** | Defines a local command to be run.<br/>The command has access to the same [environment variables](/elixir/how-to/create#set-secret-environment-variables) as your Elixir application.<br/>A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below. |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Elixir application start command
      start: npm start

      # OPTIONAL. Define a health check with a shell command.
      healthCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [health check works] in Zerops.

### crontab

_OPTIONAL._ Defines cron jobs.

Setup cron jobs in the following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app

    # ==== how to run your application ====
    run:
      crontab:
        # REQUIRED. Sets the command to execute:
        - command: ""
        # REQUIRED. Sets the interval time to execute:
          timing: "0 * * * *"
```

Read more about setting up [cron](/references/cron) in Zerops.

## Deploy configuration

### readiness check

_OPTIONAL._ Defines a readiness check. Read more about how the [readiness check works](/elixir/how-to/deploy-process#readiness-checks) in Zerops.

`readinessCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the readiness check to request a local URL using a http GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        httpGet:
          port: 80
          path: /status

    # ==== how to run your application ====
    run: ...
```

Read more about how the [readiness check works](/elixir/how-to/deploy-process#readiness-checks) in Zerops.

#### exec

Configures the readiness check to run a local command.
Following attributes are available:

| Parameter   | Description                                                                                                                                                                                                                                                                                                                     |
| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **command** | Defines a local command to be run.<br/>The command has access to the same [environment variables](/elixir/how-to/create#set-secret-environment-variables) as your Elixir application.<br/>A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below. |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [readiness check works](/elixir/how-to/deploy-process#readiness-checks) in Zerops.




<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Description of the build process

Zerops starts a temporary build container and performs following actions:

1. Installs the build environment:
   - Sets up base system and Go runtime
   - Restores cached files if available (based on `build.cache` configuration)
   - Validates cache against current `build.os`, `build.base`, and `build.prepareCommands`
2. Downloads your application source code from [GitHub ↗](https://www.github.com), [GitLab ↗](https://www.gitlab.com) or via [Zerops CLI](/references/cli)
3. Optionally [customizes the build environment](#customize-elixir-build-environment)
4. Runs the build commands
5. Uploads the application artefact to the internal Zerops storage
6. Preserves specified files for future builds (based on `build.cache` configuration)
7. Optionally [customizes the runtime environment](/elixir/how-to/customize-runtime)
8. [Deploys your application](/elixir/how-to/deploy-process)

The build container is automatically deleted after the build has finished or failed.

## Cancel running build

When you know that the running build is not correct and you want to cancel it, you can do it in Zerops GUI. Go to the service detail, open the list of running processes and click on the **Open pipeline detail** button. Then click on the **Cancel build** button.

<p align="center">
  <img
    src="/img/screenshots/cancel_running_build.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

:::caution
The build cancellation is available before the build pipeline is finished. When the build is finished, the deployment cannot be cancelled.
:::

## Customize Elixir build environment

The default Elixir build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Elixir defined in `zerops.yaml` [build.base](/elixir/how-to/build-pipeline#base) parameter
- [zCLI](/references/cli), Zerops command line tool
- `npm`, `yarn`, `git` and `npx` tools

If you prefer the Ubuntu OS instead of Alpine, set the [build.os](/elixir/how-to/build-pipeline#os) attribute to `ubuntu`. To install additional packages or tools add one or more [build.prepareCommands](/elixir/how-to/build-pipeline#preparecommands) commands to your `zerops.yaml`.

:::info
The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).
:::

## Elixir build hardware resources

Build of your Elixir application is run in a separate build container with following resource configuration:

| HW resource   | Minimum | Maximum |
| ------------- | ------- | ------- |
| **CPU cores** | 6       | 20      |
| **RAM**       | 8 GB    | 8 GB    |
| **Disk**      | 1 GB    | 100 GB  |

The build container is always started with the minimum hardware resources and scales vertically up to the maximum resources.

:::info
Hardware resources of the build containers are not charged. The build costs are covered by the standard Zerops [project fee](https://zerops.io/#pricing).
:::

## Build time limit

The time limit for the whole build pipeline is **1 hour**. After 1 hour, Zerops will terminate the build pipeline and delete the build container.

## Troubleshooting build-related problems

### Failure of a build prepare command

If any [prepare command](/elixir/how-to/build-pipeline#preparecommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/elixir/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom build environment is ready for the build phase.

### Invalidate the build cache
If you encounter unexpected build behavior or dependency issues, the problem might be related to [cached build data](/features/build-cache). While Zerops maintains the build cache to speed up deployments, sometimes you may need to start fresh.
To invalidate the build cache:

1. Go to your service detail in Zerops GUI
2. Choose **Pipelines & CI/CD Settings** from the left menu
3. Click on the **Invalidate build cache** button

This will force Zerops to run the next build clean, including all prepare commands, which can help resolve cache-related issues. After invalidation, your next build will also create a fresh cache.

### Failure of a build command

If any [build command](/elixir/how-to/build-pipeline#buildcommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/elixir/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the `--verbose` option.

```yaml
buildCommands:
  - npm i --verbose
  - npm run build
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the [deploy](/elixir/how-to/deploy-process) phase.



Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart Elixir service in Zerops GUI

To stop the Elixir service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)*/}

To start the stopped Elixir service choose the **Start** item from the same menu.

To restart the Elixir service choose the **Restart** item from the same menu.

## Stop and start Elixir using zCLI

zCLI is the Zerops command-line tool. To stop and start the Elixir service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and services to choose from.
:::




Zerops provides a powerful Elixir runtime service with extensive build support. The Elixir runtime is highly scalable and customizable to suit your development and production needs. With just a few clicks or commands, you can have a production-ready Elixir environment up and running in no time.

## Create a Elixir service using Zerops GUI

First, set up a project in the Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu under the **Services** section. From there, you can add a new Elixir service:

<Video
  src="/vids/services/elixir.webm"
  type="video/webm"
/>

### Choose a Elixir version

Zerops supports the following Elixir versions:

<UnorderedList data={data.elixir.readable} />

:::info
You can easily [upgrade](/elixir/how-to/upgrade) the major version at any time later.
:::

### Set a hostname

Enter a unique service identifier like "app", "cache", "gui", etc. Duplicate services with the same name within the same project are not allowed.

#### Limitations:

- Maximum 25 characters
- Must contain only lowercase ASCII letters (a-z) or numbers (0-9)

:::caution
The hostname is fixed after the service is created and cannot be changed later.
:::

### Set secret environment variables

Add environment variables with sensitive data, such as passwords, tokens, salts, certificates, etc. These will be securely saved inside Zerops and added to your runtime service upon start.

Setting secret environment variables is optional. You can always set them later in the Zerops GUI.

Read more about the [different types of environment variables](/elixir/how-to/env-variables#types-of-env-variables-in-zerops) in Zerops.

### Configure auto scaling

Zerops automatically scales Elixir services both vertically and horizontally. Vertical scaling adjusts the hardware resources (CPU, RAM, and disk) of a Elixir container, while horizontal scaling adds or removes entire containers.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. The power your application receives depends on the other applications running on the same CPU core. In the best-case scenario, your application gets 10/10 of the CPU core power, and 1/10 in the worst-case scenario.

**Dedicated**
The CPU core is dedicated exclusively to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

You can choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto scaling

Vertical auto scaling has the following default configuration:

<ResourceTable />

Elixir services always start with the minimal resources.

In most cases, the default parameters will work without issues. If you need to limit the cost of the Elixir service, you can lower the maximum resources. Zerops will never scale above the selected maximums.

If you experience insufficient Elixir performance or capacity, you can increase the minimum resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine-tune](/elixir/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application's needs.
:::

:::info
You can change the vertical auto scaling parameters at any time.
:::

#### Horizontal auto scaling

When a container needs more CPU or RAM but is already consuming the maximum resources defined for vertical auto scaling, Zerops will add a new container to your Elixir service. When your Elixir service doesn't need as much power and all containers are vertically scaled down such that their CPU allocation is near the minimum resources, Zerops will gradually remove entire containers.

Horizontal auto scaling has the following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>Minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>Maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Elixir services always start with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

[Learn more](/elixir/how-to/scaling) about Elixir auto scaling in Zerops.

#### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will automatically start a new container and deploy your application. However, the application will be unavailable for a short period. This mode is recommended for non-critical applications or development environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers based on your application's load. An application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed down to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents temporary outages in case any of the Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically, and the broken container will be deleted.

:::caution
Make sure your application is designed to run in multiple containers.
:::

## Create a Elixir service using zCLI

zCLI is the Zerops command-line tool. To create a new Elixir service via the command line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/elixir/how-to/create#create-a-project-description-file)
3. [Create a project with a Elixir and PostgreSQL service](#full-example)

### Create a project description file

Zerops uses a YAML format to describe the project infrastructure.

#### Basic example:

Create a directory called `my-project`. Inside the `my-project` directory, create a `description.yaml` file with the following content:
```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in elixir@{version} format
    type: elixir@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes your future project infrastructure. The project will contain one Elixir version 20 service with default [auto scaling](/elixir/how-to/scaling) configuration. Hostname will be set to "app", the internal port(s) the service listens on will be defined later in the [zerops.yaml](/elixir/how-to/build-pipeline#ports). Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

#### Full example:

Create a directory my-project. Create an description.yaml file inside the my-project directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a Elixir and PostgreSQL database
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in elixir@{version} format
    type: elixir@latest
    # optional: vertical auto scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
  - # second service hostname
    hostname: db
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"non_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain a Elixir service and a [PostgreSQL](/postgresql/overview) service.

Elixir service with "app" hostname, the internal port(s) the service listens on will be defined later in the [zerops.yaml](/elixir/how-to/build-pipeline#ports). Elixir service will run on version 20 with a custom vertical and horizontal scaling. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The hostname of the PostgreSQL service will be set to "db". The [single container](/postgresql/how-to/create#single-container) mode will be chosen and the default [auto scaling configuration](/postgresql/how-to/create#set-auto-scaling-configuration) will be set.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

| Parameter       | Description                                                                                                                     | Limitations             |
| --------------- | ------------------------------------------------------------------------------------------------------------------------------- | ----------------------- |
| **name**        | The name of the new project. Duplicates are allowed.                                                                            |                         |
| **description** | **Optional.** Description of the new project.                                                                                   | Maximum 255 characters. |
| **tags**        | **Optional.** One or more string tags. Tags do not have a functional meaning, they only provide better orientation in projects. |

At least one service in `services:` section is required. You can create a project with multiple services. The example above contains Elixir and PostgreSQL services but you can create a `description.yaml` with your own combination of [services](/features/infrastructure).

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit">Parameter</th>
      <th className="w-fit">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">
        <b>hostname</b>
      </td>
      <td className="w-fit">
        The unique service identifier.
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>type</b>
      </td>
      <td className="w-fit">
        Specifies the service type and version.
        <br />
        See what [Elixir service types](/references/import-yaml/type-list#runtime-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>verticalAutoscaling</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Defines <a href="/elixir/how-to/create#set-auto-scaling-configuration">custom vertical auto scaling parameters</a>.<br />
        All verticalAutoscaling attributes are optional. Not specified
        attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - cpuMode</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minCpu/maxCpu</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minCpu or maxCpu in CPU cores (integer).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minRam/maxRam</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minRam or maxRam in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minDisk/maxDisk</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minDisk or maxDisk in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>minContainers</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Default = 1. Defines the minimum number of containers
        for <a href="/elixir/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.<br />
        <br />
        <b>Limitations:</b>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maxContainers</b>
      </td>
      <td className="w-fit">
        Defines the maximum number of containers for <a href="/elixir/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.<br />
        <br />
        <b>Limitations:</b>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>envSecrets</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Defines one or more secret env variables as a key value
        map. See env variable <a href="/elixir/how-to/env-variables#env-variable-restrictions">restrictions</a>.
      </td>
    </tr>
  </tbody>
</table>

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>
### Add Elixir service to an existing project

#### Example:

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in elixir@{version} format
    type: elixir@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one Elixir service version 20 with default [auto scaling](/elixir/how-to/scaling) configuration will be added to your project. Hostname of the new service will be set to `app`. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The content of the `services:` section of `import.yaml` is identical to the project description file. The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the import.yaml file is 100 kB.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline_custom_runtime.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>


The default Elixir runtime environment contains:

- <span>{data.alpine.default}</span>
- selected version of Elixir selected when the runtime service was created.
- <a href="/references/cli">
    `zCLI`
  </a>
  , Zerops command line tool
- `npm`, `yarn`, `git` and `npx` tools

If you prefer the Ubuntu OS instead of Alpine, set the [build.os](/elixir/how-to/build-pipeline#os) attribute to `ubuntu`. To install additional packages or tools add one or more <a href="/elixir/how-to/build-pipeline#preparecommands-1">`run.prepareCommands`</a> commands to your `zerops.yaml`.

When the first deploy with a defined `prepareCommands` attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/elixir/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `run.prepareCommands` commands in the defined order

### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/elixir/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

The prepare runtime container is automatically deleted after the prepare runtime phase has finished or failed.

### Custom runtime environment cache

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the <a href="/elixir/how-to/build-pipeline#copy-folders-or-files-from-your-build-container">`build.addToRunPrepare`</a> and <a href="/elixir/how-to/build-pipeline#preparecommands-1">`run.prepareCommands`</a> attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the custom runtime cache go to `yyy`

{/*TODO screenshot*/}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.



## Delete Elixir service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete Elixir using zCLI

zCLI is the Zerops command-line tool. To delete the Elixir service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step3.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Application artefact

When the [build phase](/elixir/how-to/build-process) is finished, the application artefact is stored in the internal Zerops storage and the build container is deleted.

If you triggered the deploy pipeline [manually](/elixir/how-to/trigger-pipeline#manual-deploy-using-zerops-cli) using Zerops CLI, the application artefact is also uploaded to the internal Zerops storage.

Zerops uses the stored artefact to deploy the identical version of your application each time a new container is started:

- when a new application version is deployed
- when the application [scales horizontally](/elixir/how-to/create#horizontal-auto-scaling)
- when a runtime container fails and a new container is started automatically

## First deploy

When your application is deployed for the first time, Zerops will start one or more runtime containers based on the service [auto scaling settings](/elixir/how-to/scaling).

Zerops performs following actions for each new container:

1. Installs the runtime environment
2. Downloads the application artefact from the internal storage
3. Optionally runs the [init commands](/elixir/how-to/build-pipeline#initcommands)
4. Starts your application using the [start command](/elixir/how-to/build-pipeline#start)
5. Optionally waits until the [readiness check](/elixir/how-to/build-pipeline#readiness-check) succeeds
6. The container is now active and receives incoming requests.

Services with multiple containers are deployed in parallel.

:::info
If your application needs to be initialized in each runtime container, add [init commands](/elixir/how-to/build-pipeline#initcommands) to `zerops.yaml`.
:::

:::caution
Do not use the `initCommands` for customising your runtime environment. See [how to customize the runtime environment](/elixir/how-to/build-pipeline#preparecommands-1).
:::

## Further deploys

When a previous version of your application is already running, Zerops will start new containers. The count of new containers will be the same as the count of existing containers.

Zerops performs the identical actions for each new container as the first deployment.
When all new containers are started your service contains both new and old versions for a short period of time.

The old containers are then removed from the project balancer so they don't receive new requests. The Elixir process inside each of the old containers is terminated and all old containers are gradually deleted.

## Readiness checks

If your application isn't ready to handle requests right after it is started via the [start command](/elixir/how-to/build-pipeline#start), configure a [readiness check](/elixir/how-to/build-pipeline#readiness-check) in your `zerops.yaml`.

If the readiness check is defined, Zerops will:

1. Start your application
2. Perform a readiness check
3. If the readiness check fails, wait 5 seconds and repeat step 2.
4. If the readiness check succeeds, set the container as active.

Application in the runtime container with a pending readiness check won't receive any incoming requests. Only active containers receive incoming requests to your Elixir service.

If the readiness check is still failing after 5 minutes, the specific runtime container is marked as failed and Zerops will delete it, create a new runtime container and perform the deploy.

The <a href="/elixir/how-to/build-pipeline#httpget">`httpGet`</a> readiness check is successful when the URL returns HTTP status code `2xx`. The timeout is 5 seconds. When the URL returns a `3xx` HTTP status, the readiness check HTTP client will follow the redirect.

The <a href="/elixir/how-to/build-pipeline#exec">`exec.command`</a> readiness check is successful when the command returns status code 0. The timeout is 5 seconds.

Read the [runtime log](/elixir/how-to/logs#runtime-log) to troubleshoot failed readiness checks.

## Application versions

Zerops keeps 10 last versions of your application in the internal storage.

The list of application versions is available in Zerops GUI. Go to the service detail and choose **Service dashboard & runtime containers** from the left menu. The active version is highlighted, show all archived version by clicking on the button below.

<p align="center">
  <img
    src="/img/screenshots/pipeline_history.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

The pipeline detail is accessible from the additional menu. The pipeline detail contains

- The pipeline config (`zerops.yaml`) that was used for the selected version
- The build log (if available)
- The prepare runtime log (if available)

You can download the build artefact of the selected version or delete an inactive version manually.

## Restore an archived version

You can restore an archived version by choosing the **Activate** item from the additional menu.
Zerops will deploy the selected version and the active version will be archived.

The environment variables will be restored to the latest moment when the selected version was active.



Environment variables help you run your application in different environments. They allow you to isolate all specific environment aspects from your application code and keep your app encapsulated. You can create several projects in Zerops that represent different environments (development, stage, production) or even each developer can have a project with its own environment.

In Zerops you do not have to create a `.env` file manually. Zerops handles the environment variables for you.

## Types of env variables in Zerops

There are 3 different sets of env variables in Zerops:

| environment | type   | defined in                                                                        |
| ----------- | ------ | --------------------------------------------------------------------------------- |
| build       | basic  | [zerops.yaml](/elixir/how-to/build-pipeline#envvariables)                          |
| runtime     | basic  | [zerops.yaml](/elixir/how-to/build-pipeline#envvariables-1)                        |
| runtime     | secret | [Zerops GUI](#set-secret-env-variables-in-zerops-gui) |

Use the [secret env variables](/elixir/how-to/create#set-secret-environment-variables) for all sensitive data you don't want to store in your application code. Secret env variables are also useful if you need for testing where you need to change the value of some env variables frequently. Secret variables are managed in Zerops GUI and you don't have to redeploy your application.

The basic build and runtime env variables are listed in your [zerops.yaml](/zerops-yaml/specification) and deployed together with your application code. When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your zerops.yaml and redeploy your application to Zerops.

You can [reference](/elixir/how-to/env-variables#reference-a-local-variable-in-another-variable-value) another variable of the same service or even a variable of [another service](/elixir/how-to/env-variables#reference-a-variable-of-another-project-service) within the same project.

## Set secret env variables in Zerops GUI

Use secret variables to store passwords, tokens and other sensitive information that shouldn't be part of your repository and listed in zerops.yaml.

<p align="center">
  <img
    src="/img/screenshots/runtime_secret_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

You can set env variables when you [create](/elixir/how-to/create) a new Elixir service or you can set them later.

To configure env variables for an existing service, go to the service detail and choose **Environment variables** in the left menu. Scroll to the **Secret variables** section and click on the **Add secret variable** button and set variable key and value.

You can edit or delete env variables that you've created by clicking on the menu on the right side of each row.

The changes you've made to environment variables will be automatically applied to all containers of your project's services.

:::caution
You need to **restart** the runtime service after you update environment variables. The Elixir process running in the container receives the list env variables only when it starts. Update of the env variables while the Elixir process is running does not affect your application.
:::

## Set basic build env variables in zerops.yaml

To set basic env variables for the build environment, add the `envVariables` attribute to the build section in your `zerops.yaml`

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
       …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Set basic runtime env variables in zerops.yaml

To set basic env variables for the runtime environment, add the `envVariables` attribute to the runtime section in your `zerops.yaml`.

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    run:
       …

      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Env variable restrictions

**key**

- must satisfy the following regular expression: `[a-zA-Z_]+[a-zA-Z0-9_]*`
- all variable keys in the same service must be unique regardless of case
- keys are case sensitive

**value**

- must contain only ASCII characters
- the _End of Line_ character is forbidden

These restrictions apply to all [types of env variables](/elixir/how-to/env-variables#types-of-env-variables-in-zerops).

## Referencing other env variables

You can reference another variable of the same service using `${key}` in your variable value. You can even reference a variable from a different service using `${hostname_key}`. The referenced variable doesn't need to exist when you are entering your variable.

### Reference a local variable in another variable value

| Variable key | Variable value      | Computed variable value |
| ------------ | ------------------- | ----------------------- |
| id           | 12345               | 12345                   |
| hostname     | app                 | app                     |
| name         | `${id}-${hostname}` | 12345-app               |

### Reference a variable of another project service

Let's say your project contains two PostgreSQL services `dbtest` and `dbprod`. Both services have a `connectionString` variable. Then you can create a `dbConnectionString` env variable in your Elixir runtime and set `${dbtest_connectionString}` as the variable value. Zerops will fill in the value of the `connectionString` variable of the `dbtest` service.

When you change the `dbConnectionString` value to `${dbprod_connectionString}`, Zerops will fill in the value of the `connectionString` variable of the `dbprod` service.

:::caution
When you change the value of the `connectionString` variable in the service `dbtest` you need to **restart** the Elixir service. The Elixir process running in the container receives the list env variables only when it starts. Update of the env variables while the Elixir process is running does not affect your application.
:::

## Generated env variables

Zerops creates several helper variables when a Elixir service is created, e.g. `hostname`, `PATH`. Some helper variables are read-only (`hostname`), others are editable (`PATH`). Generated variables cannot be deleted.

Generated env variables are listed on the **Environment variables** page. Scroll to the **Generated variables** section.

{/* TODO screenshot of the generated env variables of the respective runtime*/}

<p align="center">
  <img
    src="/img/screenshots/nodejs_generated_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## How to read env variables from your Elixir app

Zerops passes all environment variables from all project services when your Elixir app is deployed and started.

To access the local environment variable i.e. the variable set to this Elixir service in your app, use:

```sh
process.env.YOUR_VARIABLE_KEY_HERE
```

## How to read env variables of another service

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Examples:

To access the `connectionString` env variable of the `mariadb1` service, use `mariadb1_connectionString` as the env variable key.
To access the `password` env variable of the `mariadb2` service, use `mariadb2_password` as the env variable key.

## How to read runtime env variables in the build environment

You can use runtime env variables in the build environment using the `RUNTIME_` prefix. For example if you have a runtime variable with the `connectionString` key, use the `RUNTIME_connectionString` to read the variable in the build environment. This rule applies both for basic and secret runtime variables.

## Basic and secret env variable with the same key

If you create a secret env variable and a basic runtime env variable with the same key, Zerops saves the basic runtime env variable from your zerops.yaml and ignores the secret env variable.

If you create a basic build env variable and a runtime env variable with the same key, Zerops saves both because the build and runtime environments have separate sets of env variables.



## Zerops GUI

In Zerops GUI, go to the service detail page and choose **Service containers & resources overview** and scroll down to the list of containers.

<p align="center">
  <img
    src="/img/screenshots/nodejs_containers_list.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Then click on the file browser icon and the file browser opens:

<p align="center">
  <img
    src="/img/screenshots/nodejs_file_browser.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

If your service is in the [HA mode], you can switch between containers in the top left corner.

## zCLI & SSH

You can connect to the container via SSH with the Zerops CLI and browse its files.
How to [connect to your service via SSH](/references/ssh).



Zerops provides 3 different logs:

- [build log](#build-log)
- [prepare runtime log](#prepare-runtime-log)
- [runtime log](#runtime-log)

## How to access logs

### Build log

#### Zerops GUI

To access a build log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Build log**. The build log button is available only if the [build pipeline](/elixir/how-to/trigger-pipeline) was triggered for the selected deploy.

#### zCLI

To access a build log in Zerops CLI use

```sh
zcli service log --showBuildLogs
```

Read more about the [zcli service log](/references/cli/access-logs) command.

### Prepare runtime log

#### Zerops GUI

To access a prepare runtime log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Prepare runtime log**. The prepare runtime log button is available only if the [prepare runtime pipeline](/elixir/how-to/build-pipeline#preparecommands-1) was triggered for the selected deploy.

#### zCLI

_Prepare runtime log is currently not supported in zCLI._

### Runtime log

#### Zerops GUI

To access a runtime log in Zerops GUI, go to the service detail and choose **Runtime log** in the left menu.

<p align="center">
  <img
    src="/img/screenshots/elixir_runtime_log.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Each runtime container has its own log. If your service has multiple containers, select the container in the log header.

You can filter log records by minimum severity or by time.

#### zCLI

To access the log of the runtime containers in Zerops CLI use

```sh
zcli service log
```

Read more about the [zcli service log](/references/cli/access-logs) command.

## Elixir logging configuration

Zerops logs all messages sent

- to the standard error (`stderr`)
- to the standard output (`stdout`)
- via the Elixir `console.log` method

### Severity level

By default the `console.log` creates a message with the `Informational (6)` severity.

Add a severity number in the `<N>` format as a prefix to set a custom severity as shown below:

```js
console.log('A message with the informational severity ...');
console.log('<0>Emergency (0) severity > system is unusable.');
console.log('<1>Alert (1) severity > action must be taken immediately.');
console.log('<2>Critical (2) severity > critical conditions.');
console.log('<3>Error (3) severity > error conditions.');
console.log('<4>Warning (4) severity > warning conditions.');
console.log('<5>Notice (5) severity > normal, but significant, condition.');
console.log('<6>Informational (6) severity > informational message.');
console.log('<7>Debug (7) severity > debug-level message.');
```

:::info

`console.info`, `console.warn`, `console.debug`
, and `console.error` are just aliases to the `
  console.log
` method. They don't set the appropriate severity number. Use the `
  &lt;N&gt;
` prefix instead. :::




Zerops performs an automated scaling of hardware resources required to run your runtime application based on its usage. If the current use of your application does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your application is under heavy load or needs to store more data, then auto scaling increases the resources to make sure it runs smoothly.

## Vertical and horizontal auto scaling

Each application you deploy starts with the minimum hardware resources: **CPU** cores, **RAM** and **Disk**. Zerops monitors the usage of these 3 resources and if the usage exceeds a set threshold, more CPU cores, RAM or Disk is allocated to the service. This is called **vertical scaling**.

<p align="center">
  <Image
    lightImage="/img/gui/resources.webp"
    darkImage="/img/gui/resources.webp"
    alt="Resources of a Zerops service"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

**Horizontal scaling** adds or removes whole containers.

Zerops has a preference for vertical scaling because it's faster and more precise. If the vertical auto scaling hits the defined maximum a new container is started automatically. When your application doesn't need so much power and all containers are vertically scaled down, Zerops will gradually remove whole containers.

<p align="center">
  <img
    src="/img/screenshots/scaling2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Configure auto scaling

To change the auto scaling settings go to the Elixir service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### CPU mode

#### Shared

Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

#### Dedicated

The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

Elixir service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Elixir service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Elixir performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Elixir service. When your Elixir service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Elixir service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your application starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your application.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your application doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

By default Zerops keeps a minimum free RAM in each container. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your application need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 0.125 GB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the application is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each Elixir service. Zerops will never scale above the entered values. If your application is in [highly available mode], maximal resources are identical for all containers of the Elixir service.

### Not enough resources to scale up

If one of the Elixir containers needs more resources but there are not enough of them on the underlying machine, a new container with the required hardware resources will be started on another machine. When the new container is ready, it will be added to the service balancer. The old container will be removed from the balancer and deleted.

### Automatic scale down

When the application no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the application from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal autoscaling

Zerops prefers vertical scaling over horizontal scaling because vertical scaling is faster and allows finer adjustment to the required performance. Horizontal scaling can be disabled by setting the same number for the minimum and maximum container count. Zerops will then scale the Elixir service only vertically.

Your application is created with the defined minimum number of containers. Zerops will add a new container when any of the service's containers reaches the maximum limit for vertical scaling for CPU cores or RAM. Zerops doesn't start a new container when the maximum disk space is reached. No more containers are added when the defined maximum container limit is reached.

The new container is started with a minimum disk size and with an average CPU cores and RAM of the existing containers.

By customising the vertical auto scaling limits, you can cause the horizontal scaling to start earlier. For example if you lower the vertical auto scaling maximum to 1 CPU core, Zerops will start a new container if some of the running containers are using the whole CPU core for more than 20 seconds.

If the application no longer needs as much power, Zerops will gradually remove containers to the defined minimum count. The container is removed after its CPU cores are scaled down to the defined minimum and the free CPU is safely above the minimum threshold for vertical scaling. Zerops only **removes containers** with a minimum **15 minute lifetime**.

## Monitor Elixir resources

Zerops provides information about how much hardware resources the Elixir service is currently using. Go to the service detail in Zerops GUI and select **Service dashboard & runtime containers** in the left menu. Zerops also provides the history of resource usage.



Zerops provides [shared storage service](/shared-storage/overview) that can be connected to runtime services. Shared storage enables your runtime service to share files between all containers of the same service or even among containers of different runtime services.

## Connect a shared storage in Zerops GUI

Connect your Elixir service directly when creating a new shared storage service. Just select your Elixir service in the **Share with Services** block on the **Add new shared storage service** page.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_1.png)

To connect the existing shared storage to the Elixir service, go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Select a runtime service and the shared storage will be connected to the selected runtime.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_2.png)

Zerops will create a new folder `/mnt/[shared storage name]`` in the runtime root folder. E.g. `/mnt/teststorage`for a`teststorage` shared storage. The content of this folder is shared among all containers of the runtime service you've selected. If you select multiple runtimes, the content of the folder will be shared among all containers of selected services.

## Disconnect a shared storage in Zerops GUI

Go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Switch off the toggle to disconnect the shared storage from the selected runtime.

:::note
Your runtime service will be automatically restarted when a shared storage is disconnected.
:::

## Create Elixir service with a shared storage using zCLI

zCLI is the Zerops command-line tool. To create a new Elixir service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/elixir/how-to/shared-storage#create-a-project-description-file)
3. [Create a project with a Elixir service and a shared storage](/elixir/how-to/shared-storage#create-a-project-with-a-elixir-service-and-a-shared-storage)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### description.yaml format

[Read the basics](/elixir/how-to/create#create-a-project-description-file) how to define the Elixir service using the description.yaml.

#### Example with a shared storage

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project

  # optional: project description
  description: A project with a Elixir and a shared storage

  # optional: project tags
  tags:
    - DEMO
    - ZEROPS

# array of project services
services:
  - # service name
    hostname: teststorage

    # shared storage service has no version
    type: shared-storage

    # mode: HA / NON_HA
    mode: NON_HA

  - # service name
    hostname: app

    # service type and version number in elixir@{version} format
    type: elixir@latest

    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2

    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4

    # Mount the shared storage to the Elixir service
    mount:
      - teststorage
```

The mount attribute accepts an array of shared storage names you want to mount to your runtime service.

### Create a project with a Elixir service and a shared storage

Follow the article [How to create a project based on the description.yaml](/elixir/how-to/create#create-a-project-based-on-the-descriptionyaml).




<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-1.webp"
    darkImage="/img/mind-maps/build-deploy/step-1-dark.webp"
    alt="build deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Automatic builds and deploys from GitHub or GitLab

Integrate Zerops to your GitHub or GitLab repository and configure the automatic builds and deploys.

Follow these steps:

1. Add [zerops.yaml](/elixir/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository.
2. Connect your GitHub repository or connect your GitLab repository

Then each time you create a new tag or push to a specific branch, depending on the configuration, GitHub or GitLab will initiate a new build & deploy pipeline.

<p align="center">
  <Image
    lightImage="/img/gui/github-integration.webp"
    darkImage="/img/gui/github-integration.webp"
    alt="github integration"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

### Skip the automatic pipeline once

To ensure that a pipeline is not triggered by your next push, add `[ci skip]` or `[skip ci]` to the commit message. It is case insensitive.

:::note
You will still see a successful delivery of a webhook in your Github/Gitlab repository as a webhook is actually triggered, but with no action.
:::

## Manual builds and deploys using Zerops CLI

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    darkImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    alt="Manual Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

To start a new build & deploy pipeline manually, use the Zerops CLI.

Follow these steps:

1. Add <a href="/elixir/how-to/build-pipeline#add-zeropsyaml-to-your-repository">`zerops.yaml`</a> to your repository.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli push` command.

The `zcli push` command uploads your application code, builds and deploys your application in Zerops.

The command triggers the [build pipeline](/elixir/how-to/trigger-pipeline) defined in `zerops.yaml`. `zerops.yaml` must be in the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

zCLI uploads all files and subdirectories of the working directory to Zerops and starts the build pipeline. If the `.gitignore` file is found, it is interpreted and the defined files and folders will be ignored.

If you just want to deploy your application to Zerops, use the [zcli deploy](#manual-deploy-using-zerops-cli) command instead.

#### Push command parameters

```sh
Usage:
  zcli push [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.
  -h, --help                     the service push command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

zCLI commands are interactive, when you press enter after `zcli push`, you will be given a list of your projects to choose from.

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

## Manual deploy using Zerops CLI

To start only a deploy pipeline, use the Zerops CLI.

Follow these steps:

1. Add [zerops.yaml](/elixir/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository. Omit the build section.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli service deploy` command.

The `zcli service deploy` command uploads your application and deploys it in Zerops. Use this tool if you have your own build process. If you want to build your application in Zerops, use an [automatic](#automatic-builds-and-deploys-from-github-or-gitlab) or [manual](#manual-builds-and-deploys-using-zerops-cli) build process.

#### Deploy command parameters

```sh
Usage:
  zcli service deploy pathToFileOrDir [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
  -h, --help                     the service deploy command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

`pathToFileOrDir` defines a path to one or more directories and/or files relative to the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

`zerops.yaml` must be placed in the working directory.

:::info
You can change the deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your working directory.
:::



You can upgrade or downgrade your Elixir service to a different major Elixir version by setting the <a href="/elixir/how-to/build-pipeline#base-1">`run.base`</a> parameter in your `zerops.yaml`. When you [trigger a new pipeline](/elixir/how-to/trigger-pipeline), Zerops will start new runtime container(s) with the required Elixir version. If you don't specify the `run.base` attribute in your `zerops.yaml`, Zerops keeps the current Elixir version for your runtime.

If you want to build your application with a different major Elixir version, change the <a href="/elixir/how-to/build-pipeline#base">`build.base`</a> parameter in your `zerops.yaml`. The `build.base` is the required attribute.




[Elixir ↗](https://elixir.org/en) is an asynchronous event-driven JavaScript runtime, which is designed to build scalable network applications.


As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-elixir), a **_recipe_**, containing the most simple Elixir web application. The repo will be used as a source from which the app will be built.

<CustomCard title="Feel free to deploy the recipe yourself" emoji="🚀">
  This is the most bare-bones example of Elixir app running on Zerops — as few libraries as possible,
  just a simple endpoint with connect, read and write to a Zerops PostgreSQL database.

  <DeployButton link="elixir" badgeWidth="200" />
</CustomCard>

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)


2. In the **Projects** box click on **Import a project** and paste in the following YAML config ([source ↗](https://github.com/zeropsio/recipe-elixir/blob/main/zerops-project-import.yaml)):

```yaml
project:
  name: recipe-elixir
  tags:
    - zerops-recipe

services:
  - hostname: api
    type: elixir@1.16
    enableSubdomainAccess: true
    buildFromGit: https://github.com/zeropsio/recipe-elixir

  - hostname: db
    type: postgresql@16
    mode: NON_HA
    priority: 1
```

3. Click on **Import project** and wait until all pipelines have finished.

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://api-808-4000.prg1.zerops.app`.
2. Click or the `subdomain` URL to open it in a browser and you should see

```
{"message":"This is a simple Elixir application running on Zerops.io, each request adds an entry to the PostgreSQL database and returns a count. See the source repository (https://github.com/zeropsio/recipe-elixir) for more information.","newEntry":"e64be640-d6c2-4be8-93ac-d1e40e56fa06","count":1}
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::


## How to start

It doesn't matter whether it's your first curious introduction to Zerops, you have already mastered the basics and are looking for a tiny detail or inspiration. Below, choose a section that fits your needs:

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/elixir/getting-started',
      label: 'New to Zerops?',
      customProps: {
        icon: Icons['rocket-launch'],
        description: 'There is no better way to start than to try it yourself.',
      },
    },
    {
      type: 'link',
      href: '/elixir/how-to/create',
      label: 'Care for details?',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description:
          'Dive in all Zerops has to offer for your Elixir application.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=elixir&type=all&language=&sort=',
      label: 'Elixir recipes',
      customProps: {
        icon: Icons['github'],
        description:
          'Get inspired by already existing repositories, ready to be imported to Zerops.',
      },
    },
  ]}
/>

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/elixir/how-to/create',
      label: 'Create Elixir service',
      customProps: {
        icon: Icons['elixir'],
        description: 'Start with creating a Elixir service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: '/elixir/how-to/build-pipeline#add-zeropsyaml-to-your-repository',
      label: 'Zerops.yaml',
      customProps: {
        icon: Icons['puzzle'],
        description:
          'See a full example of zerops.yaml file to create your own app.',
      },
    },
    {
      type: 'link',
      href: '/elixir/how-to/scaling',
      label: 'Scaling configuration',
      customProps: {
        icon: Icons['adjustments'],
        description:
          'Set up scaling of your Elixir application so that it runs smoothly while using only necessary resources.',
      },
    },
  ]}
/>

{" "}

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/elixir/how-to/build-process#customize-elixir-build-environment',
      label: 'Customize build environment',
      customProps: {
        icon: Icons['sparkles'],
      },
    },
    {
      type: 'link',
      href: '/elixir/how-to/customize-runtime',
      label: 'Customize runtime environment',
      customProps: {
        icon: Icons['sparkles-solid'],
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/elixir/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>




export const languages = [
    { name: "Bun", link: "/java/how-to/build-pipeline#ports" },
    { name: "Deno", link: "/go/how-to/build-pipeline#ports" },
    { name: ".NET", link: "/dotnet/how-to/build-pipeline#ports" },
    { name: "Elixir", link: "/php/how-to/build-pipeline#ports" },
    { name: "Gleam", link: "/dotnet/how-to/build-pipeline#ports" },
    { name: "Go", link: "/go/how-to/build-pipeline#ports" },
    { name: "Java", link: "/java/how-to/build-pipeline#ports" },
    { name: "Node.js", link: "/nodejs/how-to/build-pipeline#ports" },
    { name: "PHP", link: "/php/how-to/build-pipeline#ports" },
    { name: "Python", link: "/python/how-to/build-pipeline#ports" },
    { name: "Rust", link: "/rust/how-to/build-pipeline#ports" },
]

Zerops provides three ways to make your application accessible from the internet:
- [Zerops subdomain](#public-access-through-zerops-subdomain) - ideal for testing and development
- [Custom domain](#public-access-through-your-domain) - recommended for production deployments
- [Direct port access](#opening-public-ports) - for non-HTTP protocols and specialized use cases

Each method serves different needs and comes with its own configuration options.

:::note
By default, your runtime service is not publicly accessible until you configure one of these methods.
:::

## Public Access Through Zerops Subdomain

For development and testing purposes, Zerops offers a quick way to make your application accessible through a `.zerops.app` subdomain. This option requires minimal configuration and includes automatic SSL certificate management.

### Configuration Steps

1. Navigate to your service detail page in Zerops GUI
2. Select **Public access & internal ports** from the left menu
3. Toggle the **Zerops subdomain access** switch

<p align="center">
  <Image
    lightImage="/img/gui/public-access.webp"
    darkImage="/img/gui/public-access.webp"
    alt="Public Access"
    style={{ width: '90%', height: 'auto' }}
  />
</p>

Once enabled, Zerops assigns a unique subdomain for your application. If you've defined multiple [internal ports](/zerops-yaml/specification#ports-) with HTTP support in your `zerops.yaml`, each port receives its own unique `.zerops.app` subdomain.

<GroupCards heading="Configure internal ports for your Runtime" items={languages} />

### Technical Details

When using Zerops subdomains:
- Access your application using the `https://` protocol (Zerops automatically manages SSL certificates)
- Traffic flows through a central HTTP balancer that:
  - Terminates SSL connections
  - Forwards requests to your application via HTTP
  - Handles all security certificates

:::warning Production Limitations
- The central HTTPS balancer is shared across all Zerops projects, which creates a scalability bottleneck
- Maximum upload size is limited to 50MB
- Not recommended for production traffic
:::

## Public Access Through Your Domain

When your application is ready for production or you need to test with your actual domain, configure custom domain access. This method provides better performance, scalability, and full control over your domain settings.

<p align="center">
  <Image
    lightImage="/img/gui/public-access-domain.webp"
    darkImage="/img/gui/public-access-domain.webp"
    alt="Public Access"
    style={{ width: '65%', height: 'auto' }}
  />
</p>

### IP Address Configuration

Before setting up domain access, you'll need public IP addresses. Zerops offers the following IP options:

#### IPv4 Options

##### Dedicated IPv4 Address ($3/30 days)
- Dedicated to your project and shared across all project services
- One IPv4 address per project limit
- Protects against blacklisting risks associated with shared IPs
- Subscription automatically renews every 30 days *(cannot be purchased with promo credit)*
    - Fee is non-refundable but address can be reused in another project until subscription ends
- **Recommended for production workloads**

##### Shared IPv4 Address (Free)
- Available at no cost
- Shared across all Zerops users and their projects
- Limitations:
  - Restricted number of open connections
  - Shorter connection timeouts
- **Not recommended for production use**

#### IPv6 Address (Free)
- Dedicated to your project and shared across all project services
- One IPv6 address per project limit
- Automatically activated with first domain setup
- Available for all projects at no additional cost

:::tip
Since IPv6 support is not universal, using both IPv4 and IPv6 is recommended for maximum accessibility.
:::

### Configuring HTTP Routing

To set up domain access:

1. Go to your service detail in Zerops GUI and select **Public access & internal ports**
2. Click **Setup first domain access**
3. Configure your domain settings:
   - Enter domain names (e.g., `mydomain.com`, `app.mydomain.com`)
   - Add multiple domains if needed (useful for multi-language sites)
   - Choose SSL certificate management
4. Define routing rules:
   - Source: The public path (the part of URL after your domain)
   - Destination: Choose which application and internal port receives the traffic
   - Add multiple routing configurations as needed

All settings can be modified later as your needs change.

<Video
  width="80%"
  autoplay="true"
  loop="loop"
  muted="muted"
  preload="none"
  src="/vids/routes.webm"
  plays-inline="true"
/>

### DNS Configuration

After setting up domain access in Zerops, you'll need to configure your DNS records with your domain registrar.

For detailed instructions on DNS configuration, including specific implementation details for Cloudflare, please refer to the [DNS and Proxy Setup](/features/dns) guide.

### HTTPS Configuration

When using Let's Encrypt certificates (recommended):

#### Certificate Management
- Zerops handles all certificate installation and renewal
- Certificates are free of charge
- No manual certificate management required

#### Traffic Flow
1. Traffic arrives at your public IPv4/IPv6 addresses
2. Requests route through your project's dedicated HTTPS balancer
3. SSL termination occurs at the balancer level
4. Internal traffic uses HTTP protocol for optimal performance

#### Balancer Architecture
- Deployed in two containers for redundancy
- Scales vertically based on traffic demands
- Cannot be directly modified
- Included free of charge

## Opening Public Ports

For applications requiring direct port access or non-HTTP protocols, Zerops provides flexible port configuration options.

:::important
Currently, direct public port access is only available for runtime services and PostgreSQL databases.
:::

<p align="center">
  <Image
    src="/img/gui/ipv6-public-port.webp"
    alt="Public Access Port"
    style={{ width: '90%', height: 'auto' }}
  />
</p>

### Port Configuration

1. Navigate to service detail page in Zerops GUI
   - For runtime services select **Subdomain & domain & IP access**
   - For PostgreSQL select **Direct access through IP address**
2. Configure your port settings:
   - Either **Setup first access through IPv6** or activate **Unique IPv4 add-on** (if needed)
   - Choose any port from 10-65435 (except 80 and 443)
   - Select destination service and internal port
   - Each public port can be mapped to any internal service port
   - Multiple public ports can point to the same internal port if needed
   - Port configurations can be set independently for IPv4 and IPv6

### Firewall Configuration

Optionally secure your ports with firewall rules:

1. Enable firewall for specific ports
2. Choose policy type:
   - **Blacklist**: Block specific IPs/ranges
   - **Whitelist**: Allow only specific IPs/ranges
3. Configure IP rules:
   - Single IP format affects only the specific IP
   - IP range format affects all IPs in that CIDR range

<p align="center">
 <Image
   src="/img/gui/enable-firewall.webp"
   alt="Enable Firewall"
   style={{ width: '90%', height: 'auto' }}
 />
</p>

Zerops provides data backup for certain services.

Whether a service supports backups is specified on the documentation page of each service. Technical details about backup implementation for each service are also described on their respective service pages.

## Frequency and volume

By default, your data is backed up automatically **every day** between 00:00:00 UTC and 01:00:00 UTC, unless you update your settings.

### Managing Backups in GUI

To manage backups, go to the service detail and choose **Backups List & Configuration** section in the left menu.

#### Configure Backup Settings

From this section, you can:
- Do a one-time backup of your data
- Change the frequency of your automatic backups
- Turn off backing up your data completely

<p align="center">
  <img
    src="/img/screenshots/backup_frequency.png"
    alt="Backup frequency configuration"
    width="90%"
    height="auto"
  />
</p>

#### Backup Frequency Options

You can configure backups with several preset schedules:
- **No backups**: Disable automatic backups (not recommended)
- **Once a day**: Daily backups at the specified time
- **Once a week**: Weekly backups on the specified day and time
- **Once a month**: Monthly backups on the specified day and time
- **Custom CRON**: Define a custom schedule using CRON syntax

For the Custom CRON option, you can use the following syntax:

<table className="w-full">
  <thead>
    <tr>
      <th className="whitespace-nowrap w-fit">Field name</th>
      <th className="w-full">Allowed values</th>
    </tr>
  </thead>
  <tbody>
    <tr className="text-left">
      <td className="w-fit">Minute</td>
      <td className="w-fit">0-59</td>
    </tr>
    <tr className="text-left">
      <td className="w-fit">Hour</td>
      <td className="w-fit">0-23</td>
    </tr>
    <tr className="text-left">
      <td className="w-fit">Day</td>
      <td className="w-fit">1-31</td>
    </tr>
    <tr className="text-left">
      <td className="w-fit">Month</td>
      <td className="w-fit">1-12</td>
    </tr>
    <tr className="text-left">
      <td className="w-fit">Week Day</td>
      <td className="w-fit">0–7; both 0 and 7 represent Sunday</td>
    </tr>
  </tbody>
</table>

Examples:
- `0 2 * * *` - Every day at 2:00 AM
- `0 4 * * 0` - Every Sunday at 4:00 AM
- `0 0 1 * *` - First day of every month at midnight

#### View and Manage Backup Files

In the same section, you can:
- View all of your backups
- Download a backup
- Delete a backup

<p align="center">
  <img
    src="/img/screenshots/list_of_backups.png"
    alt="List of backups"
    width="90%"
    height="auto"
  />
</p>

### Limits

- Each backup is stored for a maximum period of **1 month**
- For each **service** a maximum of **100 backups** is stored
- For each **project** a maximum of **25 GiB** of backup volume is stored. Only full backups are stored, the backup that exceeds the limit by its part is not stored

If you need more backup storage space, contact our support team.

#### Examples

1. If you backup your data every day, and the total volume is less than 25 GiB, the maximum number of backups is ~30 for the last month. A new backup is stored every day (with the oldest one being deleted), unless you exceed the 25 GiB limit.

2. If you backup your data every hour, and the total volume is less than 25 GiB, the total number of backups is 100 for the last 100 hours. A new backup is stored every hour (with the oldest one being deleted), unless you exceed the 25 GiB limit.

3. If you backup your data every hour, and your backups exceed 25 GiB after 50 hours, the total number of backups is 50, unless you delete some of your backups or wait the oldest one is older than 1 month.

## Persistence

When deleting a service or a project:
* Project deletion affects backups of **all** services within that project
* Backups remain accessible for 7 days
* After 7 days, all backups are permanently removed

## High Availability Setup

For services running in HA mode, the backup is created on one of the nodes at random. Other nodes report that the backup is running on another node.

## Encryption and Security

Backups are encrypted as soon as they are created. Here is the process:

* **Key Generation:** We use asymmetric cryptography (X25519) to generate a private key, which is then encrypted using our secret key (RSA-OAEP) and securely stored in our database.
* **Public Key Usage:** The public key is sent to the application, which uses it to encrypt the backup.
* **Decryption:** When a user downloads a backup, it is decrypted using the private key stored safely in our database.

This ensures your data remains secure during both storage and transmission.

All backups are stored in a separate ObjectStorage instance, isolated from the instance accessible by users.

After a project is deleted and the 7-day retention period expires, the project's encryption key is permanently deleted. Once this happens, there is no way to decrypt or restore the backup data.

# Understanding Zerops Build Cache

> Zerops implements a sophisticated two-layer caching strategy that optimizes build times while maintaining complete control over the build environment. This documentation explores the architecture, configuration patterns, and practical implementation of the build cache system.

## Architecture Overview

The build cache operates through two distinct layers:

1. **Base Layer**: Comprises the OS, installed dependencies, and prepare commands
2. **Build Layer**: Contains the state after executing build commands

The layers work together to create an efficient and predictable build environment, though they are currently coupled in their cache invalidation behavior (invalidating one layer affects the other).

### Cache Implementation

The caching mechanism is implemented through an efficient file movement strategy. This approach ensures near-instantaneous cache operations through simple directory relocation within the container, implementing the following characteristics:

- Files are moved between `/build/source` and `/build/cache` using container-level rename operations
- No packaging, compression, or network transfer is involved
- Cache preservation is achieved through simple directory relocation within the container
- Files maintain their original state and permissions throughout the process

:::note
See detailed [build process lifecycle](#build-process-lifecycle).
:::

## Configuration Guide

### Essential zerops.yaml Fields

The following fields in `zerops.yaml` affect build cache behavior:

**Direct Cache Configuration**:
- `build.cache`: Explicitly defines what should be cached through paths or patterns

**Cache Invalidation Triggers**:
These parameters trigger cache invalidation when modified:
- `build.os`: Base operating system selection
- `build.base`: Pre-installed software stacks and runtimes
- `build.prepareCommands`: System preparation and dependency installation
- `build.cache`: Changes to cache configuration

**Build Artifact Generation**:
- `build.buildCommands`: Generates the build artifact that will be deployed.

## Cache Configuration Patterns

### Pattern 1: System-Wide Cache Control
```yaml
build:
  cache: true   # Cache everything
  # OR
  cache: false  # Intended to disable all caching
```

The boolean values provide system-wide cache control:

`cache: true`:
- Preserves the entire build container state
- Maintains system-level package installations
- Ideal for globally installed packages (Python/PHP packages, Go modules)

`cache: false`:
- Intended to disable all caching
- Currently, due to layer coupling, only files within `/build/source` are not cached
- Everything outside `/build/source` remains cached (see [Common Pitfalls: Layer Coupling](#current-pitfalls))

### Pattern 2: Path-Specific Caching
```yaml
# Single path
build:
  cache: node_modules

# Multiple paths
build:
  cache:
    - node_modules
    - package-lock.json
    - .build
```

Execution flow:
1. Source code extraction to `/build/source`
2. Build command execution
3. Specified path preservation in `/build/cache`
4. Cached content restoration (no-clobber mode - source files take precedence)

:::tip
Ideal for non-versioned dependencies in your working directory (e.g., `node_modules`, `vendor`, `.venv`).
:::

## Path Pattern Reference

Zerops supports [Go's filepath.Match](https://pkg.go.dev/path/filepath#Match) syntax. Consider this example structure:

```
├── node_modules/
├── package.json
├── package-lock.json
└── subdir/
    ├── file1.txt
    ├── file2.txt
    └── file3.md
```

Pattern examples and matches:
```yaml
build:
  cache:
    - "subdir/*.txt"      # Matches: subdir/file1.txt, subdir/file2.txt
    - "package*"          # Matches: package.json, package-lock.json
    - "node_modules"      # Matches: entire node_modules directory recursively
```

:::note
All patterns resolve relative to `/build/source`. Path variations like `./node_modules`, `node_modules`, and `node_modules/` are treated identically.
:::

## Build Process Lifecycle

1. **Initialization Phase**
   - Build container startup
   - Builder process launch
   - Source code loading into `/build/source`

2. **Cache Restoration Phase**
   - Cached file movement to `/build/source` (no-clobber mode)
   - Source file precedence handling
   - Conflict logging (no build interruption)
   - Cache directory cleanup

3. **Build Execution Phase**
   - Build command processing
   - Artifact packaging (`build.deployFiles`)

4. **Cache Preservation Phase**
   - Specific cache files movement outside `/build/source`
   - `/build/source` directory cleanup
   - Container termination

## Cache Invalidation Reference

The build cache invalidates under these conditions:

1. **Manual Triggers**
   - API call: `DELETE /service-stack/{id}/build-cache`
   - GUI: Manual cache clear action

2. **Version Management**
   - Backup app version activation via `PUT /app-version/{id}/deploy`

3. **Configuration Changes**
   Any modifications to:
   ```yaml
   build.os
   build.base
   build.prepareCommands
   build.cache
   ```

### Current Pitfalls

The current implementation has some important characteristics:

1. **Layer Coupling**
   ```yaml
   build:
     base: go@1
     prepareCommands:
       - sudo apk update
       - sudo apk add sqlite
     buildCommands:
       - go build -o app main.go
     cache: false
   ```
   Even with `cache: false`, Go modules outside `/build/source` remain cached.

2. **Cascade Invalidation**
   ```yaml
   build:
     base: node@22
     prepareCommands:
       - sudo apk update
       - sudo apk add sqlite vim  # Adding 'vim' invalidates everything
     buildCommands:
       - npm install
       - npm build
     cache:
       - node_modules
   ```
   Modifying `prepareCommands` invalidates both layers, including cached `node_modules`.

## Real-World Implementation Examples

### Node.js Project with TypeScript
```yaml
build:
  base: node@22
  buildCommands:
    - npm ci
    - npm run build
  cache:
    - node_modules
    - .next
    - .turbo
    - package-lock.json
```

### Go Project with Multiple Dependencies
```yaml
build:
  base: go@1
  prepareCommands:
    - sudo apk add build-base
  buildCommands:
    - go mod download
    - go build -o bin/app cmd/main.go
  cache: true  # Caches entire Go modules directory
```

### PHP/Laravel Project
```yaml
build:
  base: php@8.3
  buildCommands:
    - composer install --no-dev
    - php artisan optimize
  cache:
    - vendor
    - composer.lock
```

## Debugging and Monitoring

* **Build Logs**
   - Cache operations are detailed in build logs
   - File conflicts during restoration are logged
   - Cache preservation status is visible

## Implementation Best Practices

### Cache Strategy Optimization

1. **Layer Management**
   - Maintain stable `prepareCommands` to prevent cache invalidation
   - Group related prepare commands logically

2. **Performance Optimization**:
   - Cache package manager lock files alongside dependency directories
   - Use system-wide caching (`cache: true`) for languages with global package managers

3. **Performance Tuning**
   - Leverage system-wide caching for complex builds
   - Monitor build logs for cache operations and potential conflicts
   - Use explicit patterns for precise control
   - Don't over-optimize – the system handles large caches efficiently

## Future Development

Planned system enhancements include:
- Layer independence implementation
- Granular cache control mechanisms
- Enhanced layer management capabilities
- Improved cache invalidation patterns




Zerops CDN is a global content delivery network that brings your static content closer to your users, resulting in faster load times and improved user experience. Built on Nginx and Cloudflare geo-steering technology, our CDN automatically routes users to the nearest server location based on their DNS request.

## Key Benefits

- **Global Reach**: Serve content from strategic locations across the world
- **Reduced Latency**: Content is delivered from the server closest to your users
- **Simple Integration**: No complex configuration required

## Global CDN Infrastructure

Zerops CDN operates across **6 strategic regions** to ensure your content is always delivered from a location close to your users:

<table className="w-full my-1.5 whitespace-nowrap">
  <thead>
    <tr>
      <th className="w-fit" colspan="2">Region</th>
      <th className="w-fit">Location</th>
      <th className="w-fit">Coverage Area</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit font-semibold" rowspan="2">EU</td>
      <td className="w-fit font-semibold">CZ</td>
      <td className="w-fit">Prague, Czech Republic</td>
      <td className="w-full" rowspan="2">Primary European coverage + failover for all regions</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold">DE</td>
      <td className="w-fit">Falkenstein, Germany</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold" colspan="2">UK</td>
      <td className="w-fit">London, United Kingdom</td>
      <td className="w-full">UK and surrounding areas</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold" colspan="2">AU</td>
      <td className="w-fit">Sydney, Australia</td>
      <td className="w-full">Australia and Oceania</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold" colspan="2">SG</td>
      <td className="w-fit">Singapore, Singapore</td>
      <td className="w-full">Southeast Asia</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold" colspan="2">CA</td>
      <td className="w-fit">Beauharnois, Canada</td>
      <td className="w-full">North America</td>
    </tr>
   </tbody>
</table>

### Geo-Steering Technology
Zerops CDN's geo-steering technology automatically routes users to the server location closest to them. Here's how it works:

* **Automatic routing**: Users are directed to the optimal CDN node based on their geographic location
* **Quick failover**: The DNS TTL is set to just 30 seconds, allowing fast recovery if a node fails
* **Redundancy**: If any node becomes unavailable, Cloudflare automatically redirects traffic to the next closest node
* **Reliable backup**: The EU region serves as the ultimate fallback - if all other nodes go down, EU will always be served in DNS

## CDN Modes and Implementation

Zerops CDN currently supports two distinct usage modes (with a third mode coming soon), each designed for specific content delivery needs.

### Object Storage Mode

Perfect for efficiently delivering media files, documents, and other static assets stored in Zerops [Object Storage](/object-storage/overview) to users across different geographical regions.

**Setup process:**
1. Create an Object Storage service or select an existing one
2. Enable the CDN option for this service
3. Set appropriate public read access policies for objects you want to serve via CDN

**Accessing content:**
```txt
https://storage.cdn.zerops.app/your-bucket/path/to/file
```

:::tip
Access the storage CDN URL via the `storageCdnUrl` **project** environment variable `${storageCdnUrl}/your-bucket/path/to/file`.
:::

### Static Mode

Ideal for caching and delivering static website assets like HTML, CSS, JavaScript, and images served from your custom domains.

**Setup process:**
1. Configure domain access for your service
2. Ensure your domains are DNS-verified and have active SSL certificates
3. Enable CDN for the domain group

**Accessing content:**
```txt
https://static.cdn.zerops.app/your-domain.com/path/to/file
```

:::tip
Access the static CDN URL via the `staticCdnUrl` **project** environment variable `${staticCdnUrl}/your-domain.com/path/to/file`.
:::

:::warning Wildcard Domains Not Supported
Static CDN cannot be activated for wildcard domains (e.g., *.example.com). You must use specific domain names.
:::

### API Mode *(Coming Soon)*

Designed for caching API responses to reduce load on your backend services and deliver faster responses to clients.

**Environment variable:** Once available, you'll be able to access the API CDN URL via the `apiCdnUrl` **project** environment variable.

:::warning
API Mode is currently under development and will be available in a future release.
:::

### HTML Implementation Examples

Here's how to integrate CDN URLs in your HTML code:

```html
<!-- Compare: Direct Object Storage vs. CDN-accelerated Storage -->
<!-- Direct from Object Storage -->
<img src="https://storage-prg1.zerops.io/my-bucket/logo.png"/>

<!-- Via CDN for faster global delivery -->
<img src="https://storage.cdn.zerops.app/my-bucket/logo.png"/>

<!-- Using environment variables in templates -->
<img src="{{ osGetEnv "storageCdnUrl" }}/assets/hero-image.jpg"/>

<!-- Compare: Direct Domain vs. CDN-accelerated Domain -->
<!-- Direct from your domain -->
<script src="/static/js/main.js"></script>

<!-- Via CDN for faster global delivery -->
<script src="https://static.cdn.zerops.app/your-domain.com/static/js/main.js"></script>
```

### Testing Specific CDN Nodes

For testing or debugging purposes, you can bypass the automatic geo-steering and access a specific CDN node directly:

```
https://{region}-{mode}.cdn.zerops.app/path/to/content
```

Available region prefixes: `cz`, `de`, `au`, `sg`, `uk`, and `ca`

**Examples:**
- Test Australia node: `https://au-storage.cdn.zerops.app/my-bucket/test.jpg`
- Test UK node: `https://uk-static.cdn.zerops.app/my-domain.com/index.html`

## Managing CDN Content

### Cache Lifecycle

Content served through Zerops CDN follows this lifecycle:

1. **First Request**: When a user requests content not yet in the CDN cache, the request goes to the origin server (your Zerops service), and the response is cached at the CDN node
2. **Subsequent Requests**: Further requests for the same content are served directly from the CDN cache, reducing latency and origin server load
3. **Cache Expiration**: By default, content remains cached for 30 days unless explicitly purged
4. **Automatic Management**: When CDN storage reaches capacity, the least recently used content is automatically removed

:::note Important Cache Behavior
Zerops CDN implements a fixed 30-day TTL policy. Currently, HTTP caching headers such as `Cache-Control`, `Expires`, `Pragma`, etc. do not influence CDN caching behavior. To refresh content sooner than the 30-day period, use the [purge API](#api-reference).

Your `Cache-Control` headers will still affect browser caching behavior.
:::

### When to Purge Cache

You should consider purging cached content when:

- **Content Updates**: You've updated content but kept the same URL (e.g., updated images, CSS files)
- **Deployment Rollouts**: You've deployed a new version of your application
- **Emergency Removal**: You need to immediately remove content that was accidentally made public
- **Testing Changes**: You want to ensure users see the latest version during testing

### Purging Cached Content

Zerops provides multiple ways to manage and purge cached content before its normal expiration:

- **Command Line**: Use the `zsc cdn purge` [command](/references/zsc#cdn) available in all Zerops containers:
  ```sh
  # Purge all content for a domain
  zsc cdn purge example.com

  # Purge specific path
  zsc cdn purge example.com /images/
  ```

- **API Endpoints**: For programmatic control, use the [API endpoints](#api-reference). Here are ready-to-use curl examples for quickly purging content in your scripts:

  ```sh
  # Static mode: Purge all content for a domain
  curl --location --request PUT "https://api.app-prg1.zerops.io/api/rest/public/project/$PROJECT_ID/purge-cdn/static/$DOMAIN/*" \
  --header "Authorization: Bearer $USER_OR_ACCESS_TOKEN"
  ```

  ```sh
  # Storage mode: Purge all content for object storage
  curl --location --request PUT "https://api.app-prg1.zerops.io/api/rest/public/service-stack/$OBJECT_STORAGE_SERVICE_ID/purge-cdn/*" \
  --header "Authorization: Bearer $USER_OR_ACCESS_TOKEN"
  ```

#### Purge Pattern Examples

<table className="w-full my-1.5 whitespace-nowrap">
  <thead>
    <tr>
      <th className="w-fit">Pattern</th>
      <th className="w-fit">Description</th>
      <th className="w-fit">Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit font-semibold">`/*`</td>
      <td className="w-fit">Purges all content</td>
      <td className="w-full">Useful after major updates</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold">`/images/*`</td>
      <td className="w-fit">Purges all content in a directory</td>
      <td className="w-full">Clear all cached images</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold">`/css/main.css$`</td>
      <td className="w-fit">Purges a specific file</td>
      <td className="w-full">Update a single CSS file</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold">`/2023*`</td>
      <td className="w-fit">Purges content starting with pattern</td>
      <td className="w-full">Clear content with date prefix</td>
    </tr>
   </tbody>
</table>

:::warning Pattern Rules
- Wildcards (`*`) must be at the end of the pattern
- Specific files must include `$` at the end
- Nested wildcards (e.g., `/dir/*.jpg`) are not supported
:::

## API Reference

Zerops provides a comprehensive set of API endpoints to manage your CDN configuration and content. For complete information about base URLs, authorization, and general API usage, please refer to our [API specification](/references/api).

The endpoint links below will take you to the Swagger documentation with detailed request/response schemas and examples:

### CDN Management API

- **[Enable CDN for Storage ↗](https://api.app-prg1.zerops.io/api/rest/public/swagger/#/PublicServiceStack/EnableStorageCdn)** `PUT /api/rest/public/service-stack/{id}/cdn`
- **[Disable CDN for Storage ↗](https://api.app-prg1.zerops.io/api/rest/public/swagger/#/PublicServiceStack/DisableStorageCdn)** `DELETE /api/rest/public/service-stack/{id}/cdn`
- **[Create Object Storage with CDN ↗](https://api.app-prg1.zerops.io/api/rest/public/swagger/#/PublicServiceStackObjectStorage/CreateObjectStorageV1)** `POST /api/rest/public/service-stack/object_storage_v1`
- **[Create Domain Routing with CDN ↗](https://api.app-prg1.zerops.io/api/rest/public/swagger/#/PublicPublicHttpRouting/CreatePublicHttpRouting)** `POST /api/public/public-http-routing`
- **[Update Domain Routing with CDN ↗](https://api.app-prg1.zerops.io/api/rest/public/swagger/#/PublicPublicHttpRouting/UpdatePublicHttpRouting)** `PUT /api/public/public-http-routing/{id}`

### Cache Purge API

- **[Purge Storage Mode Cache ↗](https://api.app-prg1.zerops.io/api/rest/public/swagger/#/PublicServiceStack/PurgeStorageCdn)** `PUT /api/rest/public/service-stack/{id}/purge-cdn/{path}`
- **[Purge Static Mode Cache ↗](https://api.app-prg1.zerops.io/api/rest/public/swagger/#/PublicProject/PurgeStaticCdn)** `PUT /api/rest/public/project/{id}/purge-cdn/static/{domain}/{path}`
- **Purge Api Mode Cache *(Coming soon)*** {/*(https://api.app-prg1.zerops.io/api/rest/public/swagger/#/PublicProject/PurgeApiCdn)** `PUT /api/rest/public/project/{id}/purge-cdn/api/{domain}/{path}` */}

## Troubleshooting

Having issues with your CDN? Here are solutions to the most common problems:

#### Content Not Updated After Changes
* **Issue:** You've updated content, but users still see the old version.
* **Possible Cause:** The CDN cache is continuing to serve the previously cached version.
* **Solution:**
    - Use the [purge API](#api-reference) with the specific content path
    - For immediate changes, use versioned file names (e.g., `style.v2.css` instead of just `style.css`)

#### Content Not Being Cached
* **Issue:** Your content isn't being cached by the CDN.
* **Possible Cause:** Missing public read permissions on objects.
* **Solution:**
    - For object storage: Check bucket and object access policies
    - Verify the object is accessible directly before attempting CDN access

:::note
Remember that only publicly accessible objects will be cached by the CDN. Private objects will always be fetched directly from the origin.
:::

#### Environment Variables Not Available
* **Issue:** You can't access the new CDN-related project level environment variables in your containers.
* **Possible Cause:** When new environment variables are created, existing services need to be restarted to access them. Services created before the CDN feature release require special handling.
* **Solution:**
    - For services created after CDN release: Restart the service to apply the new environment variables
    - For services created before CDN release: Add and then remove a dummy environment variable in the project settings adn restart the service

#### Unexpected 404 Errors
* **Issue:** Users receive 404 errors when accessing content via CDN.
* **Possible Cause:** Incorrect CDN URL formatting or missing content at origin.
* **Solution:**
    - Double-check your [URL structure](#) (pay attention to domain names and paths)
    - Verify content exists at the origin before attempting CDN access
    - Test accessing the content directly from origin first

**Correct URL patterns:**
- Object Storage: `https://storage.cdn.zerops.app/your-bucket/path/to/file`
- Static Mode: `https://static.cdn.zerops.app/your-domain.com/path/to/file`

---

*Need help implementing CDN in your project? Join our [Discord community](https://discord.gg/zeropsio) where our team and other Zerops users can assist you!*



Ever wondered why container technologies like Docker took over the development world so quickly? Let's break down the real differences between traditional VMs and containers - and why you might want to use one over the other.

## Key Distinctions

**Containers** are like lightweight packages that contain just your app and what it needs to run, sharing resources with your main system.

**Virtual Machines** are like having a whole computer inside your computer. Complete with its own operating system, memory, and everything else.

### Why Developers Love Containers

#### They're Fast
- Start up in seconds (not minutes)
- Take up way less space
- You can run many more of them on the same hardware

#### They're Consistent
- Works on your machine? Will work on everyone's machine
- No more "but it works locally" problems
- Same environment from development to production

#### They're Simple
- Easy to share with your team
- Quick to update and modify
- Less configuration headaches

### When VMs Still Make Sense

Sometimes you actually want a full computer-within-a-computer:

- You need to run a completely different operating system
- You're dealing with legacy applications that need specific system configurations
- You require maximum isolation for security reasons

### Real-World Comparison

<DevelopmentEnvironmentComparison/>

Think of it like this:
- **Containers** are like apartments in a well-managed building (shared infrastructure, efficient, but with some limitations)
- **VMs** are like having your own house (complete control, but with more overhead)

## Containers and VMs in Zerops

### Why Zerops Uses Both

At Zerops, we use **containers** as our primary runtime environment - they're fast, efficient, and perfect for most modern development workflows. We've optimized our container infrastructure to handle nearly every type of application you might need to run.

However, we also provide **VMs** when you need them, particularly for Docker-based workloads where the additional isolation is essential. Docker containers are a special case - on Zerops, they actually need to run inside VMs for proper security and isolation. While it's technically possible to run Docker in containers using privileged mode, this creates security vulnerabilities.

### When to Use What

<div className="grid grid-cols-1 md:grid-cols-2 gap-1 mt-1">
  <div className="flex-1">
  <h4 className="flex items-center gap-1 mb-0">
    Go with Containers when:
  </h4>
  <ul className="list-none p-0 m-0 flex flex-col gap-0.5">
      <li className="flex items-center gap-0.5">
        <div className="w-0.5 min-w-0.5 shrink-0 aspect-square rounded-full bg-gray-400 flex items-center justify-center scale-75" />
        <span>Building modern web applications</span>
      </li>
      <li className="flex items-center gap-0.5">
        <div className="w-0.5 min-w-0.5 shrink-0 aspect-square rounded-full bg-gray-400 flex items-center justify-center scale-75" />
        <span>Working with microservices</span>
      </li>
      <li className="flex items-center gap-0.5">
        <div className="w-0.5 min-w-0.5 shrink-0 aspect-square rounded-full bg-gray-400 flex items-center justify-center scale-75" />
        <span>Need quick deployment and vertical scaling</span>
      </li>
      <li className="flex items-center gap-0.5">
        <div className="w-0.5 min-w-0.5 shrink-0 aspect-square rounded-full bg-gray-400 flex items-center justify-center scale-75" />
        <span>Want efficient resource usage</span>
      </li>
  </ul>
  </div>
  <div className="flex-1">
  <h4 className="flex items-center gap-1 mb-0">
    Consider VMs when:
  </h4>
  <ul className="list-none p-0 m-0 flex flex-col gap-0.5">
      <li className="flex items-center gap-0.5">
        <div className="w-0.5 min-w-0.5 shrink-0 aspect-square rounded-full bg-gray-400 flex items-center justify-center scale-75" />
        <span>Running legacy applications</span>
      </li>
      <li className="flex items-center gap-0.5">
        <div className="w-0.5 min-w-0.5 shrink-0 aspect-square rounded-full bg-gray-400 flex items-center justify-center scale-75" />
        <span>Need complete OS isolation</span>
      </li>
      <li className="flex items-center gap-0.5">
        <div className="w-0.5 min-w-0.5 shrink-0 aspect-square rounded-full bg-gray-400 flex items-center justify-center scale-75" />
        <span>Require specific hardware access</span>
      </li>
      <li className="flex items-center gap-0.5">
        <div className="w-0.5 min-w-0.5 shrink-0 aspect-square rounded-full bg-gray-400 flex items-center justify-center scale-75" />
        <span>Need to run Docker containers</span>
      </li>
  </ul>
  </div>
</div>

### Resource Allocation

Both containers and VMs in Zerops can have guaranteed resources:
- Specific CPU cores
- Dedicated memory
- Controlled disk space

The difference isn't in resource guarantee capabilities, but rather in how these resources are managed and isolated.

## The Bottom Line

For most modern development work, containers are the way to go. They're faster, more efficient, and easier to work with. VMs still have their place, but unless you have a specific reason to use them, containers will usually make your life easier.

*Remember: The goal is to spend less time managing infrastructure and more time building great applications. Choose the tool that lets you do that most effectively.*

:::tip Pro Tip
Not sure which to choose? Start with containers. You can always switch to VMs if you discover you need them for specific use cases.
:::


This guide will show you how to configure DNS records and proxy settings to work with your Zerops applications, with specific implementation details for Cloudflare.

## DNS Configuration

DNS records for Zerops services can be configured in two main ways:
* **With Proxy**: Routes traffic through proxy services, providing additional security and performance features (recommended for DDoS protection)
* **Without Proxy (DNS Only)**: Direct connection to your Zerops service's IP address

DNS allows you to set two records based on IP address type:
* **A** record for **IPv4** - Zerops offers either a free **shared** IPv4 or a paid **dedicated** IPv4
* **AAAA** record for **IPv6** - Zerops provides a free **dedicated** IPv6

### With Proxy

#### IPv6 only
```bash
Type    Name              Content                Proxy status   TTL
AAAA    <your-domain>     <your-project-ipv6>    Proxied        Auto
```

:::note
Make sure your proxy service supports IPv4 to IPv6 translation for this configuration to work for **both IPv4 and IPv6** users.

Do not add a proxied A record with shared IPv4 - doing so would prevent the proxy from properly routing IPv4 traffic to your service.
:::

#### Dedicated IPv4
```bash
Type    Name              Content                Proxy status   TTL
A       <your-domain>     <your-dedicated-ipv4>  Proxied        Auto
# Optional
AAAA    <your-domain>     <your-project-ipv6>    Proxied        Auto
```

:::tip
Adding also AAAA record can be beneficial as visitors with IPv6 support will connect directly via IPv6.
:::

#### Shared IPv4 *(valid but NOT recommended)*
```bash
Type    Name              Content                Proxy status  TTL
AAAA    <your-domain>     <your-project-ipv6>    DNS only      Auto
A       <your-domain>     <zerops-shared-ipv4>   Proxied       Auto
```

:::tip Why not?
It does not make sense to expose your IPv6 address while proxying the shared IPv4. Use [IPv6 only](#ipv6-only) setup instead.
:::

### Without Proxy

#### Shared IPv4
```bash
Type    Name              Content                Proxy status   TTL
AAAA    <your-domain>     <your-project-ipv6>    DNS only       Auto
A       <your-domain>     <zerops-shared-ipv4>   DNS only       Auto
```

:::note Both A + AAAA Required
Adding AAAA record is essential for shared IPv4 configuration as it serves as a [security measure](#understand-shared-ipv4) to prevent unauthorized domain claims.
:::

#### Dedicated IPv4
```bash
Type    Name              Content                Proxy status   TTL
A       <your-domain>     <your-dedicated-ipv4>  DNS only       Auto
# Optional
AAAA    <your-domain>     <your-project-ipv6>    DNS only       Auto
```

:::tip
Adding also AAAA record can be beneficial as visitors with IPv6 support will connect directly via IPv6.
:::

#### IPv6 only
```bash
Type    Name              Content                Proxy status   TTL
AAAA    <your-domain>     <your-project-ipv6>    DNS only       Auto
```

:::note
This configuration will only work for users with IPv6 connectivity, which may limit your service accessibility.
:::

## Wildcard Domain Configuration

Zerops supports wildcard domains (`*.<your-domain>`) that allow routing all subdomains to your project.

### DNS Configuration
#### Method A: Direct configuration of A and AAAA records
Configure wildcard DNS records following the same patterns described in the [DNS Configuration](#dns-configuration) section, using `*.<your-domain>` in the Name field:

```bash
Type   Name              Content               Proxy status       TTL
A      *.<your-domain>   <your-ipv4-address>   DNS only/Proxied   Auto
AAAA   *.<your-domain>   <your-ipv6-address>   DNS only/Proxied   Auto
```

#### Method B: Using a CNAME record
First configure A and AAAA records for your main domain (`<your-domain>`), then set up a CNAME record:

```bash
Type    Name              Content         Proxy status       TTL
CNAME   *.<your-domain>   <your-domain>   DNS only/Proxied   Auto
```

### Certificate Validation

For proper HTTPS certificate functionality with wildcard domains, configure:
```bash
Type    Name                            Content                     Proxy status   TTL
CNAME   _acme-challenge.<your-domain>   <your-domain>.zerops.zone   DNS only       Auto
```

This record enables Zerops to issue and verify a wildcard certificate for your domain.

### Higher-Level Wildcard Subdomains

You can also set up higher-level wildcard subdomains like `*.<subdomain>.<your-domain>`:

#### Method A: Direct configuration
```bash
Type   Name                          Content               Proxy status       TTL
A      *.<subdomain>.<your-domain>   <your-ipv4-address>   DNS only/Proxied   Auto
AAAA   *.<subdomain>.<your-domain>   <your-ipv6-address>   DNS only/Proxied   Auto
```

#### Method B: Using a CNAME record
```bash
Type    Name                          Content                     Proxy status       TTL
CNAME   *.<subdomain>.<your-domain>   <subdomain>.<your-domain>   DNS only/Proxied   Auto
```
or
```bash
Type    Name                          Content         Proxy status       TTL
CNAME   *.<subdomain>.<your-domain>   <your-domain>   DNS only/Proxied   Auto
```

For certificate validation:
```bash
Type    Name                                        Content                                 Proxy status   TTL
CNAME   _acme-challenge.<subdomain>.<your-domain>   <subdomain>.<your-domain>.zerops.zone   DNS only       Auto
```

### Combining Main Domain and Wildcard Domain

To use both `<your-domain>` and `*.<your-domain>`, specify both variants in your [Zerops configuration](/features/access#configuring-http-routing). Zerops automatically issues a single shared certificate for both the main domain and all its subdomains.

## Cloudflare-Specific Configuration

#### SSL/TLS Mode
Set encryption mode to `Full (strict)` or `Full`
   - Ensures end-to-end encryption
   - *Full* mode requires any SSL certificate (even if self-signed/expired), while *Full (strict)* requires a valid certificate

#### Certificate Management
1. Enable Edge Certificates to allow Cloudflare to manage SSL/TLS certificates
2. During initial setup, handle HTTPS settings in one of two ways:
   - **Option A (Simple but Limited)**:
     - Disable `Always Use HTTPS`
   - **Option B (Recommended for Production)**:
     - Keep `Always Use HTTPS` enabled
     - Create and enable a Configuration Rule, which disables Automatic HTTPS Rewrites for this specific path:
       ```
       Field: URI Path
       Operator: starts with
       Value: /.well-known/acme-challenge/
       ```
       This rule disables Automatic HTTPS Rewrites for the certificate validation path.

## Validation Steps

Test your configuration:
```bash
# Check DNS resolution
dig AAAA <your-domain>

# Verify connectivity
curl -vI https://<your-domain>

# Test IPv4 access
curl -4 -v https://<your-domain>

# Test IPv6 access
curl -6 -v https://<your-domain>
```

## Troubleshooting Guide

1. **DNS Resolution Issues**
   - Confirm correct record configuration
   - Verify proxy status settings
   - Check IPv6 address accuracy
   - Allow time for DNS propagation (typically 5-10 minutes)

2. **Connection Problems**
   - Test both IPv4 and IPv6 connectivity
   - Check proxy server status if applicable
   - Confirm port configurations

3. **Certificate Issues**
   - Verify proper _acme-challenge CNAME configuration for wildcard domains
   - Check that DNS records match the domains configured in Zerops
   - **Cloudflare-specific certificate problems**:
     - Verify `Always Use HTTPS` is disabled
     - If you encounter **too many redirects** or similar SSL errors:
       - Double-check that SSL/TLS encryption mode is set to *Full* or *Full (strict)*, not *Flexible*
       - SSL mode might show incorrectly for newly added domains, try refreshing the page if settings appear incorrect

## Technical Background

### Understanding Shared IPv4 Addresses {#understand-shared-ipv4}

Shared IPv4 allows multiple Zerops projects to use the same IPv4 address while maintaining separate routing for each project. Here's how it works:

1. When a visitor makes a request, it first arrives at the shared IPv4 address
2. The system looks at the domain name in the request (using SNI - Server Name Indication)
3. For security, it checks if this domain properly resolves to your project's IPv6 address
4. Only if IPv6 address matches your project will the traffic be routed correctly

This is why configuring both A (IPv4) and AAAA (IPv6) records is crucial when using shared IPv4 addresses - the IPv6 record acts as a security key that helps prevent unauthorized use of the shared IPv4 address.

### Certificate Verification Methods

When issuing SSL/TLS certificates, different verification methods are used depending on the certificate type:

#### HTTP-01 vs DNS-01 Verification

- **Regular certificates** (for a single domain like `<your-domain>`) are typically issued using the **HTTP-01** challenge method. This verification checks that you control the domain by placing a specific file at a specific URL.

- **Wildcard certificates** (for domains like `*.<your-domain>`) must be issued using the **DNS-01** challenge method. This method requires creating specific TXT records in your DNS configuration.

### How Zerops Handles Wildcard Certificate Verification

Zerops simplifies the DNS-01 challenge process:

1. You create a CNAME record (e.g., `_acme-challenge.<your-domain> CNAME <your-domain>.zerops.zone`)
2. When a certificate needs to be issued or renewed, Zerops automatically creates the required TXT records on its `zerops.zone` domain
3. The certificate authority verifies these TXT records through the CNAME redirection
4. Once verified, the wildcard certificate is issued without requiring manual intervention



Zerops manages environment variables at two scopes: service level and project level. These variables are handled automatically without requiring `.env` files.

## Service Variables

Variables that are specific to individual [services](/features/infrastructure#services).

### User-Defined Variables

You can define service-level variables in two ways:

#### 1. Build & Runtime Variables

These variables are defined with `envVariables` attribute in the `build` or `run` section of your [zerops.yaml](/zerops-yaml/specification) file and are accessible within their respective containers.

```yaml title="zerops.yaml"
...
  build:
    envVariables:
      DB_NAME: db
      DB_HOST: 127.0.0.1
      DB_USER: db
      DB_PASS: password
    ...
  run:
    envVariables:
      DB_NAME: db
      DB_HOST: 127.0.0.1
      DB_USER: db
      DB_PASS: password
```

See how to [reference variables](#referencing-variables) between services and between build and runtime environments.

:::note
Your application must be redeployed when updating environmental variables in `zerops.yaml`.
:::

#### 2. Secret Variables

For storing sensitive data you don't want in your source repository. They can be updated without redeployment (though services need to be restarted).

Secret variables can be managed through:

##### GUI Interface

Navigate to service details and find **Environment variables** in the menu. You can:
- Add individual variables using the "Add secret variable" button
- Edit individual variables through the menu that appears on hover
- Use the bulk editor for managing multiple variables in .env format

<p align="center">
    <Image
    lightImage="/img/screenshots/secret_variables.webp"
    darkImage="/img/screenshots/secret_variables.webp"
    alt="Runtime Secret Variables"
    />
</p>

##### Import Configuration

Create secret variables for a service with `envSecrets` attribute. See the complete [import.yaml structure](/reference/import).

```yaml title="import.yaml"
services:
  ...
  envSecrets:
    S3_ACCESS_KEY_ID: 'your-secret-s3-key'
    S3_ACCESS_SECRET: 'your-s3-access-secret'
```

### System-Generated Variables

Zerops automatically generates variables based on service type.

These variables cannot be deleted and are always listed at the bottom of the environment variables page. Some are read-only (like `hostname`), while others can be edited (like `PATH`).

These variables can also be [referenced](#referencing-variables).

## Project Variables

Variables that apply across all services within a [project](/features/infrastructure#projects). These provide a way to share common configuration across services.

They work similarly to service secret variables but at project scope - they're managed through the GUI and can be updated without redeployment (though services need to be restarted).

### User-Defined Variables

You can set project-wide variables through:

#### GUI Interface

Access **Project environment variables** in your project detail to:
- Add individual variables one by one
- Edit individual variables
- Use the bulk editor with .env format:

#### Import Configuration

Create project variables with `envVariables` attribute. See the complete [import.yaml structure](/reference/import).

```yaml title="import.yaml"
project:
  ...
  envVariables:
    LOG_LEVEL: info
    API_VERSION: v1
```

### System-Generated Variables

Zerops automatically generates project-level variables containing that can be [referenced](#referencing-variables) from services.

## Variable Restrictions

All environment variables must follow these restrictions:

### Key
- Alphanumeric characters only (use `_` to separate words)
- Must be unique within their scope
- Case-sensitive

### Value
- ASCII characters only
- No EOL characters

## Variable Management

### Variable Precedence

When the same environment variable key exists in multiple places, Zerops follows these precedence rules:

1. Service-level variables take precedence over project variables
2. Within service-level:
   - Build/runtime variables override secret variables
   - Build and runtime containers are separate environments

### Referencing Variables

You can reference other variables using the `${variable_name}` syntax:

#### Within Same Service
```yaml
envVariables:
  id: 42069
  hostname: app
  name: ${id}-${hostname}  # Results in: 42069-app
```

#### Across Services
Prefix variables with their respective service name:
```yaml
setup: dbtest
  run:
    envVariables:
      connectionString: 127.0.0.1

setup: app
  run:
    envVariables:
      dbConnection: ${dbtest_connectionString}
```

#### Between Build and Runtime Environments

Build and runtime are two distinct environments in Zerops. Each environment can have its own set of variables, and you can use the same variable names in both environments since they are separate. Due to this separation, variables defined in one are not automatically accessible in the other.

To share variables between environments, you need to use specific prefixes:
- Use `RUNTIME_` prefix to access runtime variables during build
- Use `BUILD_` prefix to access build variables during runtime

Here's an example of `zerops.yaml` file showing how to reference a runtime variable during build:

```yaml title="zerops.yaml"
build:
  envVariables:
    API_KEY: ${RUNTIME_API_KEY}  # Using runtime variable during build
run:
  envVariables:
    API_KEY: "12345-abcde"      # Referenced in build with RUNTIME_ prefix
```

#### Project Variables
No prefix needed when referencing project variables:
```yaml title="import.yaml"
project:
  ...
  envVariables:
    projectName: devel
```

```yaml title="zerops.yaml"
envVariables:
  id: 42069
  hostname: app
  name: ${projectName}-${hostname}  # Results in: devel-app
```

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*


Zerops organizes your infrastructure into three hierarchical levels: **projects**, **services**, and **containers**.

## Projects

A project is the top-level entity in Zerops, functioning as a private network where services can communicate internally and share environment variables. Each project provides essential infrastructure including load balancing, routing, and container orchestration.

:::tip
Consider your project organization strategy carefully. You can create separate projects for different environments or consolidate multiple applications in a single project to optimize resource usage.
:::

### Key Project Features

Projects provide several important capabilities:
- **Private Networking**: All services within a project share a secure network
- **Environment Variables**: Services can access shared environment variables
- **IPv6/IPv4 Addressing**: Each project receives an IPv6 address, with optional IPv4 addressing

### Project Core

When you create a project, it requires a functioning **core** that includes:
- Logger and statistics services
- HTTP routing with automatic SSL certificate management
- IP routing with integrated firewall

Zerops offers two core types to match different needs and budgets:

### Lightweight Core

Our single-container solution that packs everything you need to get started quickly. Includes a project controller, L3 balancer, firewall, logger, statistics, and HTTP handling—all in one efficient package. Perfect for development projects and smaller production workloads where simplicity matters. Automatically handles SSL certificates and load balancing without complex setup.
<br/>
<Image
  lightImage="/img/mind-maps/lightweight.svg"
  darkImage="/img/mind-maps/lightweight-dark.svg"
  style={{
    width: '44%',
    height: 'auto',
    display: 'block',
    margin: '0 auto 0 0' /* top right bottom left */
  }}
  alt="Lightweight Core"
/>

### Serious Core

Enterprise-grade infrastructure designed for mission-critical applications. Separates core services across multiple containers for true redundancy and high availability. Includes redundant project controllers and balancers, dedicated statistics and logging services, and advanced HTTP management. Ideal when your production workloads demand maximum reliability and scalability without compromise.
<br/>
<Image
  lightImage="/img/mind-maps/serious.svg"
  darkImage="/img/mind-maps/serious-dark.svg"
  style={{ width: '100%', height: 'auto' }}
  alt="Serious Core"
/>

### Features Comparison

Compare our core infrastructure options side-by-side to find the right fit for your project needs, from resource allocations to available features:

<br/>
<table className="w-full">
  <thead>
    <tr>
      <th className="w-fit"></th>
      <th className="w-fit"><strong>Lightweight Core</strong></th>
      <th className="w-fit"><strong>Serious Core</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit font-semibold">Infrastructure</td>
      <td className="w-fit">Single container (limited redundancy)</td>
      <td className="w-fit">Multi-container (highly available)</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold">SSL Termination</td>
      <td className="w-fit"><CheckCircleSolid /></td>
      <td className="w-fit"><CheckCircleSolid /></td>
    </tr>
    <tr>
      <td className="w-fit font-semibold">Automatic Certificate Generation</td>
      <td className="w-fit"><CheckCircleSolid /></td>
      <td className="w-fit"><CheckCircleSolid /></td>
    </tr>
    <tr>
      <td className="w-fit font-semibold">Proxy / Load Balancer</td>
      <td className="w-fit"><CheckCircleSolid /></td>
      <td className="w-fit"><CheckCircleSolid /></td>
    </tr>
    <tr>
      <td className="w-fit font-semibold">IPv6 Address</td>
      <td className="w-fit"><CheckCircleSolid /></td>
      <td className="w-fit"><CheckCircleSolid /></td>
    </tr>
    <tr>
      <td className="w-fit font-semibold">Build Time</td>
      <td className="w-fit">15 hours</td>
      <td className="w-fit">150 hours</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold">Backup Space</td>
      <td className="w-fit">5 GB</td>
      <td className="w-fit">25 GB</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold">Egress</td>
      <td className="w-fit">100 GB</td>
      <td className="w-fit">3 TB</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold">Failover Protection</td>
      <td className="w-fit">Limited</td>
      <td className="w-fit">Comprehensive</td>
    </tr>
  </tbody>
</table>

For detailed pricing information on both core types, visit our [pricing page](/features/pricing#project-core-plans).

## Services

Services encapsulate your containers and provide specific functionality. A project can contain unlimited services, each with its own purpose.

Services in Zerops can be:
- **Fully managed**: Zerops handles scaling, routing, and repairs automatically
- **Partially managed**: You maintain control over certain management aspects

## Containers

Containers are the most granular level of the Zerops architecture. Each service consists of one or more containers that work together to deliver functionality.

In High Availability (HA) mode, a service may utilize multiple containers with different roles. For example, a fully managed MariaDB service might use 5 containers: 3 for the database and 2 for proxies.

Containers in Zerops:
- Use predefined images ranging from fully managed databases to customizable Ubuntu environments
- Can be exposed to the public via Zerops subdomains, custom domains, or public ports (for applicable service types only)
- Operate within the service's resource constraints



export const languages = [
    { name: "Node.js", link: "/nodejs/how-to/env-variables#how-to-read-env-variables-from-your-nodejs-app" },
    { name: "PHP", link: "/php/how-to/env-variables#how-to-read-env-variables-from-your-php-app" },
    { name: "Python", link: "/python/how-to/env-variables#how-to-read-env-variables-from-your-python-app" },
    { name: "Go", link: "/go/how-to/env-variables#how-to-read-env-variables-from-your-go-app" },
    { name: ".NET", link: "/dotnet/how-to/env-variables#how-to-read-env-variables-from-your-dotnet-app" },
    { name: "Rust", link: "/rust/how-to/env-variables#how-to-read-env-variables-from-your-rust-app" }
]

export const builds = [
    { name: "Node.js", link: "/nodejs/how-to/build-process##nodejs-build-hardware-resources" },
    { name: "PHP", link: "/php/how-to/build-process#php-build-hardware-resources" },
    { name: "Python", link: "/python/how-to/build-process#python-build-hardware-resources" },
    { name: "Go", link: "/go/how-to/build-process#go-build-hardware-resources" },
    { name: ".NET", link: "/dotnet/how-to/build-process#dotnet-build-hardware-resources" },
    { name: "Rust", link: "/rust/how-to/build-process#rust-build-hardware-resources" },
    { name: "Java", link: "/java/how-to/build-process#java-build-hardware-resources" },
]

export const customizeBuild = [
    { name: "Node.js", link: "/nodejs/how-to/build-process#customize-nodejs-build-environment" },
    { name: "PHP", link: "/php/how-to/build-process#customize-php-build-environment" },
    { name: "Python", link: "/python/how-to/build-process#customize-python-build-environment" },
    { name: "Go", link: "/go/how-to/build-process#customize-go-build-environment" },
    { name: ".NET", link: "/dotnet/how-to/build-process#customize-net-build-environment" },
    { name: "Rust", link: "/rust/how-to/build-process#customize-rust-build-environment" },
    { name: "Java", link: "/java/how-to/build-process#customize-java-build-environment" },
]

export const customizeRuntime = [
    { name: "Node.js", link: "/nodejs/how-to/customize-runtime" },
    { name: "PHP", link: "/php/how-to/customize-runtime" },
    { name: "Python", link: "/python/how-to/customize-runtime" },
    { name: "Go", link: "/go/how-to/customize-runtime" },
    { name: ".NET", link: "/dotnet/how-to/customize-runtime" },
    { name: "Rust", link: "/rust/how-to/customize-runtime" },
    { name: "Java", link: "/java/how-to/customize-runtime" },
]

## Configure the pipeline

Zerops provides a customizable build and runtime environment for your application.
Start by adding a [zerops.yaml](/zerops-yaml/specification) file to the **root of your repository** and modify it to fit your application.

Here is a basic example for a Node.js application:

```yaml
zerops:
  - setup: api
    build:
      base: nodejs@20
      buildCommands:
        - npm i
        - npm run build
      deployFiles: ./dist
      cache: node_modules
    run:
      base: nodejs@20
      start: npm start
```

The zerops.yaml in your repository tells Zerops how to build and deploy your application.

Zerops will follow these instruction when the build & deploy pipeline is triggered for the Node.js service named `api`:

1. Create a standard build environment with the Node.js v.20 preinstalled.
2. Build your app using these commands: `npm i`, `npm run build`
3. Create a standard runtime environment with the Node.js v.20 preinstalled.
4. Deploy the built artefact from the `./dist` folder to the runtime container
5. Cache the content of the `./node_modules` folder for the next build
6. Start your application using the `npm start` command

Learn more about all `zerops.yaml` parameters for your runtime:

<GroupCards emoji="🚀" heading="Know more about zerops.yaml for your Runtime" items={languages} />

## Trigger the pipeline

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-1.webp"
    darkImage="/img/mind-maps/build-deploy/step-1-dark.webp"
    alt="build deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### Automatically

Trigger the build & deploy pipeline automatically with each push to the selected branch or with a new tag. Create a new runtime service and connect it to your GitHub repository or GitLab repository.

<p align="center">
  <Image
    lightImage="/img/gui/github-integration.webp"
    darkImage="/img/gui/github-integration.webp"
    alt="github integration"
    style={{ width: '95%', height: 'auto' }}
    caption="Github Integration via Zerops GUI"
  />
</p>

### Manually

To start a new build & deploy pipeline manually, use the [Zerops CLI](/references/cli). zCLI is the Zerops command-line tool.

The [zcli service push](/references/cli/commands#service-push) command uploads your application code, builds and deploys your application in Zerops.

The command triggers the build pipeline defined in `zerops.yaml`. `zerops.yaml` must be in the working directory. The working directory is by default the current directory and can be changed using the `--workingDir` flag.

zCLI uploads all files and subdirectories of the working directory to Zerops and starts the build pipeline. If the `.gitignore` file is found, it is interpreted and the defined files and folders will be ignored.

#### Push command parameters

```sh
Usage:
  zcli push [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.
  -h, --help                     the service push command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

If you just want to [deploy](#deploy-phase) your already built application to Zerops, use the <a href="/references/cli/commands#service"><code>zcli service deploy</code></a> command instead.

## Build phase

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-2.webp"
    invertColors={true}
    alt="build deploy pipeline step 2"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

Zerops starts a temporary build container and performs following actions:

1. Installs the build environment.
2. Downloads your application source code from [GitHub ↗](https://www.github.com), [GitLab ↗](https://www.gitlab.com) or via [Zerops CLI].
3. Optionally customizes the build environment.
4. Runs the build commands.
5. Uploads the application artefact to the internal Zerops storage and prepares it for the deploy.
6. Optionally [caches](/features/build-cache) the selected files for the next build.

The build container is automatically deleted after the build has finished or failed.

### Build hardware resources

Each runtime service have different HW resources for build containers:


<GroupCards emoji="🚀" heading="Explore build hardware resources for your runtime" items={builds} />

The build container is always started with the minimum hardware resources and scales vertically up to the maximum resources.

:::info
Hardware resources of the build containers are not charged. The build costs are covered by the standard Zerops [project fee](https://zerops.io/#pricing).
:::

### Build time limit

The time limit for the whole build pipeline is **1 hour**. After 1 hour, Zerops terminates the build pipeline and deletes the build container.

### Customize the build environment

Each runtime service in Zerops has a default build environment with a major version based on the [build.base](/zerops-yaml/specification#base-) attribute in `zerops.yaml`.
To install additional packages or tools add one or more [build.prepareCommands](/zerops-yaml/specification#preparecommands-) commands to your `zerops.yaml`.

Learn more about what is included in the default build environment:

<GroupCards emoji="🚀" heading="Customize your build environment of your Runtime" items={customizeBuild} />

## Deploy phase

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-3.webp"
    invertColors={true}
    alt="Build Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### Application artefact

When the [build phase](/dotnet/how-to/build-process) is finished, the application artefact is stored in the internal Zerops storage and the build container is deleted.

If you triggered the deploy pipeline [manually](/dotnet/how-to/trigger-pipeline#manual-deploy-using-zerops-cli) using Zerops CLI, the application artefact is also uploaded to the internal Zerops storage.

Zerops uses the stored artefact to deploy the identical version of your application each time a new container is started:

- when a new application version is deployed
- when the application [scales horizontally](/dotnet/how-to/create#horizontal-auto-scaling)
- when a runtime container fails and a new container is started automatically

### First deploy

When your application is deployed for the first time, Zerops will start one or more runtime containers based on the service [auto scaling settings](/go/how-to/scaling).

Zerops performs following actions for each new container:

1. Installs the runtime environment
2. Downloads the application artefact from the internal storage
3. Optionally runs the [init commands](/go/how-to/build-pipeline#initcommands)
4. Starts your application using the [start command](/go/how-to/build-pipeline#start)
5. Optionally waits until the [readiness check](/go/how-to/build-pipeline#readiness-check) succeeds
6. The container is now active and receives incoming requests.

Services with multiple containers are deployed in parallel.

:::info
If your application needs to be initialized in each runtime container, add [init commands](/go/how-to/build-pipeline#initcommands) to `zerops.yaml`.
:::

:::caution
Do not use the `initCommands` for customising your runtime environment. See [how to customize the runtime environment](/go/how-to/customize-runtime).
:::

### Further deploys

When a previous version of your application is already running, Zerops will start new containers. The count of new containers will be the same as the count of existing containers.

Zerops performs the identical actions for each new container as the first deployment.
When all new containers are started your service contains both new and old versions for a short period of time.

The old containers are then removed from the project balancer so they don't receive new requests. The PHP process inside each of the old containers is terminated and all old containers are gradually deleted.

### Readiness checks

If your application isn't ready to handle requests right after it is started via the [start command](/nodejs/how-to/build-pipeline#start), configure a [readiness check](/nodejs/how-to/build-pipeline#readiness-check) in your `zerops.yaml`.

If the readiness check is defined, Zerops will:

1. Start your application
2. Perform a readiness check
3. If the readiness check fails, wait 5 seconds and repeat step 2.
4. If the readiness check succeeds, set the container as active.

Application in the runtime container with a pending readiness check won't receive any incoming requests. Only active containers receive incoming requests to your Node.js service.

If the readiness check is still failing after 5 minutes, the specific runtime container is marked as failed and Zerops will delete it, create a new runtime container and perform the deploy.

The <a href="/nodejs/how-to/build-pipeline#httpget">`httpGet`</a> readiness check is successful when the URL returns HTTP status code `2xx`. The timeout is 5 seconds. When the URL returns a `3xx` HTTP status, the readiness check HTTP client will follow the redirect.

The <a href="/nodejs/how-to/build-pipeline#exec">`exec.command`</a> readiness check is successful when the command returns status code 0. The timeout is 5 seconds.

Read the [runtime log](/nodejs/how-to/logs#runtime-log) to troubleshoot failed readiness checks.

## Customize the runtime environment

Each runtime service in Zerops has a default runtime environment with a major version based on the [run.base](/zerops-yaml/specification#base--1) attribute in `zerops.yaml`.
To install additional packages or tools add one or more [run.prepareCommands](/zerops-yaml/specification#preparecommands--1) commands to your `zerops.yaml`.

Learn more about what is included in the default runtime environment:

<GroupCards emoji="🚀" heading="Customize your runtime environment with zerops.yaml" items={customizeRuntime} />

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/custom-runtime.webp"
    invertColors={true}
    alt="Build Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

When the first deploy with a defined [prepareCommands](/zerops-yaml/specification#preparecommands--1) attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container]
3. run the [run.prepareCommands](/zerops-yaml/specification#preparecommands--1) commands in the defined order

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the [build.addToRunPrepare](/zerops-yaml/specification#addtorunprepare-) and [run.prepareCommands](/zerops-yaml/specification#preparecommands--1) attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.

## Manual deploy using Zerops CLI

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    invertColors={true}
    alt="Manual Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

To start only a deploy pipeline, use the [Zerops CLI](/references/cli). zCLI is the Zerops command-line tool.

The <a href="/references/cli/commands#deploy">`zcli service deploy`</a> command uploads your application and deploys it in Zerops. Use this tool if you have your own build process. If you want to build your application in Zerops, use an [automatic](#automatically) or [manual](#manually) build process.

```sh
Usage:
  zcli service deploy pathToFileOrDir [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
  -h, --help                     the service deploy command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

`pathToFileOrDir` defines a path to one or more directories and/or files relative to the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

`zerops.yaml` must be placed in the working directory.

:::info
You can change the deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your working directory.
:::

## Manage build and deploys

### Cancel running build

When you know that the running build is not correct and you want to cancel it, you can do it in Zerops GUI. Go to the service detail, open the list of running processes and click on the **Open pipeline detail** button. Then click on the **Cancel build** button.

<p align="center">
  <Image
    lightImage="/img/gui/running-build.webp"
    darkImage="/img/gui/running-build.webp"
    alt="Running build"
    style={{ width: '100%%', height: 'auto' }}
  />
</p>

:::caution
The build cancellation is available before the build pipeline is finished. When the build is finished, the deployment cannot be cancelled.
:::

### Application versions

Zerops keeps 10 last versions of your application in the internal storage.

The list of application versions is available in Zerops GUI. Go to the service detail and choose **Service dashboard & runtime containers** from the left menu. The active version is highlighted, show all archived version by clicking on the button below.

<p align="center">
  <Image
    lightImage="/img/gui/pipeline-history.webp"
    invertColors={true}
    alt="Pipeline history"
    style={{ width: '100%', height: 'auto' }}
  />
</p>

The pipeline detail is accessible from the additional menu. The pipeline detail contains

- The pipeline config (`zerops.yaml`) that was used for the selected version
- The build log (if available)
- The prepare runtime log (if available)

You can download the build artefact of the selected version or delete an inactive version manually.

### Restore an archived version

You can restore an archived version by choosing the **Activate** item from the additional menu.
Zerops will deploy the selected version and the active version will be archived.

The environment variables will be restored to the latest moment when the selected version was active.




## What is automatic scaling?

Zerops scales your application or a database based on the current load. If your application isn't used so often the auto scaling reduces the amount of required hardware resources and thus reduces the costs. If your application is used more, then auto scaling increases the resources for the application to make sure it runs smoothly even with the higher demand.

On Zerops, you never pay for resources you don't need. At the same time you don't have to worry about traffic peaks or fast growth as the auto scaling feature handles this with no trouble. By default Zerops scales the applications and databases based on the best practices but you are always in control. Set the ranges for the auto scaling and fine-tune the settings so it fits the exact project and environment needs.

## Vertical and horizontal auto scaling

Each application you deploy starts with the minimum hardware resources: **CPU** cores, **RAM** and **Disk**. Zerops monitors the usage of these 3 resources and if the usage exceeds a set threshold, more CPU cores, RAM or Disk is allocated to the service. This is called **vertical scaling**.

**Horizontal scaling** adds or removes whole containers.

Zerops has a preference for vertical scaling because it's faster and more precise. If the vertical auto scaling hits the defined maximum a new container is started automatically. When your application doesn't need so much power and all containers are vertically scaled down, Zerops will gradually remove whole containers.

<Video
  width="90%"
  autoplay="true"
  loop="loop"
  muted="muted"
  preload="none"
  src="/vids/containers.webm"
  plays-inline="true"
/>

## Auto scaling configuration for runtimes

Both minimum and maximum limits for auto scaling are under your control. Technical minimums for CPU cores, RAM and Disk are preset for each runtime service. Configure the minimums and maximums CPU cores, RAM and Disk depending on the needs of your application and Zerops will scale them within defined limits.

You can change the settings any time, Zerops will update the number of containers and their allocated resources accordingly.

## Shared vs. dedicated CPU

#### Shared

Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is dependent on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

#### Dedicated

Your application gets exclusive access to the full physical CPU core. This means the entire processing power is guaranteed and reserved only for your application, ensuring consistent and predictable performance without any resource contention from other applications. This mode is ideal for production environments and CPU-intensive workloads where performance stability is critical.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

Choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your application starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#shared-vs-dedicated-cpu) to dedicated to allocate the stable CPU power to your application.

<Video
  width="90%"
  autoplay="true"
  loop="loop"
  muted="muted"
  preload="none"
  src="/vids/cpu-scaling.webm"
  plays-inline="true"
/>

If your application doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

By default Zerops keeps a minimum free RAM in each container. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your application need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<Video
  width="90%"
  autoplay="true"
  loop="loop"
  muted="muted"
  preload="none"
  src="/vids/ram-scaling.webm"
  plays-inline="true"
/>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Auto scaling configuration for databases

Vertical auto scaling configuration for databases is identical to runtime services. Technical minimums for CPU cores, RAM and Disk are preset according to the database type and version.

You can choose 2 modes for each database: **Single Container** or **Highly Available** mode. The mode cannot be changed after the database is created.

<Video
  width="100%"
  autoplay="true"
  loop="loop"
  muted="muted"
  preload="none"
  src="/vids/shared-storage-scaling.webm"
  plays-inline="true"
/>

### Database in the Single Container mode

In the **Single Container** mode the database is deployed in a single container. The number of containers cannot be increased. This mode is useful for non-essential data or dev environments.

Your data is stored only in a single container. If the container or the underlying physical machine fails, your data since the last backup will be lost. Zerops is not able to provide any automatic repair of single container mode databases.

### Database in the Highly Available mode

If the **Highly Available** mode is chosen, Zerops will deploy the database cluster with a fixed number of containers and control mechanisms for automatic cluster repair.

The KeyDB (Redis) cluster consists of 2 containers in the master-master replica. MariaDB and PostgreSQL databases are deployed in 3 containers connected in the High Availability cluster with 2 additional load balancers which ensures high reliability.

You are not charged for the resources consumed by load balancers.

This mode is highly recommended for production use.

### Prevent the data loss by using the HA mode

Zerops always keeps the database containers on different physical machines. All your data is stored redundantly in 3 identical copies (2 in case of Redis). In case of a failure of a container or the underlying physical machine, Zerops automatically disconnects the failed container from the cluster, creates a new container and syncs all data from the remaining copies. Finally the broken container is automatically deleted.

## Auto scaling configuration for shared storage

Vertical auto scaling configuration for shared storage is identical to database. Technical minimums for CPU cores, RAM and Disk are preset.

You can choose 2 modes for a shared storage service: Single Container or Highly Available mode. The mode cannot be changed after the shared storage is created.

### Single Container mode shared storage

In the **Single Container** mode the shared storage is deployed in a single container. The number of containers cannot be increased. This mode is useful for non-essential data or dev environments.

Your data is stored only in a single container. If the container or the underlying physical machine fails, your data since the last backup will be lost. Zerops is not able to provide any automatic repair of single container mode shared storages.

<Video
  width="100%"
  autoplay="true"
  loop="loop"
  muted="muted"
  preload="none"
  src="/vids/database-scaling.webm"
  plays-inline="true"
/>

### Highly Available mode shared storage

If the **Highly Available** mode is chosen, Zerops will deploy the shared storage cluster with 3 containers and control mechanisms for automatic cluster repair.

This mode is highly recommended for production use.

### Prevent the data loss by using the HA mode

Zerops always keeps the shared storage containers on different physical machines. All your data is stored redundantly in 3 identical copies. In case of a failure of a container or the underlying physical machine, Zerops automatically disconnects the failed container from the cluster, creates a new container and syncs all data from the remaining copies. Finally the broken container is automatically deleted.


# Laravel on Zerops


> Modern Laravel development demands infrastructure that doesn't get in your way. Zerops provides the foundation that lets you focus on building great apps, not wrestling with environment configuration or resource management.

## Why Zerops for Laravel?

Zerops implements what we call "transparent infrastructure" - you get enterprise-grade capabilities with development-friendly ergonomics. This means:

- **Full system access** across all environments
- **Granular resource control** starting at 0.125GB RAM
- **True environment parity** from local to production
- **Zero-downtime deployments** by default

*No artificial limitations, no framework-specific compromises - just solid infrastructure that lets Laravel do what it does best.*

:::tip
New Zerops accounts receive $15 in free credits for testing. After verifying your account with a $10 initial payment, you'll get an additional $50 in credits.
:::

## Quick Start

Choose a recipe that matches your needs and deploy with a single click. Each recipe sets up a complete environment with all necessary services preconfigured.

All recipes include:
- **PHP 8.3 + Nginx**
- **PostgreSQL 16**
- **L3/L7 balancers**
- **Logging & metrics**

<div className="grid grid-cols-1 md:grid-cols-2 gap-2">
  <div className="min-w-[250px]">
    <CustomCardWithIcon icon={IconLaravel} title="Laravel Minimal">
      <div className="flex-grow pt-0.5">The most bare-bones examples of Laravel app including core services + PostgreSQL.</div>
      <div className="mt-0.5 flex items-center justify-center"><CustomButton link="/frameworks/laravel/recipes/minimal-local" title="Local Development" badgeWidth="200" /></div>
      <div className="mt-0.5 flex items-center justify-center"><CustomButton link="/frameworks/laravel/recipes/minimal-devel" title="Stage Environment" badgeWidth="200" /></div>
      <div className="mt-0.5 flex items-center justify-center"><CustomButton link="/frameworks/laravel/recipes/minimal-prod" title="Production" badgeWidth="200" /></div>
    </CustomCardWithIcon>
  </div>
  <div className="min-w-[250px]">
    <CustomCardWithIcon icon={IconLaravelJetstream} title="Laravel Jetstream">
      <div className="flex-grow pt-0.5">A full-stack setup including Redis, Object Storage, and Mailpit.</div>
            <div className="mt-0.5 flex items-center justify-center"><CustomButton link="/frameworks/laravel/recipes/jetstream-local" title="Local Development" badgeWidth="200" /></div>
            <div className="mt-0.5 flex items-center justify-center"><CustomButton link="/frameworks/laravel/recipes/jetstream-devel" title="Stage Environment" badgeWidth="200" /></div>
            <div className="mt-0.5 flex items-center justify-center"><CustomButton link="/frameworks/laravel/recipes/jetstream-prod" title="Production" badgeWidth="200" /></div>
    </CustomCardWithIcon>
  </div>
    <div className="min-w-[250px]">
      <CustomCardWithIcon icon={IconFilament} title="Filament">
        <div className="flex-grow pt-0.5">Admin panel optimized setup including Redis, Object Storage, and Mailpit.</div>
              <div className="mt-0.5 flex items-center justify-center"><CustomButton link="/frameworks/laravel/recipes/filament-local" title="Local Development" badgeWidth="200" /></div>
              <div className="mt-0.5 flex items-center justify-center"><CustomButton link="/frameworks/laravel/recipes/filament-devel" title="Stage Environment" badgeWidth="200" /></div>
              <div className="mt-0.5 flex items-center justify-center"><CustomButton link="/frameworks/laravel/recipes/filament-prod" title="Production" badgeWidth="200" /></div>
      </CustomCardWithIcon>
    </div>
    <div className="min-w-[250px]">
      <CustomCardWithIcon icon={IconTwill} title="Twill CMS">
        <div className="flex-grow pt-0.5">Content management focused setup including Redis, Object Storage, and Mailpit.</div>
              <div className="mt-0.5 flex items-center justify-center"><CustomButton link="/frameworks/laravel/recipes/twill-local" title="Local Development" badgeWidth="200" /></div>
              <div className="mt-0.5 flex items-center justify-center"><CustomButton link="/frameworks/laravel/recipes/twill-devel" title="Stage Environment" badgeWidth="200" /></div>
              <div className="mt-0.5 flex items-center justify-center"><CustomButton link="/frameworks/laravel/recipes/twill-prod" title="Production" badgeWidth="200" /></div>
      </CustomCardWithIcon>
    </div>
</div>

## Core Features

### Infrastructure and Security
Each project runs in its own isolated network with enterprise-level security features automatically configured.

What makes this special is how it combines security with simplicity - this infrastructure requires zero configuration from you – it's all handled automatically when you create your project.

### Native Service Discovery
Services within your project communicate seamlessly using internal hostnames:

```php title=".env"
DB_HOST=${db_hostname}
REDIS_HOST=${cache_hostname}
```

*Environment variables are automatically injected and synchronized across all containers.*

### Intelligent Scaling
One of Zerops' most powerful features is its intelligent autoscaling system, which:
* Scales resources (CPU, RAM, Disk) up and down based on actual usage
* Maintains minimum required resources to optimize costs
* Handles both vertical and horizontal scaling automatically
* Manages disk space dynamically (a unique feature in the industry)

Through a simple configuration, you define resource boundaries while Zerops automatically handles the complex scaling decisions:

```yaml
# Example scaling configuration
services:
  - hostname: app
    minContainers: 2
    maxContainers: 6
    cpu:
      min: 1
      max: 4
    ram:
      min: 0.25
      max: 4
```

### Zero-Downtime Deployments
Deploy with confidence using our battle-tested pipeline:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      base: php@8.3
      buildCommands:
        - composer install --no-dev --optimize-autoloader
      deployFiles: ./
      cache: vendor
    run:
      base: php-nginx@8.3
      initCommands:
        - php artisan config:cache
        - php artisan route:cache
        - php artisan migrate --force --isolated
```

### High Availability
Every service can run in HA mode with automatic failover.

```yaml
services:
  - hostname: db
    type: postgresql@16
    mode: HA  # Automatic primary-replica setup

  - hostname: cache
    type: valkey@7.2
    mode: HA  # Redis cluster configuration
```

Setting up a production-grade HA database cluster typically requires deep DevOps expertise. Zerops automates this complexity, giving you an enterprise-grade setup with a single configuration flag:
* **Database Cluster** distributed across multiple physical servers
* **Automatic failover** and data replication
* **Enhanced performance** through load distribution
* **Production-grade reliability** out of the box

## Development Workflow

### Team Collaboration
Zerops enables seamless team development through:

* **Declarative Infrastructure** - version control your entire setup
* **Identical Environments** - every team member gets production-parity
* **Automated Setup** - new team members are productive in minutes
* **Transparent Configuration** - easily review and audit changes

### Local Development
Connect to your production-grade databases without any local setup through Zerops' VPN.
Start with
```
zcli vpn up
```
and select your project. Get your database credentials from the service's **Access details** in your project dashboard and update your local `.env`. See PostgreSQL example below:

```yaml
DB_CONNECTION=pgsql
DB_HOST=db.zerops  # References the service's hostname
DB_PORT=5432
DB_DATABASE=db
DB_USERNAME=db
DB_PASSWORD=[password from Access details]
```

With this configuration, you can use any database tool - no local installation needed.

### Deployment Options
Choose the workflow that fits your team:

1. **GitHub/GitLab Integration**
   - Automatic deployments on push/merge
   - Branch-specific environments
   - Build caching and artifacts

2. **CLI-Driven Pipeline**
   ```bash
   # Deploy from your terminal
   zcli push
   ```

3. **Manual Triggers**
   - Deploy specific versions
   - Roll back to previous states
   - Test deployment configurations

## Next Steps

- [Environment Variables](/frameworks/laravel/env-variables)
- [Database Migrations](/frameworks/laravel/migrations)
- [Cache & Queue with Redis](/frameworks/laravel/redis)
- [Schedule Jobs & CRON](//frameworks/laravel/cron)
- [SMTP Configuration](/frameworks/laravel/smtp)
- [Logs](/frameworks/laravel/logs)

## Resources

- [Laravel Documentation](https://laravel.com/docs)
- [Laravel Recipe Repository](https://github.com/zeropsio/recipe-laravel-minimal)
- [zCLI Documentation](/references/cli)

*Need help? Join our [Discord community](https://discord.gg/zeropsio) or check out our [quickstart guide](/frameworks/laravel/introduction).*


Zerops provides a convenient way for managing scheduled tasks through CRON jobs, configured directly in your `zerops.yaml` file. These tasks can be scheduled to run on single or multiple containers with granular timing control.

## Basic Configuration

Cron jobs are defined in the `run.crontab` section of your `zerops.yaml`. Each job requires two essential parameters:
- **command**: The command to execute
- **timing**: The CRON schedule expression

```yaml
run: 
  crontab:
    - command: "date >> /var/log/cron.log"
      timing: "0 * * * *"
```

This example logs the current timestamp every hour.

:::tip Detailed Configuration
For comprehensive configuration options and examples, refer to our [CRON configuration guide](/zerops-yaml/cron).
:::

## Common Implementation Patterns
### Laravel Scheduler
To run Laravel's scheduler, configure it to execute every minute:

```yaml
run: 
  crontab:
    - command: "php artisan schedule:run"
      timing: "* * * * *"
      workingDir: /var/www/html
```

### Cleanup Tasks
Execute maintenance tasks on all containers:

```yaml
run: 
  crontab:
    - command: "rm -rf /tmp/*"
      timing: "0 0 * * *"
      allContainers: true
```

### Multiple Jobs
Configure multiple scheduled tasks within a single service:

```yaml
run:
  crontab:
    - command: "php artisan schedule:run"
      timing: "* * * * *"
      workingDir: /var/www/html
    
    - command: "php artisan cache:clear"
      timing: "0 0 * * *"
      workingDir: /var/www/html
      
    - command: "php artisan queue:restart"
      timing: "0 */6 * * *"
      workingDir: /var/www/html
```

## Best Practices

1. **Log Output**: Implement comprehensive logging for debugging and monitoring:
   ```yaml
   command: "php artisan schedule:run >> /var/log/scheduler.log 2>&1"
   ```

2. **Working Directory**: Always specify `workingDir` for Laravel commands to ensure they are executed from the correct location.

3. **Container Selection**: Use `allContainers: true` carefully to avoid duplicate operations in a multi-container setup.

4. **Timing Considerations**: Schedule intensive tasks during off-peak hours.

## Monitoring

Enable detailed scheduler [logging](/frameworks/laravel/logs) in your `.env`:

```
LOG_CHANNEL=daily
```



Zerops manages environment variables without requiring manual `.env` files, enabling application deployment across different environments (development, staging, production) while keeping environment-specific configurations isolated from your code.

Read more about how [environment variables](/features/env-variables) work in Zerops.

## Laravel Environment Variables in Zerops

### Secret Variables
Some Laravel variables contain sensitive information that should never be exposed as plain text. Manage these using Zerops Secret Variables by:
* Creating and managing them through the Zerops GUI
* Defining them in a configuration file when importing a project or service (allows [automatic generation](#automatic-generation-during-import))

When importing a project or service, you can define secret variables directly in your import configuration:
```yaml
services:
  - hostname: app
    type: php-nginx@8.4
    envSecrets:
      APP_KEY: your-secret-key
```

:::tip
Secret variables can be updated at any time without requiring application redeployment.
:::

#### Automatic Generation During Import
If you prefer to have certain secrets **generated automatically**, you can use the [yaml preprocessor](/references/import-yaml/pre-processor). This is optional and only available during import:
```yaml
#yamlPreprocessor=on
services:
  - hostname: app
    type: php-nginx@8.4
    envSecrets:
      APP_KEY: <@generateRandomString(<32>)>
```

### Runtime Variables
These variables, defined in `zerops.yaml`, are typically environment-specific but not sensitive.
:::note
Changes to runtime variables require application redeployment to take effect.
:::

Below is a complete working example of `envVariables` in `zerops.yaml` (sourced from [Laravel Jetstream recipe](https://github.com/zeropsio/recipe-laravel-jetstream/blob/main/zerops.yaml)):

<Dropdown>
<DropdownItem title="Runtime Variables example">
```yaml title="zerops.yaml"
run:
  envVariables:
    APP_LOCALE: en
    APP_FAKER_LOCALE: en_US
    APP_FALLBACK_LOCALE: en
    APP_MAINTENANCE_DRIVER: file
    APP_MAINTENANCE_STORE: database
    APP_TIMEZONE: UTC
    APP_URL: ${zeropsSubdomain}          # References generated variable
    ASSET_URL: ${APP_URL}
    VITE_APP_NAME: ${APP_NAME}

    # PostgreSQL connection settings
    DB_CONNECTION: pgsql
    DB_DATABASE: db
    DB_HOST: db                          # References database service hostname
    DB_PASSWORD: ${db_password}          # References database password
    DB_PORT: 5432
    DB_USERNAME: ${db_user}              # References database user

    # S3-compatible object storage settings
    AWS_ACCESS_KEY_ID: ${storage_accessKeyId}
    AWS_REGION: us-east-1
    AWS_BUCKET: ${storage_bucketName}    # References bucket name of service 'storage'
    AWS_ENDPOINT: ${storage_apiUrl}
    AWS_SECRET_ACCESS_KEY: ${storage_secretAccessKey} # Safely references secret
    AWS_URL: ${storage_apiUrl}/${storage_bucketName}
    AWS_USE_PATH_STYLE_ENDPOINT: true
    FILESYSTEM_DISK: s3

    # Logging Configuration
    LOG_CHANNEL: syslog
    LOG_LEVEL: debug
    LOG_STACK: single

    # SMTP settings for email delivery
    MAIL_FROM_ADDRESS: hello@example.com
    MAIL_FROM_NAME: ZeropsLaravel
    MAIL_HOST: mailpit                   # References mail service hostname
    MAIL_MAILER: smtp
    MAIL_PORT: 1025

    # Redis-based caching and session management
    BROADCAST_CONNECTION: redis
    CACHE_PREFIX: cache
    CACHE_STORE: redis
    QUEUE_CONNECTION: redis
    REDIS_CLIENT: phpredis
    REDIS_HOST: valkey                    # References Redis service hostname
    REDIS_PORT: 6379
    SESSION_DRIVER: redis
    SESSION_ENCRYPT: false
    SESSION_LIFETIME: 120
    SESSION_PATH: /

    # Security Configuration
    BCRYPT_ROUNDS: 12
    TRUSTED_PROXIES: "*"
```
</DropdownItem>
</Dropdown>

Let's look at variable configurations that may need additional context and where to find detailed implementation guides:

#### Application Configuration
Core application settings that define your Laravel app's identity, URL structure, and environment parameters. Reference environment variables from the same service.
```yaml
APP_URL: ${zeropsSubdomain} # zeropsSubdomain variable is system generated
ASSET_URL: ${APP_URL}
VITE_APP_NAME: ${APP_NAME} # APP_NAME variable was created during import (envSecrets)
```

#### Database Configuration
Essential database connection parameters that securely reference your PostgreSQL service `db` by hostname and its variables - `password` and `user`.

It is safe to store `DB_PASSWORD` in `envVariables` by reference as it does not contain the sensitive value itself.

```yaml
DB_HOST: db
DB_PASSWORD: ${db_password}
DB_USERNAME: ${db_user}
```
Read more about [database management](/frameworks/laravel/migrations) for Laravel in Zerops.

#### Storage Configuration
S3-compatible object storage settings that enable efficient file handling and asset management in your Laravel application. Reference variables of Object storage service called `storage`.
```yaml
AWS_ACCESS_KEY_ID: ${storage_accessKeyId}
AWS_REGION: us-east-1
AWS_BUCKET: ${storage_bucketName}
AWS_ENDPOINT: ${storage_apiUrl}
AWS_SECRET_ACCESS_KEY: ${storage_secretAccessKey}
AWS_URL: ${storage_apiUrl}/${storage_bucketName}
AWS_USE_PATH_STYLE_ENDPOINT: true
FILESYSTEM_DISK: s3
```
Read more about [object storage](/object-storage/overview) in Zerops.

#### Logging Configuration
System monitoring and debugging configuration that determines how your application tracks events and errors. Use `syslog` channel to access logs from Zerops Dashboard.
```
LOG_CHANNEL: syslog
```
Learn how to properly [configure logging](/frameworks/laravel/logs) for Laravel in Zerops.

#### Mail Configuration
SMTP server settings that enable your application to send emails through a dedicated mail service. Reference service `mailpit` by hostname.
```
MAIL_HOST: mailpit
```
Learn how to properly [configure SMTP](/frameworks/laravel/smtp) for Laravel in Zerops.

#### Cache and Session
Redis-based configuration for handling application caching, queues, and session management to optimize performance. Reference service `valkey` by hostname.
```
REDIS_HOST: valkey
```
Learn how to properly [configure cache, queue & session management](/frameworks/laravel/redis) for Laravel in Zerops.

:::tip
For automatic execution with each deploy, add these commands to the `initCommands` section of your `zerops.yaml` file.

```yaml title="zerops.yaml"
initCommands:
  - php artisan view:cache
  - php artisan config:cache
  - php artisan route:cache
```
:::



<FAQ>
  <FAQItem question="How do I configure environment variables?">
    You can set environment variables through the Zerops dashboard or in your `zerops.yaml` file under the `run.envVariables` section:

    ```yaml
    zerops:
      - setup: app
        run:
          envVariables:
            APP_KEY: "base64:your-key-here"
            DB_CONNECTION: "pgsql"
            DB_HOST: ${db_host}
    ```
  </FAQItem>

  <FAQItem question="How do I run database migrations?">
    You can run migrations during initialization by adding the command to your `zerops.yaml`:

    ```yaml
    zerops:
      - setup: app
        run:
          initCommands:
            - php artisan migrate --isolated --force
    ```
  </FAQItem>

  <FAQItem question="Can I use Laravel queue with Zerops?">
    Yes, Laravel Queue is fully supported. Configure Redis as your queue driver:

    ```yaml
    zerops:
      - setup: app
        run:
          envVariables:
            QUEUE_CONNECTION: redis
            REDIS_HOST: redis
            REDIS_PORT: 6379
    ```
  </FAQItem>

  <FAQItem question="How do I handle file storage?">
    Zerops supports S3-compatible storage. Configure it using these environment variables:

    ```yaml
    zerops:
      - setup: app
        run:
          envVariables:
            FILESYSTEM_DISK: s3
            AWS_ACCESS_KEY_ID: ${storage_accessKeyId}
            AWS_SECRET_ACCESS_KEY: ${storage_secretAccessKey}
            AWS_BUCKET: ${storage_bucketName}
            AWS_ENDPOINT: ${storage_apiUrl}
            AWS_URL: ${storage_apiUrl}/${storage_bucketName}
            AWS_USE_PATH_STYLE_ENDPOINT: true
    ```
  </FAQItem>

  <FAQItem question="How do I enable HTTPS?">
    HTTPS is automatically enabled when you use either a Zerops subdomain or configure your custom domain. No additional configuration is required.
  </FAQItem>

  <FAQItem question="Can I run scheduled tasks?">
    Yes, you can configure cron jobs in your `zerops.yaml`:

    ```yaml
    zerops:
      - setup: app
        run:
          crontab:
            - command: "php artisan schedule:run"
              timing: "* * * * *"
              workingDir: /var/www/html
    ```
  </FAQItem>

  <FAQItem question="How do I configure Redis for caching?">
    Configure Redis for caching, sessions, and queues:

    ```yaml
    zerops:
      - setup: app
        run:
          envVariables:
            CACHE_STORE: redis
            SESSION_DRIVER: redis
            REDIS_HOST: redis
            REDIS_PORT: 6379
            REDIS_CLIENT: phpredis
    ```
  </FAQItem>

  <FAQItem question="How do I optimize my Laravel application?">
    Add these optimization commands to your initialization:

    ```yaml
    zerops:
      - setup: app
        run:
          initCommands:
            - php artisan view:cache
            - php artisan config:cache
            - php artisan route:cache
            - php artisan optimize
    ```
  </FAQItem>

  <FAQItem question="How do I handle asset compilation?">
    Configure asset compilation in your build phase:

    ```yaml
    zerops:
      - setup: app
        build:
          base:
            - php@8.4
            - nodejs@18
          buildCommands:
            - composer install --optimize-autoloader --no-dev
            - npm install
            - npm run build
          cache:
            - vendor
            - node_modules
    ```
  </FAQItem>

  <FAQItem question="How do I implement health checks?">
    Add health checks to ensure your application is running properly:

    ```yaml
    zerops:
      - setup: app
        deploy:
          readinessCheck:
            httpGet:
              port: 80
              path: /up
        run:
          healthCheck:
            httpGet:
              port: 80
              path: /up
    ```
  </FAQItem>
</FAQ>



<CustomCard title="Experience the simplicity of Zerops">
 Deploy the same Laravel setup as in this tutorial with a single click. All you need is a Zerops account.

  <DeployButton link="laravel-minimal-local" badgeWidth="200" />
</CustomCard>

## Introduction

In this tutorial, you'll learn how to deploy a Laravel application on Zerops. We'll configure a complete environment using Apache as the web server and PostgreSQL as the database.

By the end of this tutorial, you will:
- Have a fresh Laravel installation running locally
- Set up a Zerops project with Apache and PostgreSQL
- Configure zero-downtime deployment with environment variables
- Deploy a production-ready Laravel application with Zerops subdomain access
- Set up secure VPN access to your PostgreSQL database

## Prerequisites
This tutorial assumes you have:
* PHP, Composer, git installed locally
* [Zerops account](https://app.zerops.io/signup)
* [zcli](/references/cli) tool installed

:::note
You don't need to install PostgreSQL locally - Zerops VPN lets you connect directly to the remote database for development.
:::

## Step 1 — Creating a New Laravel Project

Let's start by creating a fresh Laravel project:

```bash
composer create-project laravel/laravel zerops-laravel
cd zerops-laravel
```

Let's verify everything works locally. Start Laravel's development server:

```bash
php artisan serve
```

Visit http://localhost:8000 in your browser. You should see Laravel's welcome page.

:::tip
While we're using Laravel's built-in server for simplicity, you can use any local development setup you prefer (Valet, Sail, XAMPP, etc.).
:::

If you see the welcome page, great! Your local setup is working correctly.

## Step 2 — Setting Up Your Zerops Project

### Log in to zcli

[Log in](/references/cli#personal-access-tokens) to zcli with your **Personal access token**.

### Create Project Configuration

When you create a project in Zerops, you get a production-grade infrastructure with automated security, load balancing, and SSL management. Each project runs in its own isolated network where services communicate securely using simple hostnames, all accessible through VPN for seamless local development.

Learn more about infrastructure features in documentation section [Project & Services Structure](/features/infrastructure).

#### Project Configuration File

The project configuration defines your infrastructure using YAML. This approach provides clear, reproducible configuration that can be version controlled. Later in this tutorial, we'll also show how to achieve the same using the GUI.

Create a new file in your project root called `zerops-project-import.yaml` with the following content:

```yaml title="zerops-project-import.yaml"
#yamlPreprocessor=on
project:
  name: laravel-zerops
  tags:
    - zerops-tutorial # tag for easy filtering (optional)

services:
  - hostname: app
    type: php-apache@8.4
    envSecrets:
      # yamlPreprocessor feat: generates a random 32 char and stores it
      APP_KEY: <@generateRandomString(<32>)>

  - hostname: db
    type: postgresql@16
    mode: HA  # High Availability mode for robust production setup
```

:::tip Generate secrets
The `#yamlPreprocessor=on` directive enables Zerops' [YAML preprocessing](/references/import-yaml/pre-processor) for this import file, allowing us to use dynamic values and built-in functions like `generateRandomString`.
:::

#### Automatic Resource Management

Zerops features intelligent autoscaling that manages all resources (CPU, RAM, Disk) based on actual usage, automatically scaling up and down to optimize costs while maintaining performance.

In this guide, we'll use default scaling ranges and that's why you won't find resource configurations in the import file. See current ranges for [horizontal](/php/how-to/scaling#horizontal-auto-scaling) and [vertical](/php/how-to/scaling#vertical-auto-scaling) scaling of PHP services.

#### High-Availability Database

In this guide, [enabling HA mode](/postgresql/how-to/scale#horizontal-scaling) creates a database cluster across three physical servers, with all the complexity managed automatically by Zerops.

Through Zerops VPN, you can securely access this database setup directly from your local machine, ensuring your development environment matches production exactly.

#### Import the Project
Now create the project by running:
```bash
zcli project project-import zerops-project-import.yaml
```

### Alternative: Creating Project via GUI

You can also create and configure your project through the Zerops dashboard:

1. Log into your [Zerops Dashboard](https://app.zerops.io)
2. Click **Add new project**
3. Set a project name (e.g., "laravel-zerops") and click **Create project**

Then add the required services:

1. **PHP + Apache Service:**
   - Click **Add Service** and select **PHP+Apache**
   - Set hostname to "app"
   - Keep all other settings as default

2. **PostgreSQL Service:**
   - Click **Add Service** and select **PostgreSQL**
   - Set hostname to "db"
   - Keep all other settings as default

## Step 3 — Configuring Your Application

The [deployment configuration](/zerops-yaml/specification) controls how your application builds and runs. Create a `zerops.yaml` file in your project root:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      base:
        - php@8.4
      buildCommands:
        - composer install --ignore-platform-reqs
      deployFiles: ./
      cache:
        - vendor
        - composer.lock
    deploy:
      readinessCheck:
        httpGet:
          port: 80
          path: /up
    run:
      base: php-apache@8.4
      envVariables:
        APP_NAME: "Laravel Zerops Demo"
        APP_DEBUG: false
        APP_ENV: production
        APP_URL: ${zeropsSubdomain}
        DB_CONNECTION: pgsql
        DB_HOST: db
        DB_PORT: 5432
        DB_DATABASE: db
        DB_USERNAME: ${db_user}
        DB_PASSWORD: ${db_password}
        LOG_CHANNEL: stack
        LOG_LEVEL: debug
        SESSION_DRIVER: database

      initCommands:
        - php artisan config:cache
        - php artisan route:cache
        - php artisan migrate --force --isolated
        - php artisan optimize
      healthCheck:
        httpGet:
          port: 80
          path: /up
```

Let's break down some important parts of this configuration:

### Environment Variables

Zerops automatically generates and securely manages various environment variables. For example, `zeropsSubdomain` provides your application's URL, while database credentials `user` and `password` are variables of the `db` service. It is possible to reference any variable or a service by hostname within your project's private network.

```yaml
APP_URL: ${zeropsSubdomain}  # Automatically set to your app's Zerops URL
DB_USERNAME: ${db_user}      # Database credentials auto-injected
DB_PASSWORD: ${db_password}  # Securely managed by Zerops
```

Learn more about [environment variables](/frameworks/laravel/env-variables) for Laravel.

### Safe Database Migrations
```yaml
php artisan migrate --force --isolated
```

The `--isolated` flag prevents multiple servers from running migrations simultaneously by using a cache lock, ensuring safe database updates during deployment.

### Health Checks

The health check configuration ensures your application is running correctly:
```yaml
    readinessCheck:
        httpGet:
          port: 80
          path: /up
    ...
    healthCheck:
        httpGet:
          port: 80
          path: /up
```

By default, latest version of Laravel responds with a 200 OK status on the `/up` endpoint, so no additional configuration is needed.

## Step 4 — Deploying Your Application

Now comes the exciting part - deploying your application to Zerops!

### Deploying Your Code

Initialize git in your project directory:
```bash
git init
```

:::note
Git is required to track changes for deployment. You don't need to commit, but initializing git helps Zerops manage the deployment files.
:::

Push your code to Zerops, select your project and service when prompted:
```bash
zcli push
```

### Monitoring the Deployment

1. Go to the [Zerops Dashboard](https://app.zerops.io)
2. In the top-left corner, you'll see a circle with **running process** text
3. Click it to see the build progress overview
4. Click **Open pipeline detail** button to view the detailed build process

You'll see the deployment progress with timing for each step:
- Initializing build container
- Running build commands from zerops.yaml
- Creating app version and upgrading PHP+Apache service

The entire process usually takes less than a minute to complete.

## Step 5 — Verifying Your Deployment

Once the deployment completes, let's verify everything works:

1. Go to your project's app service
2. Click on **Public access & internal ports**
3. Find the **Public Access through zerops.app Subdomain** section
4. Toggle **Enable Zerops Subdomain Access**
5. Click the generated URL (e.g., `https://app-xxx.prg1.zerops.app`) to view your application

:::note
The Zerops subdomain is perfect for testing and development, but for production, you should [set up your own domain](/features/access#public-access-through-your-domain) under **Public Access through Your Domains**.
:::

### Testing Database Connectivity

Let's create a quick route to test database connectivity. Add this to your `routes/web.php`:

```php
Route::get('/db-test', function () {
    session()->save();
    return 'Current number of active sessions in database: ' . Illuminate\Support\Facades\DB::table('sessions')->count();
});
```

Deploy this change:
```bash
zcli push
```

Visit `{your-app-url}/db-test` to verify database connectivity.

## Accessing Your Database Locally

Once your application is deployed, you might want to access the database directly from your local machine. Zerops makes this easy with VPN access.

### Setting up VPN Access

1. Start the VPN connection:
```bash
zcli vpn up
```

2. Select your project when prompted
3. Try http://app.zerops/ to verify connectivity.

That's it! You now have direct access to all services in your project.

### Connecting to Database

To get your database credentials:
1. Go to the PostgreSQL service in your project
2. Click **Access details** button
3. Here you'll find all connection details including hostname, port, user, and password

Update your local `.env` file with these credentials:

```ini
DB_CONNECTION=pgsql
DB_HOST=db.zerops
DB_PORT=5432
DB_DATABASE=db
DB_USERNAME=db
DB_PASSWORD=[password from Access details]
```

Now you can use your favorite database management tool or run artisan commands while working with the database in Zerops - no local PostgreSQL installation needed!

## Next Steps

Now that your Laravel application is running on Zerops, consider:

1. Setting up a [custom domain](/features/access#public-access-through-your-domain)
2. Implementing basic CI/CD pipelines with [GitHub](/references/github-integration) or [GitLab](/references/gitlab-integration) integration
3. Setting up [object storage](/object-storage/overview)

## Conclusion

Congratulations! 🎉 You've successfully deployed a Laravel application on Zerops with Apache and PostgreSQL. Your application is now running in a production-ready environment with automated builds and deployments.

### Additional Resources

- [Laravel Documentation](https://laravel.com/docs)
- [Laravel Recipe Repository](https://github.com/zeropsio/recipe-laravel-minimal)
- [zCLI Documentation](/references/cli)

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*



Zerops provides comprehensive logging capabilities for Laravel applications using its distributed logging architecture. This guide shows you how to set up and optimize Laravel logging on Zerops, ensuring your application logs are properly captured and accessible.

## Accessing Logs

Learn how to [access and view your logs](/php/how-to/logs) in Zerops.

## Configuration

### Zerops Environment Variables

Laravel logging in Zerops is configured through environment variables, such as:

- `LOG_CHANNEL`: Specifies which logging channel to use (e.g., 'syslog', 'stack')
- `LOG_STACK`: When using the stack channel, defines which channels to include
- `LOG_LEVEL`: Sets the minimum log level to capture (e.g., 'debug', 'info', 'error')

```yaml title="zerops.yaml"
zerops:
  - setup: app
    run:
      envVariables:
        LOG_CHANNEL: syslog
        LOG_LEVEL: debug
        LOG_STACK: single
```

:::tip Available Log Channels
Laravel supports several logging channels out of the box:
- **stack**: Aggregates multiple logging channels into a single channel
- **single**: Writes logs to a single file (storage/logs/laravel.log)
- **daily**: Creates daily rotating log files
- **syslog**: Writes to system log (recommended for Zerops)
- **stderr**: Writes to PHP's standard error output stream
- **errorlog**: Uses PHP's error_log function
- **slack**: Sends log messages to Slack
- **papertrail**: Sends logs to Papertrail
- **mongodb**: Stores logs in MongoDB (requires additional package)
:::

To use multiple logging channels, [configure](#laravel-configuration) the stack channel:

```yaml
LOG_CHANNEL: stack
LOG_STACK: syslog,daily
```

This configuration logs to both syslog (for Zerops) and daily files (for local access).

:::tip
Using appropriate log levels makes it easier to filter and find relevant messages in the Zerops GUI.
:::

### Laravel Configuration

While Zerops is configured through environment variables, these variables are interpreted by Laravel's logging system. By default, Laravel includes a logging configuration that works out of the box - you don't need to modify anything.

If you're curious about the underlying configuration or need to customize it beyond environment variables, here's what Laravel's logging configuration typically looks like:

<Dropdown>
    <DropdownItem title="Configuration example">
```php title="config/logging.php"
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [
    'default' => env('LOG_CHANNEL', 'stack'),

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
    ],

    'channels' => [
        'stack' => [
            'driver' => 'stack',
            'channels' => explode(',', env('LOG_STACK', 'single')),
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => env('LOG_DAILY_DAYS', 14),
            'replace_placeholders' => true,
        ],

        'stderr' => [
            'driver' => 'monolog',
            'handler' => StreamHandler::class,
            'with' => [
                'stream' => 'php://stderr',
            ],
            'level' => env('LOG_LEVEL', 'debug'),
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
        ],
    ],
];
```
</DropdownItem>
</Dropdown>

### Using Logs

Laravel provides several ways to write log messages:

```php
// Using facade
use Illuminate\Support\Facades\Log;

Log::emergency($message);
Log::alert($message);
Log::critical($message);
Log::error($message);
Log::warning($message);
Log::notice($message);
Log::info($message);
Log::debug($message);

// Using helper function
logger()->info($message);
logger($message); // defaults to info level

// With context data
Log::info('User failed to login.', ['id' => $user->id]);
```



Database migrations are **version control** for your database schema, allowing you to evolve your database structure alongside your application versions. Each migration represents a specific version change in your application's database schema, ensuring your database structure stays synchronized with your codebase as your application evolves.

This guide covers how to implement and manage these version-based database changes on Zerops, focusing on PostgreSQL as the recommended database system.

## Environment Configuration

Configure your database connection in your environment variables:

```yaml
zerops:
  - setup: app
    run:
      envVariables:
        DB_CONNECTION: pgsql
        DB_HOST: ${db_hostname}
        DB_PORT: 5432
        DB_DATABASE: myapp
        DB_USERNAME: ${db_user}
        DB_PASSWORD: ${db_password}
```

:::warning Backup your data
Before running migrations in production, it's strongly recommended to back up your database. Zerops provides automated daily backups - see our [backup documentation](/features/backup) for details.
:::

## Running Migrations

### Automatic Migrations

The most reliable way to manage migrations in your deployment pipeline is through automatic execution. Configure this in your `zerops.yaml`:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    run:
      initCommands:
        - php artisan migrate --force --isolated
```

:::caution
When running automatic migrations in production, the `--force` flag is necessary to bypass Laravel's safety prompt. Without this flag, Laravel asks for confirmation to help prevent accidental data loss.
:::

:::note Migrations in HA mode
The `--isolated` flag prevents multiple servers from running migrations simultaneously by using a cache lock.
:::

### Manual Migrations

For development and troubleshooting purposes, you can execute migrations manually through SSH:

```bash
# Connect to your zerops project
zcli vpn up

# SSH into your service using it's hostname (app)
ssh app

# For MacOS users
ssh app.zerops
```

## Migration Commands

Essential migration commands for your workflow:

```bash
# Create a new migration file with timestamp
php artisan make:migration create_users_table

# Execute all pending migrations
php artisan migrate

# Revert the most recent migration operation
php artisan migrate:rollback

# Reset and rerun all migrations (warning: destroys existing data)
php artisan migrate:fresh

# Display current migration status
php artisan migrate:status
```

## Best Practices

### Migration Structure

```php {title="database/migrations/create_users_table.php"}
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     * Creates the users table with essential fields.
     */
    public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();                    // Auto-incrementing primary key
            $table->string('name');          // User's full name
            $table->string('email')->unique(); // Unique email address
            $table->timestamp('email_verified_at')->nullable(); // Email verification timestamp
            $table->string('password');      // Hashed password
            $table->rememberToken();         // Remember me token
            $table->timestamps();            // Created_at and updated_at timestamps
        });
    }

    /**
     * Reverse the migrations.
     * Removes the users table completely.
     */
    public function down()
    {
        Schema::dropIfExists('users');
    }
};
```

### Safe Migration Practices

1. **Implement Reversible Changes**
```php
public function down()
{
    // Always provide a way to undo migration changes
    Schema::table('users', function (Blueprint $table) {
        $table->dropColumn('new_column');
    });
}
```

2. **Use Foreign Key Contraints**
```php
public function up()
{
    Schema::table('posts', function (Blueprint $table) {
        // Create relationship with cascading delete
        $table->foreignId('user_id')
              ->constrained()
              ->onDelete('cascade');
    });
}
```

3. **Handle Large Tables Efficiently**
```php
public function up()
{
    // Step 1: Add nullable column to prevent blocking operations
    Schema::table('large_table', function (Blueprint $table) {
        $table->string('new_column')->nullable();
    });

    // Step 2: Update data in manageable chunks
    DB::table('large_table')
        ->orderBy('id')
        ->chunk(1000, function ($records) {
            foreach ($records as $record) {
                DB::table('large_table')
                    ->where('id', $record->id)
                    ->update(['new_column' => 'default_value']);
            }
    });
}
```

## Testing Migrations

### Create a Test Database

Add a testing connection to your `config/database.php`:

```php
'testing' => [
    'driver' => 'pgsql',
    'host' => env('DB_TEST_HOST', '127.0.0.1'),
    'database' => env('DB_TEST_DATABASE', 'testing'),
    'username' => env('DB_TEST_USERNAME', 'postgres'),
    'password' => env('DB_TEST_PASSWORD', ''),
],
```

### Migration Test Example

Create a test file at `tests/Unit/MigrationTest.php`:

```php
/**
 * Test migration execution and schema verification
 */
public function test_migrations_can_be_run()
{
    // Execute all migrations
    Artisan::call('migrate');

    // Verify table creation
    $this->assertTrue(Schema::hasTable('users'));

    // Verify column structure
    $this->assertTrue(Schema::hasColumns('users', [
        'id', 'name', 'email', 'password'
    ]));
}
```

:::tip Migration Tips
* Always create a backup before running migrations in production
* Use database transactions for complex migrations
* Thoroughly test migrations in development environment
* Implement seeders for initial data population
* Monitor execution time for migrations on large tables
:::

## Troubleshooting

Common migration issues and their solutions:

1. **Migration Timeout** Configure longer timeout in [zerops.yaml](/zerops-yaml/specification):
```yaml
zerops:
  - setup: app
    run:
      initCommands:
        - php artisan migrate --force --isolated --timeout=1000
```

2. **Database Lock Timeout** Adjust PDO settings in `config/database.php`:
```php
'pgsql' => [
    // ...
    'options' => [
        PDO::ATTR_LOCK_TIMEOUT => 1000 // Milliseconds
    ]
],
```

3. **Reset Migration State** Commands:
```bash
# Reset all migrations
php artisan migrate:reset

# Re-run all migrations
php artisan migrate
```

## Additional Resources
* [Laravel Migration Documentation](https://laravel.com/docs/11.x/migrations)




[Filament](https://filamentphp.com/) is a collection of tools for rapidly building beautiful TALL stack (Tailwind, Alpine, Laravel, Livewire) applications. It provides a powerful admin panel, form builder, table builder, and other components that help you build feature-rich web applications with minimal effort.

This recipe demonstrates how to effectively integrate Laravel Filament applications with Zerops, providing a fully production-capable setup. While this setup is built for professional deployment, we call it a **development environment** due to its streamlined resource allocation and use of the [Lightweight](/features/infrastructure#project-core) core package, optimizing costs without compromising functionality.

<CustomCard icon={IconFilament} title="Deploy Filament Development Stack">
  <div className="flex-grow pb-1 pt-0.5">Set up a Laravel environment with Filament's admin panel and TALL stack in a development-optimized configuration.</div>
  <DeployButton link="filament-devel" badgeWidth="200" />
</CustomCard>

## Environment Overview

Your newly deployed Laravel Filament environment includes:

- A fully configured Laravel application service with Filament installed
- PostgreSQL database integration with migration automation
- Automated build and deployment pipeline
- Health and readiness checks
- Configured Filament admin panel and components

:::note
For production environments with high-availability services and enterprise-grade reliability, consider deploying the [production environment recipe](/frameworks/laravel/recipes/minimal-prod).
:::

## Application Configuration

The app has been set up to utilize PostgreSQL service and includes Filament's admin panel and components. Your application's deployment process is managed through [zerops.yaml](/zerops-yaml/specification), which handles:

- Database migrations
- Cache management
- File cleanup
- Health check implementation
- Service orchestration
- Filament assets compilation

## Try the build & deploy pipeline in 30 seconds

While Zerops supports various CI/CD workflows (CLI, GitHub Actions, built-in CI/CD), let's start with the simplest path to get you familiar with the core concepts:

1. Create your own repository from our [GitHub template](https://github.com/zeropsio/recipe-laravel-minimal) and clone it locally
2. Navigate to **Pipelines & CI/CD settings** and connect the service with your new GitHub repository, setting the trigger to **Push to Branch**

### Test Your Pipeline

- Make a small change directly in the GitHub UI
- Commit the change and watch the magic happen in project detail

## Integration with Existing Applications

If you're looking to integrate an existing Laravel Filament application with Zerops, review the [changes made over the default installation](https://github.com/zeropsio/recipe-laravel-minimal/blob/main/README.md#changes-made-over-the-default-installation) to understand the necessary modifications.

## Get to know Zerops core concepts in depth
Ready to build from scratch? Our [step-by-step Laravel Filament tutorial](/frameworks/laravel/introduction) takes you through the entire process of integrating Zerops with a new Laravel Filament project.

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*



[Filament](https://filamentphp.com/) is a collection of tools for rapidly building beautiful TALL stack (Tailwind, Alpine, Laravel, Livewire) applications. It provides a powerful admin panel, form builder, table builder, and other components that help you build feature-rich web applications with minimal effort.

This recipe provides a comprehensive Filament setup with PostgreSQL database, Redis-compatible store, object storage, and automated deployment pipeline, designed for **local development** This recipe provides a streamlined Laravel setup with PostgreSQL database and automated deployment pipeline, designed for **local development** with cost-efficient resource allocation and the [Lightweight](/features/infrastructure#project-core) core package. This means:
- Resources are optimized for development workloads
- Services can be started/stopped as needed during active development
- Cost-effective configuration suitable for development and testing

<CustomCard icon={IconFilament} title="Deploy Filament for Local Development">
  <div className="flex-grow pb-1 pt-0.5">Set up a Laravel environment with Filament's admin panel and TALL stack components for efficient local development.</div>
  <DeployButton link="filament-local" badgeWidth="200" />
</CustomCard>

## Environment Overview

Your newly deployed Filament environment includes:

- A fully configured Laravel application service with Filament
- PostgreSQL database integration with migration automation
- Valkey (Redis-compatible KV store) for sessions and cache
- Built-in object storage for filesystem
- Mailpit for development SMTP server
- Automated build and deployment pipeline
- Health and readiness checks

:::note
For production environments with high-availability services and enterprise-grade reliability, consider deploying the [production environment recipe](/frameworks/laravel/recipes/filament-prod).
:::

## What to Expect

The deployment process takes just a few minutes. Once complete, you'll receive:

- A live URL to access your application
- Database credentials
- Access to your project dashboard
- CLI configuration details for VPN access

## Setting Up Local Development

Zerops provides a built-in VPN feature through its CLI tool, enabling seamless local development against remote resources. Here's how to set it up:

### Prerequisites
- Install the [Zerops CLI](/references/cli#get-started) and log in with [personal access token](/references/cli#personal-access-tokens)
- Install [Wireguard](/references/vpn) on your system

### Setup Steps

1. Create your own repository from our [GitHub template](https://github.com/zeropsio/recipe-filament) and clone it locally

2. **Configure VPN Access**
   ```bash
   # Initialize VPN connection using project ID
   zcli vpn up <project-id>

   # Or use interactive mode to select your project
   zcli vpn up
   ```

3. **Set Up Environment**
   ```bash
   # Create and configure environment file
   cp .env.example .env
   ```
   Fill in database access details - in Zerops GUI go to the detail of `db` service and open **Access details** in the left menu.

   ```bash
   composer install
   php artisan key:generate
   npm install
   npm run dev
   ```

4. **Start Development Server**
   ```bash
   php artisan serve # or use your preferred setup (Valet, Herd, Sail)
   ```

Your local environment is now connected to the Zerops infrastructure, utilizing the database, redis and storage from Zerops while maintaining local development flexibility.

## Application Configuration

The app has been set up to utilize:
- Valkey (Redis-compatible KV store) to handle sessions and cache
- Built-in object storage for Laravel and Filament-specific filesystem operations
- Mailpit as a mock SMTP server for development purposes

Your application's deployment process is managed through [zerops.yaml](/zerops-yaml/specification), which handles:

- Database migrations
- Cache management
- File cleanup
- Health check implementation
- Service orchestration

## Try the Build & Deploy Pipeline

Now that you're logged into zcli, deploying your application is straightforward. Simply enter `zcli push` in your terminal from the root of your freshly cloned project.

### Test Your Pipeline

The best way to verify your setup is with a quick test:
- Make a small change directly in the GitHub UI
- Commit the change and watch the magic happen in your project dashboard

### Setting Up Automated CI/CD

To enable automatic deployments:

1. Navigate to **Pipelines & CI/CD settings** in your service dashboard
2. Connect the service with your new GitHub repository
3. Set the trigger to **Push to Branch**

## Integration with Existing Applications

If you're looking to integrate an existing Filament application with Zerops, review the [changes made over the default installation](https://github.com/zeropsio/recipe-filament/blob/main/README.md#changes-made-over-the-default-installation) to understand the necessary modifications.

## Get to know Zerops core concepts in depth
Ready to build from scratch? Our [step-by-step Laravel tutorial](/frameworks/laravel/introduction) takes you through the entire process of integrating Zerops with a new Laravel project.

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*



[Filament](https://filamentphp.com/) is a collection of tools for rapidly building beautiful TALL stack (Tailwind, Alpine, Laravel, Livewire) applications. It provides a powerful admin panel, form builder, table builder, and other components that help you build feature-rich web applications with minimal effort.

This recipe demonstrates how to effectively integrate Laravel Filament applications with Zerops, providing a fully production-grade setup. It's built as a **production environment** with high-availability configuration and uses the [Serious](/features/infrastructure#project-core) core package, ensuring enterprise-grade reliability and robust performance.

<CustomCard icon={IconFilament} title="Deploy Production-Ready Filament">
  <div className="flex-grow pb-1 pt-0.5">Set up a production-ready Laravel environment with Filament's admin panel and TALL stack, backed by enterprise-grade reliability.</div>
  <DeployButton link="filament-prod" badgeWidth="200" />
</CustomCard>

## Environment Overview

Your newly deployed Laravel Filament environment includes:

- A fully configured Laravel application service with Filament installed and high availability
- PostgreSQL database integration with migration automation
- Automated build and deployment pipeline
- Health and readiness checks
- Configured Filament admin panel and components

:::note
For development environments with cost-efficient resource allocation, consider deploying the [development environment recipe](/frameworks/laravel/recipes/minimal-devel).
:::

## Application Configuration

The app has been set up to utilize PostgreSQL service and includes Filament's admin panel and components. Your application's deployment process is managed through [zerops.yaml](/zerops-yaml/specification), which handles:

- Database migrations
- Cache management
- File cleanup
- Health check implementation
- Service orchestration
- Filament assets compilation

## Try the build & deploy pipeline in 30 seconds

While Zerops supports various CI/CD workflows (CLI, GitHub Actions, built-in CI/CD), let's start with the simplest path to get you familiar with the core concepts:

1. Create your own repository from our [GitHub template](https://github.com/zeropsio/recipe-laravel-minimal) and clone it locally
2. Navigate to **Pipelines & CI/CD settings** and connect the service with your new GitHub repository, setting the trigger to **Push to Branch**

### Test Your Pipeline

- Make a small change directly in the GitHub UI
- Commit the change and watch the magic happen in project detail

## Integration with Existing Applications

If you're looking to integrate an existing Laravel Filament application with Zerops, review the [changes made over the default installation](https://github.com/zeropsio/recipe-laravel-minimal/blob/main/README.md#changes-made-over-the-default-installation) to understand the necessary modifications.

## Get to know Zerops core concepts in depth
Ready to build from scratch? Our [step-by-step Laravel Filament tutorial](/frameworks/laravel/introduction) takes you through the entire process of integrating Zerops with a new Laravel Filament project.

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*



Laravel Jetstream provides a polished application scaffolding for Laravel, featuring authentication, registration, email verification, two-factor authentication, session management, API support via Laravel Sanctum, and optional team management features. It serves as the perfect starting point for your next Laravel application.

This recipe demonstrates how to effectively integrate Laravel Jetstream applications with Zerops, providing a fully production-capable setup. While this setup is built for professional deployment, we call it a **development environment** due to its streamlined resource allocation and use of the [Lightweight](/features/infrastructure#project-core) core package, optimizing costs without compromising functionality.

<CustomCard icon={IconLaravelJetstream} title="Deploy Laravel Jetstream Development Stack">
  <div className="flex-grow pb-1 pt-0.5">Set up a Laravel environment with Jetstream's team features and authentication system in a development-optimized configuration.</div>
  <DeployButton link="laravel-jetstream-devel" badgeWidth="200" />
</CustomCard>

## Environment Overview

Your newly deployed Laravel Jetstream environment includes:

- A fully configured Laravel application service with Jetstream installed
- PostgreSQL database integration with migration automation
- Automated build and deployment pipeline
- Health and readiness checks
- Configured Jetstream authentication system

:::note
For production environments with high-availability services and enterprise-grade reliability, consider deploying the [production environment recipe](/frameworks/laravel/recipes/minimal-prod).
:::

## Application Configuration

The app has been set up to utilize PostgreSQL service and includes Jetstream's authentication scaffolding. Your application's deployment process is managed through [zerops.yaml](/zerops-yaml/specification), which handles:

- Database migrations
- Cache management
- File cleanup
- Health check implementation
- Service orchestration
- Jetstream assets compilation

## Try the build & deploy pipeline in 30 seconds

While Zerops supports various CI/CD workflows (CLI, GitHub Actions, built-in CI/CD), let's start with the simplest path to get you familiar with the core concepts:

1. Create your own repository from our [GitHub template](https://github.com/zeropsio/recipe-laravel-minimal) and clone it locally
2. Navigate to **Pipelines & CI/CD settings** and connect the service with your new GitHub repository, setting the trigger to **Push to Branch**

### Test Your Pipeline

- Make a small change directly in the GitHub UI
- Commit the change and watch the magic happen in project detail

## Integration with Existing Applications

If you're looking to integrate an existing Laravel Jetstream application with Zerops, review the [changes made over the default installation](https://github.com/zeropsio/recipe-laravel-minimal/blob/main/README.md#changes-made-over-the-default-installation) to understand the necessary modifications.

## Get to know Zerops core concepts in depth
Ready to build from scratch? Our [step-by-step Laravel Jetstream tutorial](/frameworks/laravel/introduction) takes you through the entire process of integrating Zerops with a new Laravel Jetstream project.

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*



Laravel Jetstream provides a polished application scaffolding for Laravel, featuring authentication, registration, email verification, two-factor authentication, session management, API support via Laravel Sanctum, and optional team management features. It serves as the perfect starting point for your next Laravel application.

This recipe provides a comprehensive Laravel Jetstream setup with PostgreSQL database, Redis-compatible store, object storage, and automated deployment pipeline, designed for **local development** with cost-efficient resource allocation and the [Lightweight](/features/infrastructure#project-core) core package. This means:
- Resources are optimized for development workloads
- Services can be started/stopped as needed during active development
- Cost-effective configuration suitable for development and testing

<CustomCard icon={IconLaravelJetstream} title="Deploy Laravel Jetstream Recipe for Local Development">
  <div className="flex-grow pb-1 pt-0.5">Set up a Laravel environment with Jetstream's team features and authentication system for rapid local development.</div>
  <DeployButton link="laravel-jetstream-local" badgeWidth="200" />
</CustomCard>

## Environment Overview

Your newly deployed Laravel Jetstream environment includes:

- A fully configured Laravel application service with Jetstream
- PostgreSQL database integration with migration automation
- Valkey (Redis-compatible KV store) for sessions and cache
- Built-in object storage for filesystem
- Mailpit for development SMTP server
- Automated build and deployment pipeline
- Health and readiness checks

:::note
For production environments with high-availability services and enterprise-grade reliability, consider deploying the [production environment recipe](/frameworks/laravel/recipes/jetstream-prod).
:::

## What to Expect

The deployment process takes just a few minutes. Once complete, you'll receive:

- A live URL to access your application
- Database credentials
- Access to your project dashboard
- CLI configuration details for VPN access

## Setting Up Local Development

Zerops provides a built-in VPN feature through its CLI tool, enabling seamless local development against remote resources. Here's how to set it up:

### Prerequisites
- Install the [Zerops CLI](/references/cli#get-started) and log in with [personal access token](/references/cli#personal-access-tokens)
- Install [Wireguard](/references/vpn) on your system

### Setup Steps

1. Create your own repository from our [GitHub template](https://github.com/zeropsio/recipe-laravel-jetstream) and clone it locally

2. **Configure VPN Access**
   ```bash
   # Initialize VPN connection using project ID
   zcli vpn up <project-id>

   # Or use interactive mode to select your project
   zcli vpn up
   ```

3. **Set Up Environment**
   ```bash
   # Create and configure environment file
   cp .env.example .env
   ```
   Fill in database access details - in Zerops GUI go to the detail of `db` service and open **Access details** in the left menu.

   ```bash
   composer install
   php artisan key:generate
   npm install
   npm run dev
   ```

4. **Start Development Server**
   ```bash
   php artisan serve # or use your preferred setup (Valet, Herd, Sail)
   ```

Your local environment is now connected to the Zerops infrastructure, utilizing the database, redis and storage from Zerops while maintaining local development flexibility.

## Application Configuration

The app has been set up to utilize:
- Valkey (Redis-compatible KV store) to handle sessions and cache
- Built-in S3 object storage for Laravel and Jetstream-specific filesystem operations
- Mailpit as a mock SMTP server for development purposes

Your application's deployment process is managed through [zerops.yaml](/zerops-yaml/specification), which handles:

- Database migrations
- Cache management
- File cleanup
- Health check implementation
- Service orchestration

## Try the Build & Deploy Pipeline

Now that you're logged into zcli, deploying your application is straightforward. Simply enter `zcli push` in your terminal from the root of your freshly cloned project.

### Test Your Pipeline

The best way to verify your setup is with a quick test:
- Make a small change directly in the GitHub UI
- Commit the change and watch the magic happen in your project dashboard

### Setting Up Automated CI/CD

To enable automatic deployments:

1. Navigate to **Pipelines & CI/CD settings** in your service dashboard
2. Connect the service with your new GitHub repository
3. Set the trigger to **Push to Branch**

## Integration with Existing Applications

If you're looking to integrate an existing Laravel Jetstream application with Zerops, review the [changes made over the default installation](https://github.com/zeropsio/recipe-laravel-jetstream/blob/main/README.md#changes-made-over-the-default-installation) to understand the necessary modifications.

## Get to know Zerops core concepts in depth
Ready to build from scratch? Our [step-by-step Laravel tutorial](/frameworks/laravel/introduction) takes you through the entire process of integrating Zerops with a new Laravel project.

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*



Laravel Jetstream provides a polished application scaffolding for Laravel, featuring authentication, registration, email verification, two-factor authentication, session management, API support via Laravel Sanctum, and optional team management features. It serves as the perfect starting point for your next Laravel application.

This recipe demonstrates how to effectively integrate Laravel Jetstream applications with Zerops, providing a fully production-grade setup. It's built as a **production environment** with high-availability configuration and uses the [Serious](/features/infrastructure#project-core) core package, ensuring enterprise-grade reliability and robust performance.

<CustomCard icon={IconLaravelJetstream} title="Deploy Production-Ready Laravel Jetstream">
  <div className="flex-grow pb-1 pt-0.5">Set up a production-ready Laravel environment with Jetstream's team features and authentication system, backed by high-availability services.</div>
  <DeployButton link="laravel-jetstream-prod" badgeWidth="200" />
</CustomCard>

## Environment Overview

Your newly deployed Laravel Jetstream environment includes:

- A fully configured Laravel application service with Jetstream installed and high availability
- PostgreSQL database integration with migration automation
- Automated build and deployment pipeline
- Health and readiness checks
- Configured Jetstream authentication system

:::note
For development environments with cost-efficient resource allocation, consider deploying the [development environment recipe](/frameworks/laravel/recipes/minimal-devel).
:::

## Application Configuration

The app has been set up to utilize PostgreSQL service and includes Jetstream's authentication scaffolding. Your application's deployment process is managed through [zerops.yaml](/zerops-yaml/specification), which handles:

- Database migrations
- Cache management
- File cleanup
- Health check implementation
- Service orchestration
- Jetstream assets compilation

## Try the build & deploy pipeline in 30 seconds

While Zerops supports various CI/CD workflows (CLI, GitHub Actions, built-in CI/CD), let's start with the simplest path to get you familiar with the core concepts:

1. Create your own repository from our [GitHub template](https://github.com/zeropsio/recipe-laravel-minimal) and clone it locally
2. Navigate to **Pipelines & CI/CD settings** and connect the service with your new GitHub repository, setting the trigger to **Push to Branch**

### Test Your Pipeline

- Make a small change directly in the GitHub UI
- Commit the change and watch the magic happen in project detail

## Integration with Existing Applications

If you're looking to integrate an existing Laravel Jetstream application with Zerops, review the [changes made over the default installation](https://github.com/zeropsio/recipe-laravel-minimal/blob/main/README.md#changes-made-over-the-default-installation) to understand the necessary modifications.

## Get to know Zerops core concepts in depth
Ready to build from scratch? Our [step-by-step Laravel Jetstream tutorial](/frameworks/laravel/introduction) takes you through the entire process of integrating Zerops with a new Laravel Jetstream project.

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*



This recipe demonstrates how to effectively integrate Laravel applications with Zerops, providing a fully production-capable setup. While it's built for professional deployment, we call it a **development environment** due to its streamlined resource allocation and use of the [Lightweight](/features/infrastructure#project-core) core package, optimizing costs without compromising functionality.

<CustomCard icon={IconLaravel} title="Deploy Laravel Minimal Development Stack">
  <div className="flex-grow pb-1 pt-0.5">Set up a streamlined Laravel environment with development-optimized resources and configurations.</div>
  <DeployButton link="laravel-minimal-devel" badgeWidth="200" />
</CustomCard>

## Environment Overview

Your newly deployed Laravel environment includes:

- A fully configured Laravel application service
- PostgreSQL database integration with migration automation
- Automated build and deployment pipeline
- Health and readiness checks

:::note
For production environments with high-availability services and enterprise-grade reliability, consider deploying the [production environment recipe](/frameworks/laravel/recipes/minimal-prod).
:::

## Application Configuration

The app has been set up to utilize PostgreSQL service. Your application's deployment process is managed through [zerops.yaml](/zerops-yaml/specification), which handles:

- Database migrations
- Cache management
- File cleanup
- Health check implementation
- Service orchestration

## Try the build & deploy pipeline in 30 seconds

While Zerops supports various CI/CD workflows (CLI, GitHub Actions, built-in CI/CD), let's start with the simplest path to get you familiar with the core concepts:

1. Create your own repository from our [GitHub template](https://github.com/zeropsio/recipe-laravel-minimal) and clone it locally
2. Navigate to **Pipelines & CI/CD settings** and connect the service with your new GitHub repository, setting the trigger to **Push to Branch**

### Test Your Pipeline

- Make a small change directly in the GitHub UI
- Commit the change and watch the magic happen in project detail

## Integration with Existing Applications

If you're looking to integrate an existing Laravel application with Zerops, review the [changes made over the default installation](https://github.com/zeropsio/recipe-laravel-minimal/blob/main/README.md#changes-made-over-the-default-installation) to understand the necessary modifications.

## Get to know Zerops core concepts in depth
Ready to build from scratch? Our [step-by-step Laravel tutorial](/frameworks/laravel/introduction) takes you through the entire process of integrating Zerops with a new Laravel project.

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*



This recipe provides a streamlined Laravel setup with PostgreSQL database and automated deployment pipeline, designed for **local development** with cost-efficient resource allocation and the [Lightweight](/features/infrastructure#project-core) core package. This means:
- Resources are optimized for development workloads
- Services can be started/stopped as needed during active development
- Cost-effective configuration suitable for development and testing

<CustomCard icon={IconLaravel} title="Deploy Laravel Recipe for Local Development">
  <div className="flex-grow pb-1 pt-0.5">Set up a streamlined Laravel environment optimized for local development with this lightweight, cost-efficient configuration.</div>
  <DeployButton link="laravel-minimal-local" badgeWidth="200" />
</CustomCard>

## Environment Overview

Your newly deployed Laravel environment includes:

- A fully configured Laravel application service
- PostgreSQL database integration with migration automation
- Automated build and deployment pipeline
- Health and readiness checks

:::note
For production environments with high-availability services and enterprise-grade reliability, consider deploying the [production environment recipe](/frameworks/laravel/recipes/minimal-prod).
:::

## What to Expect

The deployment process takes just a few minutes. Once complete, you'll receive:

- A live URL to access your application
- Database credentials
- Access to your project dashboard
- CLI configuration details for VPN access

## Setting Up Local Development

Zerops provides a built-in VPN feature through its CLI tool, enabling seamless local development against remote resources. Here's how to set it up:

### Prerequisites
- Install the [Zerops CLI](/references/cli#get-started) and log in with [personal access token](/references/cli#personal-access-tokens)
- Install [Wireguard](/references/vpn) on your system

### Setup Steps

1. Create your own repository from our [GitHub template](https://github.com/zeropsio/recipe-laravel-minimal) and clone it locally

2. **Configure VPN Access**
   ```bash
   # Initialize VPN connection using project ID
   zcli vpn up <project-id>

   # Or use interactive mode to select your project
   zcli vpn up
   ```

3. **Set Up Environment**
   ```bash
   # Create and configure environment file
   cp .env.example .env
   ```
   Fill in database access details - in Zerops GUI go to the detail of `db` service and open **Access details** in the left menu.

   ```bash
   composer install
   php artisan key:generate
   ```

4. **Start Development Server**
   ```bash
   php artisan serve # or use your preferred setup (Valet, Herd, Sail)
   ```

Your local environment is now connected to the Zerops infrastructure, utilizing the remote PostgreSQL database while maintaining local development flexibility.

## Application Configuration

Your application's deployment process is managed through [zerops.yaml](/zerops-yaml/specification), which handles:

- Database migrations
- Cache management
- File cleanup
- Health check implementation
- Service orchestration

## Try the Build & Deploy Pipeline

Now that you're logged into zcli, deploying your application is straightforward. Simply enter `zcli push` in your terminal from the root of your freshly cloned project.

### Test Your Pipeline

The best way to verify your setup is with a quick test:
- Make a small change directly in the GitHub UI
- Commit the change and watch the magic happen in your project detail

### Setting Up Automated CI/CD

To enable automatic deployments:

1. Navigate to **Pipelines & CI/CD settings** in your service dashboard
2. Connect the service with your new GitHub repository
3. Set the trigger to **Push to Branch**

## Integration with Existing Applications

If you're looking to integrate an existing Laravel application with Zerops, review the [changes made over the default installation](https://github.com/zeropsio/recipe-laravel-minimal/blob/main/README.md#changes-made-over-the-default-installation) to understand the necessary modifications.

## Get to know Zerops core concepts in depth
Ready to build from scratch? Our [step-by-step Laravel tutorial](/frameworks/laravel/introduction) takes you through the entire process of integrating Zerops with a new Laravel project.

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*



This recipe demonstrates how to effectively integrate Laravel applications with Zerops, providing a fully production-grade setup. It's built as a **production environment** with high-availability configuration and uses the [Serious](/features/infrastructure#project-core) core package, ensuring enterprise-grade reliability and robust performance.

<CustomCard icon={IconLaravel} title="Deploy Production-Ready Laravel Recipe">
  <div className="flex-grow pb-1 pt-0.5">Set up a production-ready Laravel environment with high-availability services and enterprise-grade reliability.</div>
  <DeployButton link="laravel-minimal-prod" badgeWidth="200" />
</CustomCard>

## Environment Overview

Your newly deployed Laravel environment includes:

- A fully configured Laravel application service with high availability
- PostgreSQL database integration with migration automation
- Automated build and deployment pipeline
- Health and readiness checks

:::note
For development environments with cost-efficient resource allocation, consider deploying the [development environment recipe](/frameworks/laravel/recipes/minimal-devel).
:::

## Application Configuration

The app has been set up to utilize PostgreSQL service. Your application's deployment process is managed through [zerops.yaml](/zerops-yaml/specification), which handles:

- Database migrations
- Cache management
- File cleanup
- Health check implementation
- Service orchestration

## Try the build & deploy pipeline in 30 seconds

While Zerops supports various CI/CD workflows (CLI, GitHub Actions, built-in CI/CD), let's start with the simplest path to get you familiar with the core concepts:

1. Create your own repository from our [GitHub template](https://github.com/zeropsio/recipe-laravel-minimal) and clone it locally
2. Navigate to **Pipelines & CI/CD settings** and connect the service with your new GitHub repository, setting the trigger to **Push to Branch**

### Test Your Pipeline

- Make a small change directly in the GitHub UI
- Commit the change and watch the magic happen in project detail

## Integration with Existing Applications

If you're looking to integrate an existing Laravel application with Zerops, review the [changes made over the default installation](https://github.com/zeropsio/recipe-laravel-minimal/blob/main/README.md#changes-made-over-the-default-installation) to understand the necessary modifications.

## Get to know Zerops core concepts in depth
Ready to build from scratch? Our [step-by-step Laravel tutorial](/frameworks/laravel/introduction) takes you through the entire process of integrating Zerops with a new Laravel project.

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*



[Twill](https://twillcms.com/) is a flexible CMS toolkit for Laravel that helps you rapidly create a custom administration interface for your application. It provides a robust set of features including content management, media library, block editor, and a powerful publishing workflow system.

This recipe demonstrates how to effectively integrate Laravel Twill applications with Zerops, providing a fully production-capable setup. While this setup is built for professional deployment, we call it a **development environment** due to its streamlined resource allocation and use of the [Lightweight](/features/infrastructure#project-core) core package, optimizing costs without compromising functionality.

<CustomCard icon={IconTwill} title="Deploy Twill CMS Development Stack">
  <div className="flex-grow pb-1 pt-0.5">Set up a Laravel environment with Twill's CMS framework in a development-optimized configuration.</div>
  <DeployButton link="twill-devel" badgeWidth="200" />
</CustomCard>

## Environment Overview

Your newly deployed Laravel Twill environment includes:

- A fully configured Laravel application service with Twill CMS installed
- PostgreSQL database integration with migration automation
- Automated build and deployment pipeline
- Health and readiness checks
- Configured Twill admin interface and media library

:::note
For production environments with high-availability services and enterprise-grade reliability, consider deploying the [production environment recipe](/frameworks/laravel/recipes/minimal-prod).
:::

## Application Configuration

The app has been set up to utilize PostgreSQL service and includes Twill's CMS functionality. Your application's deployment process is managed through [zerops.yaml](/zerops-yaml/specification), which handles:

- Database migrations
- Cache management
- File cleanup
- Health check implementation
- Service orchestration
- Twill assets compilation
- Media storage configuration

## Try the build & deploy pipeline in 30 seconds

While Zerops supports various CI/CD workflows (CLI, GitHub Actions, built-in CI/CD), let's start with the simplest path to get you familiar with the core concepts:

1. Create your own repository from our [GitHub template](https://github.com/zeropsio/recipe-laravel-minimal) and clone it locally
2. Navigate to **Pipelines & CI/CD settings** and connect the service with your new GitHub repository, setting the trigger to **Push to Branch**

### Test Your Pipeline

- Make a small change directly in the GitHub UI
- Commit the change and watch the magic happen in project detail

## Integration with Existing Applications

If you're looking to integrate an existing Laravel Twill application with Zerops, review the [changes made over the default installation](https://github.com/zeropsio/recipe-laravel-minimal/blob/main/README.md#changes-made-over-the-default-installation) to understand the necessary modifications.

## Get to know Zerops core concepts in depth
Ready to build from scratch? Our [step-by-step Laravel Twill tutorial](/frameworks/laravel/introduction) takes you through the entire process of integrating Zerops with a new Laravel Twill project.

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*



[Twill](https://twillcms.com/) is a flexible CMS toolkit for Laravel that helps you rapidly create a custom administration interface for your application. It provides a robust set of features including content management, media library, block editor, and a powerful publishing workflow system.

This recipe provides a comprehensive Twill CMS setup with PostgreSQL database, Redis-compatible store, object storage, and automated deployment pipeline, designed for **local development** with cost-efficient resource allocation and the [Lightweight](/features/infrastructure#project-core) core package. This means:
- Resources are optimized for development workloads
- Services can be started/stopped as needed during active development
- Cost-effective configuration suitable for development and testing

<CustomCard icon={IconTwill} title="Deploy Twill CMS for Local Development">
  <div className="flex-grow pb-1 pt-0.5">Set up a Laravel environment with Twill's publishing workflow and media management features for local development.</div>
  <DeployButton link="twill-local" badgeWidth="200" />
</CustomCard>

## Environment Overview

Your newly deployed Twill CMS environment includes:

- A fully configured Laravel application service with Twill CMS
- PostgreSQL database integration with migration automation
- Valkey (Redis-compatible KV store) for sessions and cache
- Built-in object storage for filesystem
- Mailpit for development SMTP server
- Automated build and deployment pipeline
- Health and readiness checks

:::note
For production environments with high-availability services and enterprise-grade reliability, consider deploying the [production environment recipe](/frameworks/laravel/recipes/filament-prod).
:::

## What to Expect

The deployment process takes just a few minutes. Once complete, you'll receive:

- A live URL to access your application
- Database credentials
- Access to your project dashboard
- CLI configuration details for VPN access

## Setting Up Local Development

Zerops provides a built-in VPN feature through its CLI tool, enabling seamless local development against remote resources. Here's how to set it up:

### Prerequisites
- Install the [Zerops CLI](/references/cli#get-started) and log in with [personal access token](/references/cli#personal-access-tokens)
- Install [Wireguard](/references/vpn) on your system

### Setup Steps

1. Create your own repository from our [GitHub template](https://github.com/zeropsio/recipe-filament) and clone it locally

2. **Configure VPN Access**
   ```bash
   # Initialize VPN connection using project ID
   zcli vpn up <project-id>

   # Or use interactive mode to select your project
   zcli vpn up
   ```

3. **Set Up Environment**
   ```bash
   # Create and configure environment file
   cp .env.example .env
   ```
   Fill in database access details - in Zerops GUI go to the detail of `db` service and open **Access details** in the left menu.

   ```bash
   composer install
   php artisan key:generate
   npm install
   npm run dev
   ```

4. **Start Development Server**
   ```bash
   php artisan serve # or use your preferred setup (Valet, Herd, Sail)
   ```

Your local environment is now connected to the Zerops infrastructure, utilizing the database, redis and storage from Zerops while maintaining local development flexibility.

## Application Configuration

The app has been set up to utilize:
- Valkey (Redis-compatible KV store) to handle sessions and cache
- Built-in object storage for Laravel and Twill-specific filesystem operations
- Mailpit as a mock SMTP server for development purposes

Your application's deployment process is managed through [zerops.yaml](/zerops-yaml/specification), which handles:

- Database migrations
- Cache management
- File cleanup
- Health check implementation
- Service orchestration

## Try the Build & Deploy Pipeline

Now that you're logged into zcli, deploying your application is straightforward. Simply enter `zcli push` in your terminal from the root of your freshly cloned project.

### Test Your Pipeline

The best way to verify your setup is with a quick test:
- Make a small change directly in the GitHub UI
- Commit the change and watch the magic happen in your project dashboard

### Setting Up Automated CI/CD

To enable automatic deployments:

1. Navigate to **Pipelines & CI/CD settings** in your service dashboard
2. Connect the service with your new GitHub repository
3. Set the trigger to **Push to Branch**

## Integration with Existing Applications

If you're looking to integrate an existing Twill application with Zerops, review the [changes made over the default installation](https://github.com/zeropsio/recipe-twill/blob/main/README.md#changes-made-over-the-default-installation) to understand the necessary modifications.

## Get to know Zerops core concepts in depth
Ready to build from scratch? Our [step-by-step Laravel tutorial](/frameworks/laravel/introduction) takes you through the entire process of integrating Zerops with a new Laravel project.

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*



[Twill](https://twillcms.com/) is a flexible CMS toolkit for Laravel that helps you rapidly create a custom administration interface for your application. It provides a robust set of features including content management, media library, block editor, and a powerful publishing workflow system.

This recipe demonstrates how to effectively integrate Laravel Twill applications with Zerops, providing a fully production-grade setup. It's built as a **production environment** with high-availability configuration and uses the [Serious](/features/infrastructure#project-core) core package, ensuring enterprise-grade reliability and robust performance.

<CustomCard icon={IconTwill} title="Deploy Production-Ready Twill CMS">
  <div className="flex-grow pb-1 pt-0.5">Set up a production-ready Laravel environment with Twill's CMS framework, backed by high-availability services and enterprise-grade reliability.</div>
  <DeployButton link="twill-prod" badgeWidth="200" />
</CustomCard>

## Environment Overview

Your newly deployed Laravel Twill environment includes:

- A fully configured Laravel application service with Twill CMS installed and high availability
- PostgreSQL database integration with migration automation
- Automated build and deployment pipeline
- Health and readiness checks
- Configured Twill admin interface and media library

:::note
For development environments with cost-efficient resource allocation, consider deploying the [development environment recipe](/frameworks/laravel/recipes/minimal-devel).
:::

## Application Configuration

The app has been set up to utilize PostgreSQL service and includes Twill's CMS functionality. Your application's deployment process is managed through [zerops.yaml](/zerops-yaml/specification), which handles:

- Database migrations
- Cache management
- File cleanup
- Health check implementation
- Service orchestration
- Twill assets compilation
- Media storage configuration

## Try the build & deploy pipeline in 30 seconds

While Zerops supports various CI/CD workflows (CLI, GitHub Actions, built-in CI/CD), let's start with the simplest path to get you familiar with the core concepts:

1. Create your own repository from our [GitHub template](https://github.com/zeropsio/recipe-laravel-minimal) and clone it locally
2. Navigate to **Pipelines & CI/CD settings** and connect the service with your new GitHub repository, setting the trigger to **Push to Branch**

### Test Your Pipeline

- Make a small change directly in the GitHub UI
- Commit the change and watch the magic happen in project detail

## Integration with Existing Applications

If you're looking to integrate an existing Laravel Twill application with Zerops, review the [changes made over the default installation](https://github.com/zeropsio/recipe-laravel-minimal/blob/main/README.md#changes-made-over-the-default-installation) to understand the necessary modifications.

## Get to know Zerops core concepts in depth
Ready to build from scratch? Our [step-by-step Laravel Twill tutorial](/frameworks/laravel/introduction) takes you through the entire process of integrating Zerops with a new Laravel Twill project.

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*



Redis is a powerful in-memory data structure store serving as a database, cache, message broker, and queue. This guide walks you through Redis integration with your Laravel application on Zerops for high-performance caching, session management, and queue processing.

Zerops provides [Valkey](https://valkey.io), an open-source Redis alternative that delivers high-performance key/value storage with full Redis compatibility. Valkey supports all common Redis use cases — from caching and message queues to primary database functionality.

## Adding Redis Service

To use Valkey (Redis) features with Laravel, first either import Valkey as a service to your Zerops project

```yaml
services:
  - hostname: valkey
    type: valkey@7.2
    mode: NON_HA  # use HA in production
```

or add the Valkey service to your project manually from the Zerops GUI.

<Image
  lightImage="/img/gui/valkey/service.webp"
  darkImage="/img/gui/valkey/service.webp"
  alt="Add a new service"
  style={{ width: '95%', height: 'auto' }}
/>

:::tip High Availability Mode
For production environments, we recommend using `HA` mode. This configuration:
* Ensures automatic failover during node failures
* Provides data replication across multiple nodes
* Improves reliability and uptime
:::

## Environment Configuration

### Basic Redis Settings

Environment variables control how your Laravel application connects to and uses Redis. Below are the core settings grouped by functionality:

```yaml
zerops:
  - setup: app
    build:
      base:
        - php@8.4
      os: alpine
    run:
      base: php-nginx@8.4
      os: alpine
      siteConfigPath: site.conf.tmpl
      envVariables:
        # Redis Connection Settings
        REDIS_CLIENT: phpredis    # PHP Redis client for better performance
        REDIS_HOST: valkey        # Internal hostname of Valkey service
        REDIS_PORT: 6379         # Standard Redis port number

        # Cache Configuration
        CACHE_PREFIX: cache      # Namespace for cache keys
        CACHE_STORE: redis       # Use Redis as primary cache

        # Session Configuration
        SESSION_DRIVER: redis    # Store sessions in Redis
        SESSION_ENCRYPT: false   # Disable session encryption
        SESSION_LIFETIME: 120    # Session timeout in minutes
        SESSION_PATH: /          # Cookie path setting

        # Queue Configuration
        QUEUE_CONNECTION: redis  # Use Redis for job queues
        BROADCAST_CONNECTION: redis  # Redis for event broadcasting
```

## Feature-Specific Configuration

### Redis Caching

Laravel's cache system offers a unified API across different cache backends. The following configuration establishes Redis as your primary cache store for fast, reliable data caching:

```php title="config/cache.php"
'default' => env('CACHE_STORE', 'database'),

'stores' => [
    'redis' => [
        'driver' => 'redis',
        'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
        'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
    ],
],

'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),
```

### Session Management with Redis

Using Redis for session storage provides better performance than file-based sessions and enables seamless session sharing across multiple application servers. You can also set up a custom session connection in the `config/session.php` file.

```php title="config/session.php"
'driver' => env('SESSION_DRIVER', 'redis'),
'lifetime' => env('SESSION_LIFETIME', 120),
'encrypt' => env('SESSION_ENCRYPT', false),
```

### Queue System Configuration

Redis queues offer a robust solution for handling background jobs in Laravel. This configuration sets up Redis as your queue backend with retry policies and connection settings. You can also set up a custom queue connection in the `config/queue.php` file.

```php title="config/queue.php"
'default' => env('QUEUE_CONNECTION', 'redis'),

'connections' => [
    'redis' => [
        'driver' => 'redis',
        'connection' => 'default',
        'queue' => 'default',
        'retry_after' => 90,     // Retry failed jobs after 90 seconds
        'block_for' => null,     // Don't block when no jobs available
    ],
],
```

Consider using [Supervisor](https://laravel.com/docs/5.1/queues#supervisor-configuration) for managing Laravel queues in production.

### Performance Optimization
Configure your Redis connection pool for optimal performance:
```php
'redis' => [
    'client' => env('REDIS_CLIENT', 'phpredis'),
    'options' => [
        'cluster' => env('REDIS_CLUSTER', 'redis'),
        'prefix' => env('REDIS_PREFIX', ''),
        'pool' => [
            'max_connections' => 50,
            'timeout' => 30,
        ],
    ],
],
```

## Working with Redis Features

### Cache Operations Examples
```php
// Store items in cache with expiration time
Cache::put('key', 'value', $seconds);

// Retrieve cached items with optional default value
$value = Cache::get('key');

// Store items indefinitely until manually removed
Cache::forever('key', 'value');
```

### Queue Processing Examples
```php
// Dispatch a job to the Redis queue with specific connection
ProcessPodcast::dispatch($podcast)->onConnection('redis');

// Start the queue worker process for Redis
php artisan queue:work redis
```

### Session Handling Examples
```php
// Store data in the Redis session
session(['key' => 'value']);

// Retrieve data from the session with optional default
$value = session('key');
```



# SMTP Configuration for Laravel on Zerops

:::warning Important Security Note
By default, SMTP ports are blocked by Zerops firewall for security reasons. To use external SMTP services, please [contact Zerops support](mailto:support@zerops.io) to have the necessary ports opened for your project.
Include in your request:
* Detailed explanation of your use case
* Specific ports and protocols needed
* Project ID and Organization ID from your Zerops Dashboard
:::

## Production Configuration

### Laravel Mail Configuration

Laravel comes with a default mail configuration in `config/mail.php`. You typically don't need to modify this file as all settings can be controlled through environment variables.

The default configuration supports multiple mailer types and reads all sensitive information from your environment. In this example

<Dropdown>
    <DropdownItem title="Configuration example">
```php title="config/mail.php"
return [
    'default' => env('MAIL_MAILER', 'smtp'),

    'mailers' => [
        'smtp' => [
            'transport' => 'smtp',
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 587),
            'encryption' => env('MAIL_ENCRYPTION', 'tls'),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN'),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
        ],
    ],

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],
];
```

:::tip Available Mail Transports
Laravel supports multiple mail transport options:
- 'smtp' - Standard SMTP server
- 'sendmail' - Server's sendmail
- 'mailgun' - Mailgun API
- 'ses' - Amazon SES
- 'postmark' - Postmark
- 'log' - Log messages for testing
- 'array' - Store in array for testing
- 'failover' - Fallback to next mailer if one fails
- 'roundrobin' - Rotate between multiple mailers
:::
</DropdownItem>
</Dropdown>

### Environment Configuration

Configure your Laravel service with the required mail variables. The following example shows SMTP configuration, but most settings are common across different mail transports:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    run:
      envVariables:
        MAIL_MAILER: smtp
        MAIL_FROM_ADDRESS: noreply@yourdomain.com
        MAIL_FROM_NAME: YourApp
        MAIL_HOST: your-smtp-host
        MAIL_PORT: 587
        MAIL_USERNAME: your-username
        MAIL_PASSWORD: your-password
        MAIL_ENCRYPTION: tls
```

If using other mail transports, you might need additional environment variables. Refer to Laravel's Mail documentation for transport-specific configuration.

## Implementing Email Functionality

### Creating Mail Classes

Generate a new mail class using Artisan:

```bash
php artisan make:mail WelcomeEmail
```

<Dropdown>
<DropdownItem title="Example implementation">
```php title="app/Mail/WelcomeEmail.php"
<?php

namespace App\Mail;

use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;

class WelcomeEmail extends Mailable
{
    use SerializesModels;

    public function __construct(
        public $user
    ) {}

    public function build()
    {
        return $this->view('emails.welcome')
                    ->subject('Welcome to ' . config('app.name'));
    }
}
```
</DropdownItem>
</Dropdown>

### Email Template

Create a blade template for your email content:

```php title="resources/views/emails/welcome.blade.php"
<x-mail::message>
# Welcome {{ $user->name }}

Thanks for joining our application!

<x-mail::button :url="config('app.url')">
Visit Dashboard
</x-mail::button>

Thanks,<br>
{{ config('app.name') }}
</x-mail::message>
```

### Sending Emails

You can send emails either immediately or using a queue:

```php
use Illuminate\Support\Facades\Mail;
use App\Mail\WelcomeEmail;

// Send immediately
Mail::to($user->email)->send(new WelcomeEmail($user));

// Send using queue
Mail::to($user->email)->queue(new WelcomeEmail($user));
```

## Queue Configuration
For production environments, it's recommended to use a queue system for sending emails to prevent request timeouts and improve application performance. Zerops provides Valkey, an open-source Redis-compatible service that's perfect for handling email queues.

First, add the Valkey service to your project:
```yaml
services:
  - hostname: redis
    type: valkey@7.2
    mode: NON_HA  # use HA for high availability in production
```

Configure your Laravel service to use Redis for queues:
```yaml title="zerops.yaml"
zerops:
  - setup: app
    run:
      envVariables:
        # Queue Configuration
        QUEUE_CONNECTION: redis
        REDIS_HOST: redis
        REDIS_PORT: 6379
        REDIS_CLIENT: phpredis # PHP Redis client for better performance

        # Mail Configuration
        MAIL_MAILER: smtp
        MAIL_HOST: your-smtp-host.com
        MAIL_PORT: 587
        MAIL_USERNAME: your-username
        MAIL_PASSWORD: your-password
        MAIL_ENCRYPTION: tls
        MAIL_FROM_ADDRESS: noreply@yourdomain.com
        MAIL_FROM_NAME: YourApp
```

You can customize the queue behavior in your `config/queue.php`:

<Dropdown>
<DropdownItem title="Custom Queue Configuration">

```php title="config/queue.php"
phpCopy'default' => env('QUEUE_CONNECTION', 'redis'),

'connections' => [
    'redis' => [
        'driver' => 'redis',
        'connection' => 'default',
        'queue' => 'default',
        'retry_after' => 90,     // Retry failed jobs after 90 seconds
        'block_for' => null,     // Don't block when no jobs available
    ],
],
```
</DropdownItem>
</Dropdown>

## Development Environment

For local development and testing, Zerops provides a Mailpit service that allows you to catch and inspect all outgoing emails.

### Setting up Mailpit

Add this to your project import configuration or import the service separately:

```yaml
services:
  - hostname: mailpit
    type: go@1
    buildFromGit: https://github.com/zeropsio/recipe-mailpit
    enableSubdomainAccess: true
```

See [Mailpit recipe repo](https://github.com/zeropsio/recipe-mailpit) for reference.

Configure your Laravel service to use Mailpit for development:

```yaml
zerops:
  - setup: app
    run:
      envVariables:
        MAIL_MAILER: smtp
        MAIL_HOST: mailpit
        MAIL_PORT: 1025
        MAIL_FROM_ADDRESS: hello@example.com
        MAIL_FROM_NAME: ZeropsLaravel
```

:::tip
Enable `enableSubdomainAccess` to access the Mailpit web interface where you can view all emails during development.
:::

## Best Practices

- Use queue for sending emails in production to prevent request timeouts
- Configure proper timeouts for SMTP connections
- Use environment variables for all mail settings
- Implement proper error handling for failed email deliveries
- Test email templates across different email clients
- Monitor email delivery rates and bounce rates
- Use Mailpit in development to catch and debug emails



Welcome to Zerops! :star:

The best way to dive into Zerops is to try it yourself. Pick your favourite technology from the list below and follow the tutorials there:

### Runtimes, web servers & Linux containers

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/nodejs/getting-started',
      label: 'Node.js',
      customProps: {
        icon: Icons['nodejs'],
      },
    },
    {
      type: 'link',
      href: '/go/getting-started',
      label: 'Go',
      customProps: {
        icon: Icons['go'],
      },
    },
    {
      type: 'link',
      href: '/php/getting-started',
      label: 'PHP',
      customProps: {
        icon: Icons['php'],
      },
    },
    {
      type: 'link',
      href: '/python/getting-started',
      label: 'Python',
      customProps: {
        icon: Icons['python'],
      },
    },
    {
      type: 'link',
      href: '/dotnet/getting-started',
      label: '.NET',
      customProps: {
        icon: Icons['dotnet'],
      },
    },
    {
      type: 'link',
      href: '/rust/getting-started',
      label: 'Rust',
      customProps: {
        icon: Icons['rust'],
      },
    },
  ]}
/>

### Databases, search engines & message brokers

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/postgresql/getting-started',
      label: 'PostgreSQL',
      customProps: {
        icon: Icons['postgresql'],
      },
    },
    {
      type: 'link',
      href: '/mariadb/getting-started',
      label: 'MariaDB (MySQL)',
      customProps: {
        icon: Icons['mariadb'],
      },
    },
    {
      type: 'link',
      href: '/keydb/getting-started',
      label: 'KeyDB (Redis)',
      customProps: {
        icon: Icons['keydb'],
      },
    },
  ]}
/>




<FAQ>
  <FAQItem question="Sample Question">sample answer</FAQItem>
</FAQ>




This quick start allows you to get hands-on experience of Zerops, whether you only want to see it in action or want to start small and scale up the project size later. The purpose of this guide is to get an existing Gleam application up and running easily.

If you are already familiar with Zerops and you are interested in more detailed guides for your own application, feel free to head straight to the [How to](/gleam/how-to/create) section.

## Guides

We have created a repository, a _recipe_, containing the most simple Gleam web application, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics with one-service app.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-gleam',
      label: 'Gleam + SQL database',
      customProps: {
        icon: Icons['github'],
        description: 'A more complex, multi-service application example.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=gleam&type=all&language=&sort=',
      label: 'All Gleam recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspired.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



## Private internal access

Projects in Zerops represent a group of one or more services.
Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its [internal port](/gleam/how-to/build-pipeline#ports).

To connect to your application with `app` hostname running on [internal port](/gleam/how-to/build-pipeline#ports) `3000`, simply use `http://app:3000`

:::info
Do not use `https://` when communicating with Gleam from other runtime services in the same project. The internal communication is done over a private network and is isolated from other projects.
:::

### Use Gleam environment variables

Zerops creates default environment variables for each Gleam service to help you with connection within the same project. To avoid the need to copy the access parameters manually, use [generated environment variables](/gleam/how-to/env-variables#generated-env-variables) of the Gleam service.

#### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Example:

To access the `API_TOKEN` env variable of the `app` service, use `app_API_TOKEN` as the env variable key.

Read more about [env variables](/gleam/how-to/env-variables).

## Private access via VPN

### Start VPN connection

You can securely connect to your Gleam application from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)

### Access Gleam application through VPN

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/gleam/how-to/env-variables) are available when connected through VPN. To connect to your Gleam application in Zerops set the hostname and [internal port](/gleam/how-to/build-pipeline#ports) e.g. http://app:3000

:::info
Do not use `https://` when communicating with Gleam over the VPN. The security is assured by the VPN. The internal communication is done over a private network and is isolated from other projects.
:::

### Connect via SSH

Use the <a href="/references/ssh">`ssh` command</a> to connect to your service via SSH.

### Stop VPN connection

[Stop the Zerops VPN](/references/vpn#stop-vpn) in zCLI.

## Public access through zerops.io subdomain

By default, your Gleam service is not publicly accessible. To test your application, enable the [public access through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain).

## Public access through your domain

By default, your Gleam service is not publicly accessible. When your application is ready for production or if you want to test it on the production domain, [configure the public access through your domain](/features/access#public-access-through-your-domain).

## Public access from another Zerops project

All services of the same project share a dedicated private network. To connect to a service within the same project, just use the service hostname and its [internal port](/gleam/how-to/build-pipeline#ports). Different projects are not connected inside Zerops. To connect to a runtime service from another Zerops project, you need to use public access either [through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain) or [through your domain](/features/access#public-access-through-your-domain).




Zerops provides a customizable build and runtime environment for your Gleam application.

## Add zerops.yaml to your repository

Start by adding `zerops.yaml` file to the **root of your repository** and modify it to fit your application:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: gleam@latest

      # OPTIONAL. Set the operating system for the build environment.
      # os: ubuntu

      # OPTIONAL. Customise the build environment by installing additional packages
      # or tools to the base build environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # REQUIRED. Build your application
      buildCommands:
        - npm i
        - npm run build

      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles:
        - dist
        - package.json
        - node_modules

      # OPTIONAL. Which files / folders you want to cache for the next build.
      # Next builds will be faster when the cache is used.
      cache: node_modules

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base: gleam@latest

      # OPTIONAL. Sets the internal port(s) your app listens on:
      ports:
        # port number
        - port: 3000

      # OPTIONAL. Customise the runtime Gleam environment by installing additional
      # dependencies to the base Gleam runtime environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Gleam application is started.
      # initCommands:
      #  - rm -rf ./cache

      # REQUIRED. Your Gleam application start command
      start: npm start
```

The top-level element is always `zerops`.

### Setup

The first element `setup` contains the **hostname** of your service. A runtime service with the same hostname must exist in Zerops.
Zerops supports the definition of multiple runtime services in a single `zerops.yaml`. This is useful when you use a monorepo. Just add multiple setup elements in your `zerops.yaml`:

```yaml
zerops:
  # definition for app service
  - setup: app
    build: ...
    run: ...

  # definition for api service
  - setup: api
    build: ...
    run: ...
```

Each service configuration contains at least two sections: **build** and **run**. Both sections are required to build and deploy your Gleam application in Zerops. If you'd like to use a readiness check, add an optional **deploy** section.

## Build pipeline configuration

### base

_REQUIRED._ Sets the base technology for the build environment.

Following options are available for Gleam builds:

<UnorderedCodeList data={data.gleam.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: gleam@latest
      ...
```

<p>
  The base build environment contains {data.alpine.default}, the selected
  major version of Gleam, <a href="/references/cli">Zerops command line tool</a>, `npm`, `yarn`, `git` and `npx` tools.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the build environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base:
        - gleam@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [build base environments](/zerops-yaml/base-list#runtime-services).

To customise your build environment use the [prepareCommands](/gleam/how-to/build-pipeline#preparecommands) attribute.

:::note
Modifying the base technology will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for more details about cache invalidation.
:::

### os

_OPTIONAL._ Sets the operating system for the build environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customised.
:::

:::note
Changing the OS setting will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache behavior.
:::

### prepareCommands

_OPTIONAL._ Customises the build environment by installing additional dependencies or tools to the base build environment.

The base build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Gleam defined in the [base](/gleam/how-to/build-pipeline#base) attribute
- [Zerops command line tool](/references/cli)
- `npm`, `yarn`, `git` and `npx` tools

To install additional packages or tools add one or more prepare commands:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: gleam@latest

      # OPTIONAL. Customise the build environment by installing additional packages
      # or tools to the base build environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first build is triggered, Zerops will

1. create a build container
2. download your application code from your repository
3. run the prepare commands in the defined order

The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).

:::note
These commands are skipped when using cached environment. Modifying `prepareCommands` will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache invalidation.
:::

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/gleam/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all prepare commands are finished, your custom build environment is ready for the build phase.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### buildCommands

_REQUIRED._ Defines build commands.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: gleam@latest

      # REQUIRED. Build your application
      buildCommands:
        - npm i
        - npm run build
      ...
```

At least one command is required. Zerops triggers each command in the defined order in a dedicated build container.

Before the build commands are triggered the build container contains:

1. base environment defined by the [base](/gleam/how-to/build-pipeline#base) attribute
2. optional customisation of the base environment defined in the [prepareCommands](/gleam/how-to/build-pipeline#preparecommands) attribute
3. your application code

#### Run build commands as a single shell instance

Use following syntax to run all commands in the same environment context. For example, if one command changes the current directory, the next command continues in that directory. When one command creates an environment variable, the next command can access it.

```yaml
buildCommands:
  - |
    npm i
    npm run build
```

#### Run build commands as a separate shell instances

When the following syntax is used, each command is triggered in a separate environment context. For example, each shell instance starts in the home directory again. When one command creates an environment variable, it won't be available for the next command.

```yaml
buildCommands:
  - npm i
  - npm run build
```

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/gleam/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the --verbose option.

```yaml
buildCommands:
  - npm i --verbose
  - npm run build
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the deploy phase.

### deployFiles

_REQUIRED._ Selects which files or folders will be deployed after the build has successfully finished. To filter out specific files or folders, use <a href="#deployignore">`.deployignore`</a> file.

```yaml
# REQUIRED. Select which files / folders to deploy after
# the build has successfully finished
deployFiles:
  - dist
  - package.json
  - node_modules
```

Determines files or folders produced by your build, which should be deployed to your runtime service containers.

The path starts from the **root directory** of your project (the location of `zerops.yaml`). You must enclose the name in quotes if the folder or the file name contains a space.

The files/folders will be placed into `/var/www` folder in runtime, e.g. `./src/assets/fonts` would result in `/var/www/src/assets/fonts`.

#### Examples

Deploys a folder, and a file from the project root directory:

```yaml
deployFiles:
  - dist
  - package.json
```

Deploys the whole content of the build container:

```yaml
deployFiles: .
```

Deploys a folder, and a file in a defined path:

```yaml
deployFiles:
  - ./path/to/file.txt
  - ./path/to/dir/
```

#### How to use a wildcard in the path

Zerops supports the `~` character as a wildcard for one or more folders in the path.

Deploys all `file.txt` files that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/file.txt
```

Deploys all folders that are located in any path that begins with `/path/to/`

```yaml
deployFiles: ./path/to/~/
```

Deploys all folders that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/
```

:::note Example
By default, `./src/assets/fonts` deploys to `/var/www/src/assets/fonts`, keeping the full path. Adding `~`, like `./src/assets/~fonts`, shortens it to `/var/www/fonts`
:::
#### .deployignore

Add a `.deployignore` file to the root of your project to specify which files and folders Zerops should ignore during deploy. The syntax follows the same pattern format as <a href="https://git-scm.com/docs/gitignore#_pattern_format">`.gitignore`</a>.

To ignore a specific file or directory path, start the pattern with a forward slash (`/`). Without the leading slash, the pattern will match files with that name in any directory.

:::tip
For consistency, it's recommended to configure both your `.gitignore` and `.deployignore` files with the same patterns.
:::

Examples:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      deployFiles: ./
```

```text title=".deployignore"
/src/file.txt
```
The example above ignores `file.txt` only in the root src directory.
```text title=".deployignore"
src/file.txt
```
This example above ignores `file.txt` in ANY directory named `src`, such as:
- `/src/file.txt`
- `/folder2/folder3/src/file.txt`
- `/src/src/file.txt`

:::note
`.deployignore` file also works with <a href="/references/cli/commands#deploy">`zcli service deploy`</a> command.
:::

### cache

_OPTIONAL._ Defines which files or folders will be cached for the next build.

```yaml
# OPTIONAL. Which files / folders you want to cache for the next build.
# Next builds will be faster when the cache is used.
cache: file.txt
```

The cache attribute helps optimize build times by preserving specified files between builds.

The cache attribute supports the [~ wildcard character](#how-to-use-a-wildcard-in-the-path).

Learn more about the [build cache system](/features/build-cache) in Zerops.

### envVariables

_OPTIONAL._ Defines the environment variables for the build environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      base: gleam@latest
        …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/gleam/how-to/env-variables) in Zerops.

## Runtime configuration

### base

_OPTIONAL._ Sets the base technology for the runtime environment.
If you don't specify the `run.base` attribute, Zerops keeps the current Gleam version for your runtime.

Following options are available for Gleam runtimes:

<UnorderedCodeList data={data.gleam.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: gleam@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
        base: gleam@latest
      ...
```

<p>
  The base runtime environment contains {data.alpine.default}, the
  selected major version of Gleam, Zerops command line tool, `npm`, `yarn`, `git` and `npx` tools.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the runtime environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: gleam@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base:
        - gleam@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [run base environments](/zerops-yaml/base-list).

To customise your build environment use the `prepareCommands` attribute.

### os

_OPTIONAL._ Sets the operating system for the runtime environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customised.
:::

### ports

_OPTIONAL._ Specifies one or more internal ports on which your application will listen.

Projects in Zerops represent a group of one or more services. Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its internal port.

For example, to connect to a Gleam service with hostname = "app" and port = 3000 from another service of the same project, simply use `app:3000`. Read more about [how to access a Gleam service](/gleam/how-to/access).

Each port has following attributes:

| parameter   | description                                                                                                                                                                                                                                                                                                            |
| ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| port        | Defines the port number. You can set any port number between _10_ and _65435_. Ports outside this interval are reserved for internal Zerops systems.                                                                                                                                                                   |
| protocol    | **Optional.** Defines the protocol. Allowed values are `TCP` or `UDP`. Default value is `TCP`.                                                                                                                                                                                                                         |
| httpSupport | **Optional.** `httpSupport = true` is the default setting for TCP protocol. Set `httpSupport = false` if a web server isn't running on the port. Zerops uses this information for the configuration of [public access](/features/access). `httpSupport = true` is available only in combination with the TCP protocol. |

### prepareCommands

_OPTIONAL._ Customises the Gleam runtime environment by installing additional dependencies or tools to the runtime base environment.

<p>
  The base Gleam environment contains {data.alpine.default} the selected
  major version of Gleam, <a href="/references/cli">Zerops command line tool</a> and `npm`, `yarn`, `git` and `npx` tools. To install
  additional packages or tools add one or more prepare commands:
</p>

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Gleam runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first deploy with a defined prepare attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/gleam/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `prepareCommands` commands in the defined order

#### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/gleam/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

#### Cache of your custom runtime environment

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the [build.addToRunPrepare](#copy-folders-or-files-from-your-build-container) and `run.prepareCommands` attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the custom runtime cache go to `yyy`

{/*TODO screenshot*/}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### Copy folders or files from your build container

<p>
  The prepare runtime container contains {data.alpine.default}, the
  selected major version of Gleam, <a href="/references/cli">Zerops command line tool</a> and `npm`, `yarn`, `git` and `npx` tools.
</p>

The prepare runtime container does not contain your application code nor the built application. If you need to copy some folders or files from the build container to the runtime container (e.g. a configuration file) use the `addToRunPrepare` attribute in the [build section](#build-pipeline-configuration).

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...
      addToRunPrepare: ./runtime-config.yaml

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Gleam runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

In the example above Zerops will copy the `runtime-config.yaml` file from your build container **after the build has finished** into the new **prepare runtime** container. The copied files and folders will be available in the `xxx` folder in the new prepare runtime container before the prepare commands are triggered.

### initCommands

_OPTIONAL._ Defines one or more commands to be run each time a new runtime container is started or a container is restarted.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Gleam application is started.
      initCommands:
        - rm -rf ./cache
```

These commands are triggered in the runtime container before your Gleam application is started via the [start command](/gleam/how-to/build-pipeline#start).

Use init commands to clean or initialise your application cache or similar operations.

:::caution
The init commands will delay the start of your application each time a new runtime container is started (including the [horizontal scaling](/gleam/how-to/scaling#horizontal-auto-scaling) or when a runtime container is restarted).

Do not use the init commands for customising your runtime environment. Use the [run:prepareCommands](/gleam/how-to/build-pipeline#preparecommands-1) attribute instead.
:::

#### Command exit code

If any of the `initCommands` fails, it returns an exit code other than 0, but deploy is **not** canceled. After all init commands are finished, regardless of the status code, the application is started. Read the [runtime log](/gleam/how-to/logs#runtime-log) to troubleshoot the error.

#### Single or separated shell instances

You can configure your `initCommands` to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### envVariables

_OPTIONAL._ Defines the environment variables for the runtime environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to run your application ====
    run:
      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/gleam/how-to/env-variables) in Zerops.

### start

_REQUIRED._ Defines the start command for your Gleam application.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Gleam application start command
      start: npm start
```

We recommend starting your Gleam application using `npm start`.

### health check

_OPTIONAL._ Defines a health check.

`healthCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the health check to request a local URL using a HTTP GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Gleam application start command
      start: npm start

      # OPTIONAL. Define a health check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      healthCheck:
        httpGet:
          port: 80
          path: /status
```

Read more about how the [health check works] in Zerops.

#### exec

Configures the health check to run a local command.
Following attributes are available:

| Parameter   | Description                                                                                                                                                                                                                                                                                                                     |
| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **command** | Defines a local command to be run.<br/>The command has access to the same [environment variables](/gleam/how-to/create#set-secret-environment-variables) as your Gleam application.<br/>A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below. |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Gleam application start command
      start: npm start

      # OPTIONAL. Define a health check with a shell command.
      healthCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [health check works] in Zerops.

### crontab

_OPTIONAL._ Defines cron jobs.

Setup cron jobs in the following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app

    # ==== how to run your application ====
    run:
      crontab:
        # REQUIRED. Sets the command to execute:
        - command: ""
        # REQUIRED. Sets the interval time to execute:
          timing: "0 * * * *"
```

Read more about setting up [cron](/references/cron) in Zerops.

## Deploy configuration

### readiness check

_OPTIONAL._ Defines a readiness check. Read more about how the [readiness check works](/gleam/how-to/deploy-process#readiness-checks) in Zerops.

`readinessCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the readiness check to request a local URL using a http GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        httpGet:
          port: 80
          path: /status

    # ==== how to run your application ====
    run: ...
```

Read more about how the [readiness check works](/gleam/how-to/deploy-process#readiness-checks) in Zerops.

#### exec

Configures the readiness check to run a local command.
Following attributes are available:

| Parameter   | Description                                                                                                                                                                                                                                                                                                                     |
| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **command** | Defines a local command to be run.<br/>The command has access to the same [environment variables](/gleam/how-to/create#set-secret-environment-variables) as your Gleam application.<br/>A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below. |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [readiness check works](/gleam/how-to/deploy-process#readiness-checks) in Zerops.




<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Description of the build process

Zerops starts a temporary build container and performs following actions:

1. Installs the build environment:
   - Sets up base system and Go runtime
   - Restores cached files if available (based on `build.cache` configuration)
   - Validates cache against current `build.os`, `build.base`, and `build.prepareCommands`
2. Downloads your application source code from [GitHub ↗](https://www.github.com), [GitLab ↗](https://www.gitlab.com) or via [Zerops CLI](/references/cli)
3. Optionally [customizes the build environment](#customize-gleam-build-environment)
4. Runs the build commands
5. Uploads the application artefact to the internal Zerops storage
6. Preserves specified files for future builds (based on `build.cache` configuration)
7. Optionally [customizes the runtime environment](/gleam/how-to/customize-runtime)
8. [Deploys your application](/gleam/how-to/deploy-process)

The build container is automatically deleted after the build has finished or failed.

## Cancel running build

When you know that the running build is not correct and you want to cancel it, you can do it in Zerops GUI. Go to the service detail, open the list of running processes and click on the **Open pipeline detail** button. Then click on the **Cancel build** button.

<p align="center">
  <img
    src="/img/screenshots/cancel_running_build.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

:::caution
The build cancellation is available before the build pipeline is finished. When the build is finished, the deployment cannot be cancelled.
:::

## Customize Gleam build environment

The default Gleam build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Gleam defined in `zerops.yaml` [build.base](/gleam/how-to/build-pipeline#base) parameter
- [zCLI](/references/cli), Zerops command line tool
- `npm`, `yarn`, `git` and `npx` tools

If you prefer the Ubuntu OS instead of Alpine, set the [build.os](/gleam/how-to/build-pipeline#os) attribute to `ubuntu`. To install additional packages or tools add one or more [build.prepareCommands](/gleam/how-to/build-pipeline#preparecommands) commands to your `zerops.yaml`.

:::info
The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).
:::

## Gleam build hardware resources

Build of your Gleam application is run in a separate build container with following resource configuration:

| HW resource   | Minimum | Maximum |
| ------------- | ------- | ------- |
| **CPU cores** | 6       | 20      |
| **RAM**       | 8 GB    | 8 GB    |
| **Disk**      | 1 GB    | 100 GB  |

The build container is always started with the minimum hardware resources and scales vertically up to the maximum resources.

:::info
Hardware resources of the build containers are not charged. The build costs are covered by the standard Zerops [project fee](https://zerops.io/#pricing).
:::

## Build time limit

The time limit for the whole build pipeline is **1 hour**. After 1 hour, Zerops will terminate the build pipeline and delete the build container.

## Troubleshooting build-related problems

### Failure of a build prepare command

If any [prepare command](/gleam/how-to/build-pipeline#preparecommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/gleam/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom build environment is ready for the build phase.

### Invalidate the build cache
If you encounter unexpected build behavior or dependency issues, the problem might be related to [cached build data](/features/build-cache). While Zerops maintains the build cache to speed up deployments, sometimes you may need to start fresh.
To invalidate the build cache:

1. Go to your service detail in Zerops GUI
2. Choose **Pipelines & CI/CD Settings** from the left menu
3. Click on the **Invalidate build cache** button

This will force Zerops to run the next build clean, including all prepare commands, which can help resolve cache-related issues. After invalidation, your next build will also create a fresh cache.

### Failure of a build command

If any [build command](/gleam/how-to/build-pipeline#buildcommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/gleam/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the `--verbose` option.

```yaml
buildCommands:
  - npm i --verbose
  - npm run build
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the [deploy](/gleam/how-to/deploy-process) phase.



Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart Gleam service in Zerops GUI

To stop the Gleam service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)*/}

To start the stopped Gleam service choose the **Start** item from the same menu.

To restart the Gleam service choose the **Restart** item from the same menu.

## Stop and start Gleam using zCLI

zCLI is the Zerops command-line tool. To stop and start the Gleam service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and services to choose from.
:::




Zerops provides a powerful Gleam runtime service with extensive build support. The Gleam runtime is highly scalable and customizable to suit your development and production needs. With just a few clicks or commands, you can have a production-ready Gleam environment up and running in no time.

## Create a Gleam service using Zerops GUI

First, set up a project in the Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu under the **Services** section. From there, you can add a new Gleam service:

<Video
  src="/vids/services/gleam.webm"
  type="video/webm"
/>


### Choose a Gleam version

Zerops supports the following Gleam versions:

<UnorderedList data={data.gleam.readable} />

:::info
You can easily [upgrade](/gleam/how-to/upgrade) the major version at any time later.
:::

### Set a hostname

Enter a unique service identifier like "app", "cache", "gui", etc. Duplicate services with the same name within the same project are not allowed.

#### Limitations:

- Maximum 25 characters
- Must contain only lowercase ASCII letters (a-z) or numbers (0-9)

:::caution
The hostname is fixed after the service is created and cannot be changed later.
:::

### Set secret environment variables

Add environment variables with sensitive data, such as passwords, tokens, salts, certificates, etc. These will be securely saved inside Zerops and added to your runtime service upon start.

Setting secret environment variables is optional. You can always set them later in the Zerops GUI.

Read more about the [different types of environment variables](/gleam/how-to/env-variables#types-of-env-variables-in-zerops) in Zerops.

### Configure auto scaling

Zerops automatically scales Gleam services both vertically and horizontally. Vertical scaling adjusts the hardware resources (CPU, RAM, and disk) of a Gleam container, while horizontal scaling adds or removes entire containers.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. The power your application receives depends on the other applications running on the same CPU core. In the best-case scenario, your application gets 10/10 of the CPU core power, and 1/10 in the worst-case scenario.

**Dedicated**
The CPU core is dedicated exclusively to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

You can choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto scaling

Vertical auto scaling has the following default configuration:

<ResourceTable />

Gleam services always start with the minimal resources.

In most cases, the default parameters will work without issues. If you need to limit the cost of the Gleam service, you can lower the maximum resources. Zerops will never scale above the selected maximums.

If you experience insufficient Gleam performance or capacity, you can increase the minimum resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine-tune](/gleam/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application's needs.
:::

:::info
You can change the vertical auto scaling parameters at any time.
:::

#### Horizontal auto scaling

When a container needs more CPU or RAM but is already consuming the maximum resources defined for vertical auto scaling, Zerops will add a new container to your Gleam service. When your Gleam service doesn't need as much power and all containers are vertically scaled down such that their CPU allocation is near the minimum resources, Zerops will gradually remove entire containers.

Horizontal auto scaling has the following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>Minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>Maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Gleam services always start with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

[Learn more](/gleam/how-to/scaling) about Gleam auto scaling in Zerops.

#### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will automatically start a new container and deploy your application. However, the application will be unavailable for a short period. This mode is recommended for non-critical applications or development environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers based on your application's load. An application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed down to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents temporary outages in case any of the Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically, and the broken container will be deleted.

:::caution
Make sure your application is designed to run in multiple containers.
:::

## Create a Gleam service using zCLI

zCLI is the Zerops command-line tool. To create a new Gleam service via the command line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/gleam/how-to/create#create-a-project-description-file)
3. [Create a project with a Gleam and PostgreSQL service](#full-example)

### Create a project description file

Zerops uses a YAML format to describe the project infrastructure.

#### Basic example:

Create a directory called `my-project`. Inside the `my-project` directory, create a `description.yaml` file with the following content:
```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in gleam@{version} format
    type: gleam@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes your future project infrastructure. The project will contain one Gleam version 20 service with default [auto scaling](/gleam/how-to/scaling) configuration. Hostname will be set to "app", the internal port(s) the service listens on will be defined later in the [zerops.yaml](/gleam/how-to/build-pipeline#ports). Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

#### Full example:

Create a directory my-project. Create an description.yaml file inside the my-project directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a Gleam and PostgreSQL database
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in gleam@{version} format
    type: gleam@latest
    # optional: vertical auto scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
  - # second service hostname
    hostname: db
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"non_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain a Gleam service and a [PostgreSQL](/postgresql/overview) service.

Gleam service with "app" hostname, the internal port(s) the service listens on will be defined later in the [zerops.yaml](/gleam/how-to/build-pipeline#ports). Gleam service will run on version 20 with a custom vertical and horizontal scaling. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The hostname of the PostgreSQL service will be set to "db". The [single container](/postgresql/how-to/create#single-container) mode will be chosen and the default [auto scaling configuration](/postgresql/how-to/create#set-auto-scaling-configuration) will be set.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

| Parameter       | Description                                                                                                                     | Limitations             |
| --------------- | ------------------------------------------------------------------------------------------------------------------------------- | ----------------------- |
| **name**        | The name of the new project. Duplicates are allowed.                                                                            |                         |
| **description** | **Optional.** Description of the new project.                                                                                   | Maximum 255 characters. |
| **tags**        | **Optional.** One or more string tags. Tags do not have a functional meaning, they only provide better orientation in projects. |

At least one service in `services:` section is required. You can create a project with multiple services. The example above contains Gleam and PostgreSQL services but you can create a `description.yaml` with your own combination of [services](/features/infrastructure).

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit">Parameter</th>
      <th className="w-fit">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">
        <b>hostname</b>
      </td>
      <td className="w-fit">
        The unique service identifier.
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>type</b>
      </td>
      <td className="w-fit">
        Specifies the service type and version.
        <br />
        See what [Gleam service types](/references/import-yaml/type-list#runtime-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>verticalAutoscaling</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Defines <a href="/gleam/how-to/create#set-auto-scaling-configuration">custom vertical auto scaling parameters</a>.<br />
        All verticalAutoscaling attributes are optional. Not specified
        attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - cpuMode</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minCpu/maxCpu</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minCpu or maxCpu in CPU cores (integer).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minRam/maxRam</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minRam or maxRam in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minDisk/maxDisk</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minDisk or maxDisk in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>minContainers</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Default = 1. Defines the minimum number of containers
        for <a href="/gleam/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.<br />
        <br />
        <b>Limitations:</b>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maxContainers</b>
      </td>
      <td className="w-fit">
        Defines the maximum number of containers for <a href="/gleam/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.<br />
        <br />
        <b>Limitations:</b>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>envSecrets</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Defines one or more secret env variables as a key value
        map. See env variable <a href="/gleam/how-to/env-variables#env-variable-restrictions">restrictions</a>.
      </td>
    </tr>
  </tbody>
</table>

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>
### Add Gleam service to an existing project

#### Example:

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in gleam@{version} format
    type: gleam@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one Gleam service version 20 with default [auto scaling](/gleam/how-to/scaling) configuration will be added to your project. Hostname of the new service will be set to `app`. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The content of the `services:` section of `import.yaml` is identical to the project description file. The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the import.yaml file is 100 kB.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline_custom_runtime.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>


The default Gleam runtime environment contains:

- <span>{data.alpine.default}</span>
- selected version of Gleam selected when the runtime service was created.
- <a href="/references/cli">
    `zCLI`
  </a>
  , Zerops command line tool
- `npm`, `yarn`, `git` and `npx` tools

If you prefer the Ubuntu OS instead of Alpine, set the [build.os](/gleam/how-to/build-pipeline#os) attribute to `ubuntu`. To install additional packages or tools add one or more <a href="/gleam/how-to/build-pipeline#preparecommands-1">`run.prepareCommands`</a> commands to your `zerops.yaml`.

When the first deploy with a defined `prepareCommands` attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/gleam/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `run.prepareCommands` commands in the defined order

### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/gleam/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

The prepare runtime container is automatically deleted after the prepare runtime phase has finished or failed.

### Custom runtime environment cache

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the <a href="/gleam/how-to/build-pipeline#copy-folders-or-files-from-your-build-container">`build.addToRunPrepare`</a> and <a href="/gleam/how-to/build-pipeline#preparecommands-1">`run.prepareCommands`</a> attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the custom runtime cache go to `yyy`

{/*TODO screenshot*/}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.



## Delete Gleam service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete Gleam using zCLI

zCLI is the Zerops command-line tool. To delete the Gleam service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step3.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Application artefact

When the [build phase](/gleam/how-to/build-process) is finished, the application artefact is stored in the internal Zerops storage and the build container is deleted.

If you triggered the deploy pipeline [manually](/gleam/how-to/trigger-pipeline#manual-deploy-using-zerops-cli) using Zerops CLI, the application artefact is also uploaded to the internal Zerops storage.

Zerops uses the stored artefact to deploy the identical version of your application each time a new container is started:

- when a new application version is deployed
- when the application [scales horizontally](/gleam/how-to/create#horizontal-auto-scaling)
- when a runtime container fails and a new container is started automatically

## First deploy

When your application is deployed for the first time, Zerops will start one or more runtime containers based on the service [auto scaling settings](/gleam/how-to/scaling).

Zerops performs following actions for each new container:

1. Installs the runtime environment
2. Downloads the application artefact from the internal storage
3. Optionally runs the [init commands](/gleam/how-to/build-pipeline#initcommands)
4. Starts your application using the [start command](/gleam/how-to/build-pipeline#start)
5. Optionally waits until the [readiness check](/gleam/how-to/build-pipeline#readiness-check) succeeds
6. The container is now active and receives incoming requests.

Services with multiple containers are deployed in parallel.

:::info
If your application needs to be initialized in each runtime container, add [init commands](/gleam/how-to/build-pipeline#initcommands) to `zerops.yaml`.
:::

:::caution
Do not use the `initCommands` for customising your runtime environment. See [how to customise the runtime environment](/gleam/how-to/build-pipeline#preparecommands-1).
:::

## Further deploys

When a previous version of your application is already running, Zerops will start new containers. The count of new containers will be the same as the count of existing containers.

Zerops performs the identical actions for each new container as the first deployment.
When all new containers are started your service contains both new and old versions for a short period of time.

The old containers are then removed from the project balancer so they don't receive new requests. The Gleam process inside each of the old containers is terminated and all old containers are gradually deleted.

## Readiness checks

If your application isn't ready to handle requests right after it is started via the [start command](/gleam/how-to/build-pipeline#start), configure a [readiness check](/gleam/how-to/build-pipeline#readiness-check) in your `zerops.yaml`.

If the readiness check is defined, Zerops will:

1. Start your application
2. Perform a readiness check
3. If the readiness check fails, wait 5 seconds and repeat step 2.
4. If the readiness check succeeds, set the container as active.

Application in the runtime container with a pending readiness check won't receive any incoming requests. Only active containers receive incoming requests to your Gleam service.

If the readiness check is still failing after 5 minutes, the specific runtime container is marked as failed and Zerops will delete it, create a new runtime container and perform the deploy.

The <a href="/gleam/how-to/build-pipeline#httpget">`httpGet`</a> readiness check is successful when the URL returns HTTP status code `2xx`. The timeout is 5 seconds. When the URL returns a `3xx` HTTP status, the readiness check HTTP client will follow the redirect.

The <a href="/gleam/how-to/build-pipeline#exec">`exec.command`</a> readiness check is successful when the command returns status code 0. The timeout is 5 seconds.

Read the [runtime log](/gleam/how-to/logs#runtime-log) to troubleshoot failed readiness checks.

## Application versions

Zerops keeps 10 last versions of your application in the internal storage.

The list of application versions is available in Zerops GUI. Go to the service detail and choose **Service dashboard & runtime containers** from the left menu. The active version is highlighted, show all archived version by clicking on the button below.

<p align="center">
  <img
    src="/img/screenshots/pipeline_history.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

The pipeline detail is accessible from the additional menu. The pipeline detail contains

- The pipeline config (`zerops.yaml`) that was used for the selected version
- The build log (if available)
- The prepare runtime log (if available)

You can download the build artefact of the selected version or delete an inactive version manually.

## Restore an archived version

You can restore an archived version by choosing the **Activate** item from the additional menu.
Zerops will deploy the selected version and the active version will be archived.

The environment variables will be restored to the latest moment when the selected version was active.



Environment variables help you run your application in different environments. They allow you to isolate all specific environment aspects from your application code and keep your app encapsulated. You can create several projects in Zerops that represent different environments (development, stage, production) or even each developer can have a project with its own environment.

In Zerops you do not have to create a `.env` file manually. Zerops handles the environment variables for you.

## Types of env variables in Zerops

There are 3 different sets of env variables in Zerops:

| environment | type   | defined in                                                                        |
| ----------- | ------ | --------------------------------------------------------------------------------- |
| build       | basic  | [zerops.yaml](/gleam/how-to/build-pipeline#envvariables)                          |
| runtime     | basic  | [zerops.yaml](/gleam/how-to/build-pipeline#envvariables-1)                        |
| runtime     | secret | [Zerops GUI](#set-secret-env-variables-in-zerops-gui) |

Use the [secret env variables](/gleam/how-to/create#set-secret-environment-variables) for all sensitive data you don't want to store in your application code. Secret env variables are also useful if you need for testing where you need to change the value of some env variables frequently. Secret variables are managed in Zerops GUI and you don't have to redeploy your application.

The basic build and runtime env variables are listed in your [zerops.yaml](/zerops-yaml/specification) and deployed together with your application code. When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your zerops.yaml and redeploy your application to Zerops.

You can [reference](/gleam/how-to/env-variables#reference-a-local-variable-in-another-variable-value) another variable of the same service or even a variable of [another service](/gleam/how-to/env-variables#reference-a-variable-of-another-project-service) within the same project.

## Set secret env variables in Zerops GUI

Use secret variables to store passwords, tokens and other sensitive information that shouldn't be part of your repository and listed in zerops.yaml.

<p align="center">
  <img
    src="/img/screenshots/runtime_secret_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

You can set env variables when you [create](/gleam/how-to/create) a new Gleam service or you can set them later.

To configure env variables for an existing service, go to the service detail and choose **Environment variables** in the left menu. Scroll to the **Secret variables** section and click on the **Add secret variable** button and set variable key and value.

You can edit or delete env variables that you've created by clicking on the menu on the right side of each row.

The changes you've made to environment variables will be automatically applied to all containers of your project's services.

:::caution
You need to **restart** the runtime service after you update environment variables. The Gleam process running in the container receives the list env variables only when it starts. Update of the env variables while the Gleam process is running does not affect your application.
:::

## Set basic build env variables in zerops.yaml

To set basic env variables for the build environment, add the `envVariables` attribute to the build section in your `zerops.yaml`

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
       …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Set basic runtime env variables in zerops.yaml

To set basic env variables for the runtime environment, add the `envVariables` attribute to the runtime section in your `zerops.yaml`.

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    run:
       …

      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Env variable restrictions

**key**

- must satisfy the following regular expression: `[a-zA-Z_]+[a-zA-Z0-9_]*`
- all variable keys in the same service must be unique regardless of case
- keys are case sensitive

**value**

- must contain only ASCII characters
- the _End of Line_ character is forbidden

These restrictions apply to all [types of env variables](/gleam/how-to/env-variables#types-of-env-variables-in-zerops).

## Referencing other env variables

You can reference another variable of the same service using `${key}` in your variable value. You can even reference a variable from a different service using `${hostname_key}`. The referenced variable doesn't need to exist when you are entering your variable.

### Reference a local variable in another variable value

| Variable key | Variable value      | Computed variable value |
| ------------ | ------------------- | ----------------------- |
| id           | 12345               | 12345                   |
| hostname     | app                 | app                     |
| name         | `${id}-${hostname}` | 12345-app               |

### Reference a variable of another project service

Let's say your project contains two PostgreSQL services `dbtest` and `dbprod`. Both services have a `connectionString` variable. Then you can create a `dbConnectionString` env variable in your Gleam runtime and set `${dbtest_connectionString}` as the variable value. Zerops will fill in the value of the `connectionString` variable of the `dbtest` service.

When you change the `dbConnectionString` value to `${dbprod_connectionString}`, Zerops will fill in the value of the `connectionString` variable of the `dbprod` service.

:::caution
When you change the value of the `connectionString` variable in the service `dbtest` you need to **restart** the Gleam service. The Gleam process running in the container receives the list env variables only when it starts. Update of the env variables while the Gleam process is running does not affect your application.
:::

## Generated env variables

Zerops creates several helper variables when a Gleam service is created, e.g. `hostname`, `PATH`. Some helper variables are read-only (`hostname`), others are editable (`PATH`). Generated variables cannot be deleted.

Generated env variables are listed on the **Environment variables** page. Scroll to the **Generated variables** section.

{/* TODO screenshot of the generated env variables of the respective runtime*/}

<p align="center">
  <img
    src="/img/screenshots/nodejs_generated_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## How to read env variables from your Gleam app

Zerops passes all environment variables from all project services when your Gleam app is deployed and started.

To access the local environment variable i.e. the variable set to this Gleam service in your app, use:

```sh
process.env.YOUR_VARIABLE_KEY_HERE
```

## How to read env variables of another service

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Examples:

To access the `connectionString` env variable of the `mariadb1` service, use `mariadb1_connectionString` as the env variable key.
To access the `password` env variable of the `mariadb2` service, use `mariadb2_password` as the env variable key.

## How to read runtime env variables in the build environment

You can use runtime env variables in the build environment using the `RUNTIME_` prefix. For example if you have a runtime variable with the `connectionString` key, use the `RUNTIME_connectionString` to read the variable in the build environment. This rule applies both for basic and secret runtime variables.

## Basic and secret env variable with the same key

If you create a secret env variable and a basic runtime env variable with the same key, Zerops saves the basic runtime env variable from your zerops.yaml and ignores the secret env variable.

If you create a basic build env variable and a runtime env variable with the same key, Zerops saves both because the build and runtime environments have separate sets of env variables.



## Zerops GUI

In Zerops GUI, go to the service detail page and choose **Service containers & resources overview** and scroll down to the list of containers.

<p align="center">
  <img
    src="/img/screenshots/nodejs_containers_list.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Then click on the file browser icon and the file browser opens:

<p align="center">
  <img
    src="/img/screenshots/nodejs_file_browser.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

If your service is in the [HA mode], you can switch between containers in the top left corner.

## zCLI & SSH

You can connect to the container via SSH with the Zerops CLI and browse its files.
How to [connect to your service via SSH](/references/ssh).



Zerops provides 3 different logs:

- [build log](#build-log)
- [prepare runtime log](#prepare-runtime-log)
- [runtime log](#runtime-log)

## How to access logs

### Build log

#### Zerops GUI

To access a build log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Build log**. The build log button is available only if the [build pipeline](/gleam/how-to/trigger-pipeline) was triggered for the selected deploy.

#### zCLI

To access a build log in Zerops CLI use

```sh
zcli service log --showBuildLogs
```

Read more about the [zcli service log](/references/cli/access-logs) command.

### Prepare runtime log

#### Zerops GUI

To access a prepare runtime log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Prepare runtime log**. The prepare runtime log button is available only if the [prepare runtime pipeline](/gleam/how-to/build-pipeline#preparecommands-1) was triggered for the selected deploy.

#### zCLI

_Prepare runtime log is currently not supported in zCLI._

### Runtime log

#### Zerops GUI

To access a runtime log in Zerops GUI, go to the service detail and choose **Runtime log** in the left menu.

<p align="center">
  <img
    src="/img/screenshots/gleam_runtime_log.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Each runtime container has its own log. If your service has multiple containers, select the container in the log header.

You can filter log records by minimum severity or by time.

#### zCLI

To access the log of the runtime containers in Zerops CLI use

```sh
zcli service log
```

Read more about the [zcli service log](/references/cli/access-logs) command.

## Gleam logging configuration

Zerops logs all messages sent

- to the standard error (`stderr`)
- to the standard output (`stdout`)
- via the Gleam `console.log` method

### Severity level

By default the `console.log` creates a message with the `Informational (6)` severity.

Add a severity number in the `<N>` format as a prefix to set a custom severity as shown below:

```js
console.log('A message with the informational severity ...');
console.log('<0>Emergency (0) severity > system is unusable.');
console.log('<1>Alert (1) severity > action must be taken immediately.');
console.log('<2>Critical (2) severity > critical conditions.');
console.log('<3>Error (3) severity > error conditions.');
console.log('<4>Warning (4) severity > warning conditions.');
console.log('<5>Notice (5) severity > normal, but significant, condition.');
console.log('<6>Informational (6) severity > informational message.');
console.log('<7>Debug (7) severity > debug-level message.');
```

:::info

`console.info`, `console.warn`, `console.debug`
, and `console.error` are just aliases to the `
  console.log
` method. They don't set the appropriate severity number. Use the `
  &lt;N&gt;
` prefix instead. :::




Zerops performs an automated scaling of hardware resources required to run your runtime application based on its usage. If the current use of your application does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your application is under heavy load or needs to store more data, then auto scaling increases the resources to make sure it runs smoothly.

## Vertical and horizontal auto scaling

Each application you deploy starts with the minimum hardware resources: **CPU** cores, **RAM** and **Disk**. Zerops monitors the usage of these 3 resources and if the usage exceeds a set threshold, more CPU cores, RAM or Disk is allocated to the service. This is called **vertical scaling**.

<p align="center">
  <Image
    lightImage="/img/gui/resources.webp"
    darkImage="/img/gui/resources.webp"
    alt="Resources of a Zerops service"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

**Horizontal scaling** adds or removes whole containers.

Zerops has a preference for vertical scaling because it's faster and more precise. If the vertical auto scaling hits the defined maximum a new container is started automatically. When your application doesn't need so much power and all containers are vertically scaled down, Zerops will gradually remove whole containers.

<p align="center">
  <img
    src="/img/screenshots/scaling2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Configure auto scaling

To change the auto scaling settings go to the Gleam service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### CPU mode

#### Shared

Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

#### Dedicated

The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

Gleam service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Gleam service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Gleam performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Gleam service. When your Gleam service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Gleam service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your application starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your application.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your application doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

By default Zerops keeps a minimum free RAM in each container. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your application need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 0.125 GB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the application is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each Gleam service. Zerops will never scale above the entered values. If your application is in [highly available mode], maximal resources are identical for all containers of the Gleam service.

### Not enough resources to scale up

If one of the Gleam containers needs more resources but there are not enough of them on the underlying machine, a new container with the required hardware resources will be started on another machine. When the new container is ready, it will be added to the service balancer. The old container will be removed from the balancer and deleted.

### Automatic scale down

When the application no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the application from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal autoscaling

Zerops prefers vertical scaling over horizontal scaling because vertical scaling is faster and allows finer adjustment to the required performance. Horizontal scaling can be disabled by setting the same number for the minimum and maximum container count. Zerops will then scale the Gleam service only vertically.

Your application is created with the defined minimum number of containers. Zerops will add a new container when any of the service's containers reaches the maximum limit for vertical scaling for CPU cores or RAM. Zerops doesn't start a new container when the maximum disk space is reached. No more containers are added when the defined maximum container limit is reached.

The new container is started with a minimum disk size and with an average CPU cores and RAM of the existing containers.

By customising the vertical auto scaling limits, you can cause the horizontal scaling to start earlier. For example if you lower the vertical auto scaling maximum to 1 CPU core, Zerops will start a new container if some of the running containers are using the whole CPU core for more than 20 seconds.

If the application no longer needs as much power, Zerops will gradually remove containers to the defined minimum count. The container is removed after its CPU cores are scaled down to the defined minimum and the free CPU is safely above the minimum threshold for vertical scaling. Zerops only **removes containers** with a minimum **15 minute lifetime**.

## Monitor Gleam resources

Zerops provides information about how much hardware resources the Gleam service is currently using. Go to the service detail in Zerops GUI and select **Service dashboard & runtime containers** in the left menu. Zerops also provides the history of resource usage.



Zerops provides [shared storage service](/shared-storage/overview) that can be connected to runtime services. Shared storage enables your runtime service to share files between all containers of the same service or even among containers of different runtime services.

## Connect a shared storage in Zerops GUI

Connect your Gleam service directly when creating a new shared storage service. Just select your Gleam service in the **Share with Services** block on the **Add new shared storage service** page.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_1.png)

To connect the existing shared storage to the Gleam service, go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Select a runtime service and the shared storage will be connected to the selected runtime.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_2.png)

Zerops will create a new folder `/mnt/[shared storage name]`` in the runtime root folder. E.g. `/mnt/teststorage`for a`teststorage` shared storage. The content of this folder is shared among all containers of the runtime service you've selected. If you select multiple runtimes, the content of the folder will be shared among all containers of selected services.

## Disconnect a shared storage in Zerops GUI

Go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Switch off the toggle to disconnect the shared storage from the selected runtime.

:::note
Your runtime service will be automatically restarted when a shared storage is disconnected.
:::

## Create Gleam service with a shared storage using zCLI

zCLI is the Zerops command-line tool. To create a new Gleam service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/gleam/how-to/shared-storage#create-a-project-description-file)
3. [Create a project with a Gleam service and a shared storage](/gleam/how-to/shared-storage#create-a-project-with-a-gleam-service-and-a-shared-storage)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### description.yaml format

[Read the basics](/gleam/how-to/create#create-a-project-description-file) how to define the Gleam service using the description.yaml.

#### Example with a shared storage

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project

  # optional: project description
  description: A project with a Gleam and a shared storage

  # optional: project tags
  tags:
    - DEMO
    - ZEROPS

# array of project services
services:
  - # service name
    hostname: teststorage

    # shared storage service has no version
    type: shared-storage

    # mode: HA / NON_HA
    mode: NON_HA

  - # service name
    hostname: app

    # service type and version number in gleam@{version} format
    type: gleam@latest

    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2

    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4

    # Mount the shared storage to the Gleam service
    mount:
      - teststorage
```

The mount attribute accepts an array of shared storage names you want to mount to your runtime service.

### Create a project with a Gleam service and a shared storage

Follow the article [How to create a project based on the description.yaml](/gleam/how-to/create#create-a-project-based-on-the-descriptionyaml).




<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-1.webp"
    darkImage="/img/mind-maps/build-deploy/step-1-dark.webp"
    alt="build deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Automatic builds and deploys from GitHub or GitLab

Integrate Zerops to your GitHub or GitLab repository and configure the automatic builds and deploys.

Follow these steps:

1. Add [zerops.yaml](/gleam/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository.
2. Connect your GitHub repository or connect your GitLab repository

Then each time you create a new tag or push to a specific branch, depending on the configuration, GitHub or GitLab will initiate a new build & deploy pipeline.

<p align="center">
  <Image
    lightImage="/img/gui/github-integration.webp"
    darkImage="/img/gui/github-integration.webp"
    alt="github integration"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

### Skip the automatic pipeline once

To ensure that a pipeline is not triggered by your next push, add `[ci skip]` or `[skip ci]` to the commit message. It is case insensitive.

:::note
You will still see a successful delivery of a webhook in your Github/Gitlab repository as a webhook is actually triggered, but with no action.
:::

## Manual builds and deploys using Zerops CLI

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    darkImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    alt="Manual Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

To start a new build & deploy pipeline manually, use the Zerops CLI.

Follow these steps:

1. Add <a href="/gleam/how-to/build-pipeline#add-zeropsyaml-to-your-repository">`zerops.yaml`</a> to your repository.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli push` command.

The `zcli push` command uploads your application code, builds and deploys your application in Zerops.

The command triggers the [build pipeline](/gleam/how-to/trigger-pipeline) defined in `zerops.yaml`. `zerops.yaml` must be in the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

zCLI uploads all files and subdirectories of the working directory to Zerops and starts the build pipeline. If the `.gitignore` file is found, it is interpreted and the defined files and folders will be ignored.

If you just want to deploy your application to Zerops, use the [zcli deploy](#manual-deploy-using-zerops-cli) command instead.

#### Push command parameters

```sh
Usage:
  zcli push [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.
  -h, --help                     the service push command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

zCLI commands are interactive, when you press enter after `zcli push`, you will be given a list of your projects to choose from.

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

## Manual deploy using Zerops CLI

To start only a deploy pipeline, use the Zerops CLI.

Follow these steps:

1. Add [zerops.yaml](/gleam/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository. Omit the build section.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli service deploy` command.

The `zcli service deploy` command uploads your application and deploys it in Zerops. Use this tool if you have your own build process. If you want to build your application in Zerops, use an [automatic](#automatic-builds-and-deploys-from-github-or-gitlab) or [manual](#manual-builds-and-deploys-using-zerops-cli) build process.

#### Deploy command parameters

```sh
Usage:
  zcli service deploy pathToFileOrDir [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
  -h, --help                     the service deploy command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

`pathToFileOrDir` defines a path to one or more directories and/or files relative to the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

`zerops.yaml` must be placed in the working directory.

:::info
You can change the deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your working directory.
:::



You can upgrade or downgrade your Gleam service to a different major Gleam version by setting the <a href="/gleam/how-to/build-pipeline#base-1">`run.base`</a> parameter in your `zerops.yaml`. When you [trigger a new pipeline](/gleam/how-to/trigger-pipeline), Zerops will start new runtime container(s) with the required Gleam version. If you don't specify the `run.base` attribute in your `zerops.yaml`, Zerops keeps the current Gleam version for your runtime.

If you want to build your application with a different major Gleam version, change the <a href="/gleam/how-to/build-pipeline#base">`build.base`</a> parameter in your `zerops.yaml`. The `build.base` is the required attribute.




[Gleam ↗](https://gleam.org/en) is an asynchronous event-driven JavaScript runtime, which is designed to build scalable network applications.

As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-gleam), a **_recipe_**, containing the most simple Gleam web application. The repo will be used as a source from which the app will be built.

<CustomCard title="Feel free to deploy the recipe yourself" emoji="🚀">
  This is the most bare-bones example of Gleam app running on Zerops — as few libraries as possible,
  just a simple endpoint with connect, read and write to a Zerops PostgreSQL database.

  <DeployButton link="gleam" badgeWidth="200" />
</CustomCard>

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)


2. In the **Projects** box click on **Import a project** and paste in the following YAML config ([source ↗](https://github.com/zeropsio/recipe-gleam/blob/main/zerops-project-import.yaml)):

```yaml
project:
  name: recipe-gleam
  tags:
    - zerops-recipe

services:
  - hostname: api
    type: gleam@1.5
    enableSubdomainAccess: true
    buildFromGit: https://github.com/zeropsio/recipe-gleam

  - hostname: db
    type: postgresql@16
    mode: NON_HA
    priority: 1
```

3. Click on **Import project** and wait until all pipelines have finished.

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://api-808-3000.prg1.zerops.app`.
2. Click or the `subdomain` URL to open it in a browser and you should see

```
{"message":"This is a simple Gleam application running on Zerops.io, each request adds an entry to the PostgreSQL database and returns a count. See the source repository (https://github.com/zeropsio/recipe-gleam) for more information.","newEntry":"e64be640-d6c2-4be8-93ac-d1e40e56fa06","count":1}
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::

## How to start

It doesn't matter whether it's your first curious introduction to Zerops, you have already mastered the basics and are looking for a tiny detail or inspiration. Below, choose a section that fits your needs:

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/gleam/getting-started',
      label: 'New to Zerops?',
      customProps: {
        icon: Icons['rocket-launch'],
        description: 'There is no better way to start than to try it yourself.',
      },
    },
    {
      type: 'link',
      href: '/gleam/how-to/create',
      label: 'Care for details?',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description:
          'Dive in all Zerops has to offer for your Gleam application.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=gleam&type=all&language=&sort=',
      label: 'Gleam recipes',
      customProps: {
        icon: Icons['github'],
        description:
          'Get inspired by already existing repositories, ready to be imported to Zerops.',
      },
    },
  ]}
/>

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/gleam/how-to/create',
      label: 'Create Gleam service',
      customProps: {
        icon: Icons['gleam'],
        description: 'Start with creating a Gleam service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: '/gleam/how-to/build-pipeline#add-zeropsyaml-to-your-repository',
      label: 'Zerops.yaml',
      customProps: {
        icon: Icons['puzzle'],
        description:
          'See a full example of zerops.yaml file to create your own app.',
      },
    },
    {
      type: 'link',
      href: '/gleam/how-to/scaling',
      label: 'Scaling configuration',
      customProps: {
        icon: Icons['adjustments'],
        description:
          'Set up scaling of your Gleam application so that it runs smoothly while using only necessary resources.',
      },
    },
  ]}
/>

{" "}

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/gleam/how-to/build-process#customize-gleam-build-environment',
      label: 'Customize build environment',
      customProps: {
        icon: Icons['sparkles'],
      },
    },
    {
      type: 'link',
      href: '/gleam/how-to/customize-runtime',
      label: 'Customize runtime environment',
      customProps: {
        icon: Icons['sparkles-solid'],
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/gleam/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>




<FAQ>
  <FAQItem question="Sample Question">sample answer</FAQItem>
</FAQ>




This quick start allows you to get hands-on experience of Zerops, whether you only want to see it in action or want to start small and scale up the project size later. The purpose of this guide is to get an existing Go application up and running easily.

If you are already familiar with Zerops and you are interested in more detailed guides for your own application, feel free to head straight to the [How to](/go/how-to/create) section.

## Guides

We have created a repository, a _recipe_, containing the most simple Go web application, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics with one-service app.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-golang',
      label: 'Go + SQL database',
      customProps: {
        icon: Icons['github'],
        description: 'A more complex, multi-service application example.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=go&type=all&language=&sort=',
      label: 'All Go recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspired.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



## Private internal access

Projects in Zerops represent a group of one or more services.
Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its [internal port](/go/how-to/build-pipeline#ports).

To connect to your application with `app` hostname running on [internal port](/go/how-to/build-pipeline#ports) `8080`, simply use `http://app:8080`

:::info
Do not use `https://` when communicating with Go from other runtime services in the same project. The internal communication is done over a private network and is isolated from other projects.
:::

### Use Go environment variables

Zerops creates default environment variables for each Go service to help you with connection within the same project. To avoid the need to copy the access parameters manually, use [generated environment variables](/go/how-to/env-variables#generated-env-variables) of the Go service.

#### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Example:

To access the `API_TOKEN` env variable of the `app` service, use `app_API_TOKEN` as the env variable key.

Read more about [env variables](/go/how-to/env-variables).

## Private access via VPN

### Start VPN connection

You can securely connect to your Go application from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)

### Access Go application through VPN

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/go/how-to/env-variables) are available when connected through VPN. To connect to your Go application in Zerops set the hostname and [internal port](/go/how-to/build-pipeline#ports) e.g. http://app:8080

:::info
Do not use `https://` when communicating with Go over the VPN. The security is assured by the VPN. The internal communication is done over a private network and is isolated from other projects.
:::

### Connect via SSH

Use the <a href="/references/ssh">`ssh` command</a> to connect to your service via SSH.

### Stop VPN connection

[Stop the Zerops VPN](/references/vpn#stop-vpn) in zCLI.

## Public access through zerops.io subdomain

By default, your Go service is not publicly accessible. To test your application, enable the [public access through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain).

## Public access through your domain

By default, your Go service is not publicly accessible. When your application is ready for production or if you want to test it on the production domain, [configure the public access through your domain](/features/access#public-access-through-your-domain).

## Public access from another Zerops project

All services of the same project share a dedicated private network. To connect to a service within the same project, just use the service hostname and its [internal port](/go/how-to/build-pipeline#ports). Different projects are not connected inside Zerops. To connect to a runtime service from another Zerops project, you need to use public access either [through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain) or [through your domain](/features/access#public-access-through-your-domain).





Zerops provides a customizable build and runtime environment for your Go application.

## Add zerops.yaml to your repository

Start by adding `zerops.yaml` file to the **root of your repository** and modify it to fit your application:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: go@latest

      # OPTIONAL. Set the operating system for the build environment.
      # os: ubuntu

      # OPTIONAL. Customize the build environment by installing additional packages
      # or tools to the base build environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # REQUIRED. Build your application
      buildCommands:
        - go build -o app main.go
      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles: app

      # OPTIONAL. Which files / folders you want to cache for the next build.
      # Next builds will be faster when the cache is used.
      # cache: some_file

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base: go@latest

      # OPTIONAL. Sets the internal port(s) your app listens on:
      ports:
        # port number
        - port: 8080

      # OPTIONAL. Customize the runtime Go environment by installing additional
      # dependencies to the base Go runtime environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Go application is started.
      # initCommands:
      #  - rm -rf ./cache

      # REQUIRED. Your Go application start command
      start: ./app
```

The top-level element is always `zerops`.

### Setup

The first element `setup` contains the **hostname** of your service. A runtime service with the same hostname must exist in Zerops.
Zerops supports the definition of multiple runtime services in a single `zerops.yaml`. This is useful when you use a monorepo. Just add multiple setup elements in your `zerops.yaml`:

```yaml
zerops:
  # definition for app service
  - setup: app
    build: ...
    run: ...

  # definition for api service
  - setup: api
    build: ...
    run: ...
```

Each service configuration contains at least two sections: **build** and **run**. Both sections are required to build and deploy your Go application in Zerops. If you'd like to use a readiness check, add an optional **deploy** section.

## Build pipeline configuration

### base

_REQUIRED._ Sets the base technology for the build environment.

Following options are available for Go builds:

<UnorderedCodeList data={data.go.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: go@latest
      ...
```

<p>
  The base build environment contains {data.alpine.default}, the selected
  version of Go, <a href="/references/cli">Zerops command line tool</a>, `git` and `wget`.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the build environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base:
        - go@latest
      prepareCommands:
        - zsc add nodejs@latest
      ...
```

See the full list of supported [build base environments](/zerops-yaml/base-list#runtime-services).

To customize your build environment use the [prepareCommands](/go/how-to/build-pipeline#preparecommands) attribute.

:::note
Modifying the base technology will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for more details about cache invalidation.
:::

### os

_OPTIONAL._ Sets the operating system for the build environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customized.
:::

:::note
Changing the OS setting will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache behavior.
:::

### prepareCommands

_OPTIONAL._ Customizes the build environment by installing additional dependencies or tools to the base build environment.

The base build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Go defined in the [base](/go/how-to/build-pipeline#base) attribute
- [Zerops command line tool](/references/cli)
- `git` and `wget`

To install additional packages or tools add one or more prepare commands:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: go@latest

      # OPTIONAL. Customize the build environment by installing additional packages
      # or tools to the base build environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first build is triggered, Zerops will

1. create a build container
2. download your application code from your repository
3. run the prepare commands in the defined order

The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).

:::note
These commands are skipped when using cached environment. Modifying `prepareCommands` will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache invalidation.
:::

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/go/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all prepare commands are finished, your custom build environment is ready for the build phase.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### buildCommands

_REQUIRED._ Defines build commands.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: go@latest

      # REQUIRED. Build your application
      buildCommands:
        - go build -o app main.go
      ...
```

At least one command is required. Zerops triggers each command in the defined order in a dedicated build container.

Before the build commands are triggered the build container contains:

1. base environment defined by the [base](/go/how-to/build-pipeline#base) attribute
2. optional customisation of the base environment defined in the [prepareCommands](/go/how-to/build-pipeline#preparecommands) attribute
3. your application code

#### Run build commands as a single shell instance

Use following syntax to run all commands in the same environment context. For example, if one command changes the current directory, the next command continues in that directory. When one command creates an environment variable, the next command can access it. Suppose your `main.go` file is in a `src` directory.

```yaml
buildCommands:
  - |
    cd src
    go build -o app main.go
```

#### Run build commands as a separate shell instances

When the following syntax is used, each command is triggered in a separate environment context. For example, each shell instance starts in the home directory again. When one command creates an environment variable, it won't be available for the next command. Suppose your `main.go` file is in a `src` directory.

```yaml
buildCommands:
  - cd src
  - go build -o app src/main.go
```

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/go/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the --verbose option.

```yaml
buildCommands:
  - go build -v -o app main.go
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the deploy phase.

### deployFiles

_REQUIRED._ Selects which files or folders will be deployed after the build has successfully finished. To filter out specific files or folders, use <a href="#deployignore">`.deployignore`</a> file.

```yaml
# REQUIRED. Select which files / folders to deploy after
# the build has successfully finished
deployFiles:
  - app
```

Determines files or folders produced by your build, which should be deployed to your runtime service containers.

The path starts from the **root directory** of your project (the location of `zerops.yaml`). You must enclose the name in quotes if the folder or the file name contains a space.

The files/folders will be placed into `/var/www` folder in runtime, e.g. `./src/assets/fonts` would result in `/var/www/src/assets/fonts`.

#### Examples

Deploys a folder, and a file from the project root directory:

```yaml
deployFiles:
  - app
  - file.txt
```

Deploys the whole content of the build container:

```yaml
deployFiles: .
```

Deploys a folder, and a file in a defined path:

```yaml
deployFiles:
  - ./path/to/file.txt
  - ./path/to/dir/
```

#### How to use a wildcard in the path

Zerops supports the `~` character as a wildcard for one or more folders in the path.

Deploys all `file.txt` files that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/file.txt
```

Deploys all folders that are located in any path that begins with `/path/to/`

```yaml
deployFiles: ./path/to/~/
```

Deploys all folders that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/
```

:::note Example
By default, `./src/assets/fonts` deploys to `/var/www/src/assets/fonts`, keeping the full path. Adding `~`, like `./src/assets/~fonts`, shortens it to `/var/www/fonts`
:::
#### .deployignore

Add a `.deployignore` file to the root of your project to specify which files and folders Zerops should ignore during deploy. The syntax follows the same pattern format as <a href="https://git-scm.com/docs/gitignore#_pattern_format">`.gitignore`</a>.

To ignore a specific file or directory path, start the pattern with a forward slash (`/`). Without the leading slash, the pattern will match files with that name in any directory.

:::tip
For consistency, it's recommended to configure both your `.gitignore` and `.deployignore` files with the same patterns.
:::

Examples:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      deployFiles: ./
```

```text title=".deployignore"
/src/file.txt
```
The example above ignores `file.txt` only in the root src directory.
```text title=".deployignore"
src/file.txt
```
This example above ignores `file.txt` in ANY directory named `src`, such as:
- `/src/file.txt`
- `/folder2/folder3/src/file.txt`
- `/src/src/file.txt`

:::note
`.deployignore` file also works with <a href="/references/cli/commands#deploy">`zcli service deploy`</a> command.
:::

### cache

_OPTIONAL._ Defines which files or folders will be cached for the next build.

```yaml
# OPTIONAL. Which files / folders you want to cache for the next build.
# Next builds will be faster when the cache is used.
cache: file.txt
```

The cache attribute helps optimize build times by preserving specified files between builds.

The cache attribute supports the [~ wildcard character](#how-to-use-a-wildcard-in-the-path).

Learn more about the [build cache system](/features/build-cache) in Zerops.

### envVariables

_OPTIONAL._ Defines the environment variables for the build environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      base: go@latest
        …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        GO_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/go/how-to/env-variables) in Zerops.

## Runtime configuration

### base

_OPTIONAL._ Sets the base technology for the runtime environment.
If you don't specify the `run.base` attribute, Zerops keeps the current Go version for your runtime.

Following options are available for Go builds:

<UnorderedCodeList data={data.go.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: go@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
        base: go@latest
      ...
```

<p>
  The base runtime environment contains {data.alpine.default}, the
  selected major version of Go, Zerops command line tool, `git` and `wget`.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the runtime environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: go@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base:
        - go@latest
      prepareCommands:
        - zsc add nodejs@latest
      ...
```

See the full list of supported [run base environments](/zerops-yaml/base-list).

To customise your build environment use the `prepareCommands` attribute.

### os

_OPTIONAL._ Sets the operating system for the runtime environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customised.
:::

### ports

_OPTIONAL._ Specifies one or more internal ports on which your application will listen.

Projects in Zerops represent a group of one or more services. Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its internal port.

For example, to connect to a Go service with hostname = "app" and port = 8080 from another service of the same project, simply use `app:8080`. Read more about [how to access a Go service](/go/how-to/access).

Each port has following attributes:


<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">port</td>
      <td className="w-fit">Defines the port number. You can set any port number between <em>10</em> and <em>65435</em>. Ports outside this interval are reserved for internal Zerops systems.</td>
    </tr>
    <tr>
      <td className="w-fit">protocol</td>
      <td className="w-fit"><strong>Optional.</strong> Defines the protocol. Allowed values are <code>TCP</code> or <code>UDP</code>. Default value is <code>TCP</code>.</td>
    </tr>
    <tr>
      <td className="w-fit">httpSupport</td>
      <td className="w-fit"><strong>Optional.</strong> <code>httpSupport = true</code> is the default setting for TCP protocol. Set <code>httpSupport = false</code> if a web server isn't running on the port. Zerops uses this information for the configuration of <a href="/features/access">public access</a>. <code>httpSupport = true</code> is available only in combination with the TCP protocol.</td>
    </tr>
  </tbody>
</table>


### prepareCommands

_OPTIONAL._ Customises the Go runtime environment by installing additional dependencies or tools to the runtime base environment.

<p>
  The base Go environment contains {data.alpine.default}, the selected
  major version of Go, <a href="/references/cli">Zerops command line tool</a> and `git` and `wget`. To install additional packages or tools add one or more prepare commands:
</p>

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Go runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first deploy with a defined prepare attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/go/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `prepareCommands` commands in the defined order

#### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/go/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

#### Cache of your custom runtime environment

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the [build.addToRunPrepare](#copy-folders-or-files-from-your-build-container) and `run.prepareCommands` attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.

{/* TODO screenshot** */}

When the prepare cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### Copy folders or files from your build container

<p>
  The prepare runtime container contains {data.alpine.default}, the
  selected major version of Go, <a href="/references/cli">Zerops command line tool</a> and `git` and `wget`.
</p>

The prepare runtime container does not contain your application code nor the built application. If you need to copy some folders or files from the build container to the runtime container (e.g. a configuration file) use the `addToRunPrepare` attribute in the [build section](#build-pipeline-configuration).

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...
      addToRunPrepare: ./runtime-config.yaml

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Go runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

In the example above Zerops will copy the `runtime-config.yaml` file from your build container **after the build has finished** into the new **prepare runtime** container. The copied files and folders will be available in the `xxx` folder in the new prepare runtime container before the prepare commands are triggered.

### initCommands

_OPTIONAL._ Defines one or more commands to be run each time a new runtime container is started or a container is restarted.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Go application is started.
      initCommands:
        - rm -rf ./cache
```

These commands are triggered in the runtime container before your Go application is started via the [start command](/go/how-to/build-pipeline#start).

Use init commands to clean or initialise your application cache or similar operations.

:::caution
The init commands will delay the start of your application each time a new runtime container is started (including the [horizontal scaling](/go/how-to/scaling#horizontal-auto-scaling) or when a runtime container is restarted).

Do not use the init commands for customising your runtime environment. Use the [run:prepareCommands](/go/how-to/build-pipeline#preparecommands-1) attribute instead.
:::

#### Command exit code

If any of the `initCommands` fails, it returns an exit code other than 0, but deploy is **not** canceled. After all init commands are finished, regardless of the status code, the application is started. Read the [runtime log](/go/how-to/logs#runtime-log) to troubleshoot the error.

#### Single or separated shell instances

You can configure your `initCommands` to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### envVariables

_OPTIONAL._ Defines the environment variables for the runtime environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to run your application ====
    run:
      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        GO_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/go/how-to/env-variables) in Zerops.

### start

_REQUIRED._ Defines the start command for your Go application.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Go application start command
      start: ./app
```

We recommend starting your Go application using `./app`.

### health check

_OPTIONAL._ Defines a health check.

`healthCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the health check to request a local URL using a HTTP GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Go application start command
      start: ./app

      # OPTIONAL. Define a health check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      healthCheck:
        httpGet:
          port: 80
          path: /status
```

Read more about how the [health check works] in Zerops.

#### exec

Configures the health check to run a local command.
Following attributes are available:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/go/how-to/create#set-secret-environment-variables">environment variables</a> as your Go application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>


**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Go application start command
      start: ./app

      # OPTIONAL. Define a health check with a shell command.
      healthCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [health check works] in Zerops.

### crontab

_OPTIONAL._ Defines cron jobs.

Setup cron jobs in the following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app

    # ==== how to run your application ====
    run:
      crontab:
        # REQUIRED. Sets the command to execute:
        - command: ""
        # REQUIRED. Sets the interval time to execute:
          timing: "0 * * * *"
```

Read more about setting up [cron](/references/cron) in Zerops.

## Deploy configuration

### readiness check

_OPTIONAL._ Defines a readiness check. Read more about how the [readiness check works](/go/how-to/deploy-process#readiness-checks) in Zerops.

`readinessCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the readiness check to request a local URL using a http GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        httpGet:
          port: 80
          path: /status

    # ==== how to run your application ====
    run: ...
```

Read more about how the [readiness check works](/go/how-to/deploy-process#readiness-checks) in Zerops.

#### exec

Configures the readiness check to run a local command.
Following attributes are available:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/go/how-to/create#set-secret-environment-variables">environment variables</a> as your Go application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [readiness check works](/go/how-to/deploy-process#readiness-checks) in Zerops.




<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Description of the build process

Zerops starts a temporary build container and performs following actions:

1. Installs the build environment:
   - Sets up base system and Go runtime
   - Restores cached files if available (based on `build.cache` configuration)
   - Validates cache against current `build.os`, `build.base`, and `build.prepareCommands`
2. Downloads your application source code from [GitHub ↗](https://www.github.com), [GitLab ↗](https://www.gitlab.com) or via [Zerops CLI](/references/cli)
3. Optionally [customizes the build environment](#customize-go-build-environment)
4. Runs the build commands
5. Uploads the application artefact to the internal Zerops storage
6. Preserves specified files for future builds (based on `build.cache` configuration)
7. Optionally [customizes the runtime environment](/go/how-to/customize-runtime)
8. [Deploys your application](/go/how-to/deploy-process)

The build container is automatically deleted after the build has finished or failed.

## Cancel running build

When you know that the running build is not correct and you want to cancel it, you can do it in Zerops GUI. Go to the service detail, select **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Cancel build** button.

{/*TODO screenshot of a running build pipeline*/}

The build cancellation is available before the build pipeline is finished. When the build is finished, the deployment cannot be cancelled.

## Customize Go build environment

The default Go build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Go defined in `zerops.yaml` [build.base](/go/how-to/build-pipeline#base) parameter
- [zCLI](/references/cli), Zerops command line tool
- `git` and `wget`

:::note
To use Ubuntu instead of the default Alpine, set the [build.os](/zerops-yaml/specification#os-) attribute.

Additional packages and tools can be installed using [build.prepareCommands](/zerops-yaml/specification#preparecommands-).
:::

:::info
The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).
:::

## Go build hardware resources

Build of your Go application is run in a separate build container with following resource configuration:

| HW resource   | Minimum | Maximum |
| ------------- | ------- | ------- |
| **CPU cores** | 6       | 20      |
| **RAM**       | 8 GB    | 8 GB    |
| **Disk**      | 1 GB    | 100 GB  |

The build container is always started with the minimum hardware resources and scales vertically up to the maximum resources.

:::info
Hardware resources of the build containers are not charged. The build costs are covered by the standard Zerops [project fee](https://zerops.io/#pricing).
:::

## Build time limit

The time limit for the whole build pipeline is **1 hour**. After 1 hour, Zerops will terminate the build pipeline and delete the build container.

## Troubleshooting build-related problems

### Failure of a build prepare command

If any [prepare command](/go/how-to/build-pipeline#preparecommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/go/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom build environment is ready for the build phase.

### Invalidate the build cache
If you encounter unexpected build behavior or dependency issues, the problem might be related to [cached build data](/features/build-cache). While Zerops maintains the build cache to speed up deployments, sometimes you may need to start fresh.
To invalidate the build cache:

1. Go to your service detail in Zerops GUI
2. Choose **Pipelines & CI/CD Settings** from the left menu
3. Click on the **Invalidate build cache** button

This will force Zerops to run the next build clean, including all prepare commands, which can help resolve cache-related issues. After invalidation, your next build will also create a fresh cache.

### Failure of a build command

If any [build command](/go/how-to/build-pipeline#buildcommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/go/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the verbose `-v` option.

```yaml
build:
  - go build -v
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the [deploy](/go/how-to/deploy-process) phase.



Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart Go service in Zerops GUI

To stop the Go service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)*/}

To start the stopped Go service choose the **Start** item from the same menu.

To restart the Go service choose the **Restart** item from the same menu.

## Stop and start Go using zCLI

zCLI is the Zerops command-line tool. To stop and start the Go service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and its services to choose from.
:::




Zerops provides a Go runtime service with extensive build support. Go runtime is highly scalable and customisable to suit both development and production.

## Create Go service using Zerops GUI

First, set up a project in Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu in the **Services** block. Then add a new Go service:

<Video
  src="/vids/services/golang.webm"
  type="video/webm"
/>

### Choose Go version

Following Go versions are currently supported:

<UnorderedList data={data.go.readable} />

:::info
You can [change](/go/how-to/upgrade) the major version at any time later.
:::

### Set a hostname

Enter a unique service identifier like "app","cache", "gui" etc. Duplicate services with the same name in the same project are forbidden.

#### Limitations:

- maximum 25 characters
- must contain only lowercase ASCII letters (a-z) or numbers (0-9)

:::caution
The hostname is fixed after the service is created. It can't be changed later.
:::

### Set secret environment variables

Add environment variables with sensitive data, such as password, tokens, salts, certificates etc. These will be securely saved inside Zerops and added to your runtime service upon start.

Setting the secret environment variables is optional. You can set them later in Zerops GUI.

Read more about [different types of env variables](/go/how-to/env-variables#types-of-env-variables-in-zerops) in Zerops.

### Set auto scaling configuration

Zerops scales the Go services automatically both vertically and horizontally. Vertical scaling means increasing or decreasing the hardware resources (CPU, RAM and disk) of a Go container. Horizontal scaling adds or removes whole containers.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

**Dedicated**
The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

Choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />


Go service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Go service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Go performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](/go/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

:::info
You can change the vertical auto scaling parameters later.
:::

#### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Go service. When your Go service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Go service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

[Learn more](/go/how-to/scaling) about Go auto scaling.

#### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Create Go service using zCLI

zCLI is the Zerops command-line tool. To create a new Go service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/go/how-to/create#create-a-project-description-file)
3. [Create a project with a Go and PostgreSQL service](#full-example)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### Basic example:

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in go@{version} format
    type: go@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes your future project infrastructure. The project will contain one Go version 1 service with default [auto scaling](/go/how-to/scaling) configuration. Hostname will be set to "app", the internal port(s) the service listens on will be defined later in the [zerops.yaml](/go/how-to/build-pipeline#ports). Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

#### Full example:

Create a directory my-project. Create an description.yaml file inside the my-project directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a Go and PostgreSQL database
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in go@{version} format
    type: go@latest
    # optional: vertical auto scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4
    # optional: create secret env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
  - # second service hostname
    hostname: db
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"non_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain a Go service and a [PostgreSQL](/postgresql/overview) service.

Go service with "app" hostname, the internal port(s) the service listens on will be defined later in the zerops.yaml. Go service will run on version 1 with a custom vertical and horizontal scaling. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The hostname of the PostgreSQL service will be set to "db". The [single container](/postgresql/how-to/create#single-container) mode will be chosen and the default [auto scaling configuration](/postgresql/how-to/create#set-auto-scaling-configuration) will be set.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>hostname</strong></td>
      <td className="w-fit">
        The unique service identifier.
         
        The hostname of the new database will be set to the `hostname` value.
         
        <strong>Limitations:</strong>
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>type</strong></td>
      <td className="w-fit">
        Specifies the service type and version.
        <br />
        See what [Go service types](/references/import-yaml/type-list#runtime-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>verticalAutoscaling</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Defines <a href="/go/how-to/create#set-auto-scaling-configuration">custom vertical auto scaling parameters</a>.
        <br />
        All verticalAutoscaling attributes are optional. Not specified attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- cpuMode</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minCpu/maxCpu</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minCpu or maxCpu in CPU cores (integer).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minRam/maxRam</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minRam or maxRam in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minDisk/maxDisk</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minDisk or maxDisk in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>minContainers</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Default = 1. Defines the minimum number of containers for <a href="/go/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.
         
        <strong>Limitations:</strong>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>maxContainers</strong></td>
      <td className="w-fit">
        Defines the maximum number of containers for <a href="/go/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.
         
        <strong>Limitations:</strong>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>envSecrets</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Defines one or more secret env variables as a key value map. See env variable <a href="/go/how-to/env-variables#env-variable-restrictions">restrictions</a>.
      </td>
    </tr>
  </tbody>
</table>

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>
### Add Go service to an existing project

#### Example:

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in go@{version} format
    type: go@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one Go service version 1 with default [auto scaling](/go/how-to/scaling) configuration will be added to your project. Hostname of the new service will be set to `app`. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The content of the `services:` section of `import.yaml` is identical to the project description file. The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the import.yaml file is 100 kB.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline_custom_runtime.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>


The default Go runtime environment contains:

- <span>{data.alpine.default}</span>
- Selected version of Go when the runtime service was created.
- [zCLI](/references/cli)
- Git

:::note
To use Ubuntu instead of the default Alpine, set the [run.os](/zerops-yaml/specification#os--1) attribute.

Additional packages and tools can be installed using [run.prepareCommands](/zerops-yaml/specification#preparecommands--1).
:::

## Runtime Flow

When the first deploy with a defined `prepareCommands` attribute is triggered, Zerops will

1. Create a prepare runtime container
2. Optionally: [copy selected folders or files from your build container](/go/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. Run the run.prepareCommands in the defined order

### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/go/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

The prepare runtime container is automatically deleted after the prepare runtime phase has finished or failed.

### Custom runtime environment cache

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the <a href="/go/how-to/build-pipeline#copy-folders-or-files-from-your-build-container">build.addToRunPrepare</a> and <a href="/go/how-to/build-pipeline#preparecommands-1">run.prepareCommands</a> attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.

{/* TODO - Screenshot */}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.



## Delete Go service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete Go using zCLI

zCLI is the Zerops command-line tool. To delete the Go service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step3.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Application artefact

When the [build phase](/go/how-to/build-process) is finished, the application artefact is stored in the internal Zerops storage and the build container is deleted.

If you triggered the deploy pipeline [manually](/go/how-to/trigger-pipeline#manual-deploy-using-zerops-cli) using Zerops CLI, the application artefact is also uploaded to the internal Zerops storage.

Zerops uses the stored artefact to deploy the identical version of your application each time a new container is started:

- when a new application version is deployed
- when the application [scales horizontally](/go/how-to/create#horizontal-auto-scaling)
- when a runtime container fails and a new container is started automatically

## First deploy

When your application is deployed for the first time, Zerops will start one or more runtime containers based on the service [auto scaling settings](/go/how-to/scaling).

Zerops performs following actions for each new container:

1. Installs the runtime environment
2. Downloads the application artefact from the internal storage
3. Optionally runs the [init commands](/go/how-to/build-pipeline#initcommands)
4. Starts your application using the [start command](/go/how-to/build-pipeline#start)
5. Optionally waits until the [readiness check](/go/how-to/build-pipeline#readiness-check) succeeds
6. The container is now active and receives incoming requests.

Services with multiple containers are deployed in parallel.

:::info
If your application needs to be initialized in each runtime container, add [init commands](/go/how-to/build-pipeline#initcommands) to `zerops.yaml`.
:::

:::caution
Do not use the `initCommands` for customising your runtime environment. See [how to customize the runtime environment](/go/how-to/customize-runtime).
:::

## Further deploys

When a previous version of your application is already running, Zerops will start new containers. The count of new containers will be the same as the count of existing containers.

Zerops performs the identical actions for each new container as the first deployment.
When all new containers are started your service contains both new and old versions for a short period of time.

The old containers are then removed from the project balancer so they don't receive new requests. The Go process inside each of the old containers is terminated and all old containers are gradually deleted.

## Readiness checks

If your application isn't ready to handle requests right after it is started via the [start command](/go/how-to/build-pipeline#start), configure a [readiness check](/go/how-to/build-pipeline#readiness-check) in your `zerops.yaml`.

If the readiness check is defined, Zerops will:

1. Start your application
2. Perform a readiness check
3. If the readiness check fails, wait 5 seconds and repeat step 2.
4. If the readiness check succeeds, set the container as active.

Application in the runtime container with a pending readiness check won't receive any incoming requests. Only active containers receive incoming requests to your Go service.

If the readiness check is still failing after 5 minutes, the specific runtime container is marked as failed and Zerops will delete it, create a new runtime container and perform the deploy.

The <a href="/go/how-to/build-pipeline#httpget">`httpGet`</a> readiness check is successful when the URL returns HTTP status code `2xx`. The timeout is 5 seconds. When the URL returns a `3xx` HTTP status, the readiness check HTTP client will follow the redirect.

The <a href="/go/how-to/build-pipeline#exec">`exec.command`</a> readiness check is successful when the command returns status code 0. The timeout is 5 seconds.

Read the [runtime log](/go/how-to/logs#runtime-log) to troubleshoot failed readiness checks.

## Application versions

Zerops keeps 10 last versions of your application in the internal storage.

The list of application versions is available in Zerops GUI. Go to the service detail and choose **Service dashboard & runtime containers** from the left menu. The active version is highlighted, show all archived version by clicking on the button below.

<p align="center">
  <img
    src="/img/screenshots/pipeline_history.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

The pipeline detail is accessible from the additional menu. The pipeline detail contains

- The pipeline config (`zerops.yaml`) that was used for the selected version
- The build log (if available)
- The prepare runtime log (if available)

You can download the build artefact of the selected version or delete an inactive version manually.

## Restore an archived version

You can restore an archived version by choosing the **Activate** item from the additional menu.
Zerops will deploy the selected version and the active version will be archived.

The environment variables will be restored to the latest moment when the selected version was active.



Environment variables help you run your application in different environments. They allow you to isolate all specific environment aspects from your application code and keep your app encapsulated. You can create several projects in Zerops that represent different environments (development, stage, production) or even each developer can have a project with its own environment.

In Zerops you do not have to create a `.env` file manually. Zerops handles the environment variables for you.

## Types of env variables in Zerops

There are 3 different sets of env variables in Zerops:

<table className="w-fit my-1.5">
  <thead>
    <tr className="text-center  rounded-lg">
      <th className="w-fit"><strong>Type</strong></th>
      <th className="w-fit"><strong>Environment</strong></th>
      <th className="w-fit"><strong>Defined in</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">build</td>
      <td className="w-fit"><a href="/go/how-to/build-pipeline#envvariables">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/go/how-to/build-pipeline#envvariables-1">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">secret</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/go/how-to/env-variables#set-secret-env-variables-in-zerops-gui">Zerops GUI</a></td>
    </tr>
  </tbody>
</table>


Use the [secret env variables](/go/how-to/create#set-secret-environment-variables) for all sensitive data you don't want to store in your application code. Secret env variables are also useful if you need for testing where you need to change the value of some env variables frequently. Secret variables are managed in Zerops GUI and you don't have to redeploy your application.

The basic build and runtime env variables are listed in your [zerops.yaml](/zerops-yaml/specification) and deployed together with your application code. When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your zerops.yaml and redeploy your application to Zerops.

You can [reference](/go/how-to/env-variables#reference-a-local-variable-in-another-variable-value) another variable of the same service or even a variable of [another service](/go/how-to/env-variables#reference-a-variable-of-another-project-service) within the same project.

## Set secret env variables in Zerops GUI

Use secret variables to store passwords, tokens and other sensitive information that shouldn't be part of your repository and listed in zerops.yaml.

<p align="center">
  <img
    src="/img/screenshots/secret_env.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

You can set env variables when you [create](/go/how-to/create) a new Go service or you can set them later.

To configure env variables for an existing service, go to the service detail and choose **Environment variables** in the left menu. Scroll to the **Secret variables** section and click on the **Add secret variable** button and set variable key and value.

You can edit or delete env variables that you've created by clicking on the menu on the right side of each row.

The changes you've made to environment variables will be automatically applied to all containers of your project's services.

:::caution
You need to **restart** the runtime service after you update environment variables. The Go process running in the container receives the list env variables only when it starts. Update of the env variables while the Go process is running does not affect your application.
:::

## Set basic build env variables in zerops.yaml

To set basic env variables for the build environment, add the `envVariables` attribute to the build section in your `zerops.yaml`

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
       …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Set basic runtime env variables in zerops.yaml

To set basic env variables for the runtime environment, add the `envVariables` attribute to the runtime section in your `zerops.yaml`.

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    run:
       …

      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Env variable restrictions

**key**

- must satisfy the following regular expression: `[a-zA-Z_]+[a-zA-Z0-9_]*`
- all variable keys in the same service must be unique regardless of case
- keys are case sensitive

**value**

- must contain only ASCII characters
- the _End of Line_ character is forbidden

These restrictions apply to all [types of env variables](/go/how-to/env-variables#types-of-env-variables-in-zerops).

## Referencing other env variables

You can reference another variable of the same service using `${key}` in your variable value. You can even reference a variable from a different service using `${hostname_key}`. The referenced variable doesn't need to exist when you are entering your variable.

### Reference a local variable in another variable value

| Variable key | Variable value      | Computed variable value |
| ------------ | ------------------- | ----------------------- |
| id           | 12345               | 12345                   |
| hostname     | app                 | app                     |
| name         | `${id}-${hostname}` | 12345-app               |

### Reference a variable of another project service

Let's say your project contains two PostgreSQL services `dbtest` and `dbprod`. Both services have a `connectionString` variable. Then you can create a `dbConnectionString` env variable in your Go runtime and set `${dbtest_connectionString}` as the variable value. Zerops will fill in the value of the `connectionString` variable of the `dbtest` service.

When you change the `dbConnectionString` value to `${dbprod_connectionString}`, Zerops will fill in the value of the `connectionString` variable of the `dbprod` service.

:::caution
When you change the value of the `connectionString` variable in the service `dbtest` you need to **restart** the Go service. The Go process running in the container receives the list env variables only when it starts. Update of the env variables while the Go process is running does not affect your application.
:::

## Generated env variables

Zerops creates several helper variables when a Go service is created, e.g. `hostname`, `PATH`. Some helper variables are read-only (`hostname`), others are editable (`PATH`). Generated variables cannot be deleted.

Generated env variables are listed on the **Environment variables** page. Scroll to the **Generated variables** section.

<p align="center">
  <img
    src="/img/screenshots/nodejs_generated_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## How to read env variables from your Go app

Zerops passes all environment variables from all project services when your Go app is deployed and started.

To access the local environment variable i.e. the variable set to this Go service in your app, use:

```sh
os.Getenv("YOUR_VARIABLE_KEY_HERE")
```

## How to read env variables of another service

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Examples:

To access the `connectionString` env variable of the `mariadb1` service, use `mariadb1_connectionString` as the env variable key.
To access the `password` env variable of the `mariadb2` service, use `mariadb2_password` as the env variable key.

## How to read runtime env variables in the build environment

You can use runtime env variables in the build environment using the `RUNTIME_` prefix. For example if you have a runtime variable with the `connectionString` key, use the `RUNTIME_connectionString` to read the variable in the build environment. This rule applies both for basic and secret runtime variables.

## Basic and secret env variable with the same key

If you create a secret env variable and a basic runtime env variable with the same key, Zerops saves the basic runtime env variable from your zerops.yaml and ignores the secret env variable.

If you create a basic build env variable and a runtime env variable with the same key, Zerops saves both because the build and runtime environments have separate sets of env variables.



## Zerops GUI

In Zerops GUI, go to the service detail page and choose **Service containers & resources overview** and scroll down to the list of containers.

<p align="center">
  <img
    src="/img/screenshots/nodejs_containers_list.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Then click on the file browser icon and the file browser opens:

<p align="center">
  <img
    src="/img/screenshots/nodejs_file_browser.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>
If your service is in the [HA mode], you can switch between containers in the top left corner.

## zCLI & SSH

You can connect to the container via SSH with the Zerops CLI and browse its files.
How to [connect to your service via SSH](/references/ssh).



Zerops provides 3 different logs:

- [build log](#build-log)
- [prepare runtime log](#prepare-runtime-log)
- [runtime log](#runtime-log)

## How to access logs

### Build log

#### Zerops GUI

To access a build log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Build log**. The build log button is available only if the [build pipeline](/go/how-to/trigger-pipeline) was triggered for the selected deploy.

#### zCLI

To access a build log in Zerops CLI use

```sh
zcli service log --showBuildLogs
```

Read more about the [zcli service log](/references/cli/access-logs) command.

### Prepare runtime log

#### Zerops GUI

To access a prepare runtime log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Prepare runtime log**. The prepare runtime log button is available only if the [prepare runtime pipeline](/go/how-to/build-pipeline#preparecommands-1) was triggered for the selected deploy.

#### zCLI

_Prepare runtime log is currently not supported in zCLI._

### Runtime log

#### Zerops GUI

To access a runtime log in Zerops GUI, go to the service detail and choose **Runtime log** in the left menu.

{/* TODO screenshot** */}

Each runtime container has its own log. If your service has multiple containers, select the container in the log header.

You can filter log records by minimum severity or by time.

#### zCLI

To access the log of the runtime containers in Zerops CLI use

```sh
zcli service log
```

Read more about the [zcli service log](/references/cli/access-logs) command.

## Go logging configuration

Zerops logs all messages sent

- to the standard error (`stderr`)
- to the standard output (`stdout`)
- via the Go `fmt.Println` or `slog.Info` methods etc.

### Severity level

By default the `fmt.Println` or `slog` methods create messages with the `Informational (6)` severity.

Add a severity number in the `<N>` format as a prefix to set a custom severity as shown below:

```go
slog.Info("A message with the informational severity ...")
slog.Info("<0>Emergency (0) severity > system is unusable.")
slog.Info("<1>Alert (1) severity > action must be taken immediately.")
slog.Info("<2>Critical (2) severity > critical conditions.")
slog.Info("<3>Error (3) severity > error conditions.")
slog.Info("<4>Warning (4) severity > warning conditions.")
slog.Info("<5>Notice (5) severity > normal, but significant, condition.")
slog.Info("<6>Informational (6) severity > informational message.")
slog.Info("<7>Debug (7) severity > debug-level message.")
```

:::info

`slog.Info`, `slog.Debug`, `slog.Warn`, and `
  slog.Error
` are just aliases to the `slog.Info` method. They don't set
the appropriate severity number. Use the `&lt;N&gt;` prefix instead.
:::




Zerops performs an automated scaling of hardware resources required to run your runtime application based on its usage. If the current use of your application does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your application is under heavy load or needs to store more data, then auto scaling increases the resources to make sure it runs smoothly.

## Vertical and horizontal auto scaling

Each application you deploy starts with the minimum hardware resources: **CPU** cores, **RAM** and **Disk**. Zerops monitors the usage of these 3 resources and if the usage exceeds a set threshold, more CPU cores, RAM or Disk is allocated to the service. This is called **vertical scaling**.

<p align="center">
  <Image
    lightImage="/img/gui/resources.webp"
    darkImage="/img/gui/resources.webp"
    alt="Resources of a Zerops service"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

**Horizontal scaling** adds or removes whole containers.

Zerops has a preference for vertical scaling because it's faster and more precise. If the vertical auto scaling hits the defined maximum a new container is started automatically. When your application doesn't need so much power and all containers are vertically scaled down, Zerops will gradually remove whole containers.

<p align="center">
  <img
    src="/img/screenshots/scaling2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Configure auto scaling

To change the auto scaling settings go to the Go service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### CPU mode

#### Shared

Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

#### Dedicated

The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

Go service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Go service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Go performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Go service. When your Go service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Go service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your application starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your application.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your application doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

By default Zerops keeps a minimum free RAM in each container. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your application need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 0.125 GB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the application is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each Go service. Zerops will never scale above the entered values. If your application is in [highly available mode], maximal resources are identical for all containers of the Go service.

### Not enough resources to scale up

If one of the Go containers needs more resources but there are not enough of them on the underlying machine, a new container with the required hardware resources will be started on another machine. When the new container is ready, it will be added to the service balancer. The old container will be removed from the balancer and deleted.

### Automatic scale down

When the application no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the application from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal autoscaling

Zerops prefers vertical scaling over horizontal scaling because vertical scaling is faster and allows finer adjustment to the required performance. Horizontal scaling can be disabled by setting the same number for the minimum and maximum container count. Zerops will then scale the Go service only vertically.

Your application is created with the defined minimum number of containers. Zerops will add a new container when any of the service's containers reaches the maximum limit for vertical scaling for CPU cores or RAM. Zerops doesn't start a new container when the maximum disk space is reached. No more containers are added when the defined maximum container limit is reached.

The new container is started with a minimum disk size and with an average CPU cores and RAM of the existing containers.

By customising the vertical auto scaling limits, you can cause the horizontal scaling to start earlier. For example if you lower the vertical auto scaling maximum to 1 CPU core, Zerops will start a new container if some of the running containers are using the whole CPU core for more than 20 seconds.

If the application no longer needs as much power, Zerops will gradually remove containers to the defined minimum count. The container is removed after its CPU cores are scaled down to the defined minimum and the free CPU is safely above the minimum threshold for vertical scaling. Zerops only **removes containers** with a minimum **15 minute lifetime**.

## Monitor Go resources

Zerops provides information about how much hardware resources the Go service is currently using. Go to the service detail in Zerops GUI and select **Service dashboard & runtime containers** in the left menu. Zerops also provides the history of resource usage.



Zerops provides [shared storage service](/shared-storage/overview) that can be connected to runtime services. Shared storage enables your runtime service to share files between all containers of the same service or even among containers of different runtime services.

## Connect a shared storage in Zerops GUI

Connect your Go service directly when creating a new shared storage service. Just select your Go service in the **Share with Services** block on the **Add new shared storage service** page.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_1.png)

To connect the existing shared storage to the Go service, go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Select a runtime service and the shared storage will be connected to the selected runtime.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_2.png)

Zerops will create a new folder `/mnt/[shared storage name]`` in the runtime root folder. E.g. `/mnt/teststorage`for a`teststorage` shared storage. The content of this folder is shared among all containers of the runtime service you've selected. If you select multiple runtimes, the content of the folder will be shared among all containers of selected services.

## Disconnect a shared storage in Zerops GUI

Go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Switch off the toggle to disconnect the shared storage from the selected runtime.

:::note
Your runtime service will be automatically restarted when a shared storage is disconnected.
:::

## Create Go service with a shared storage using zCLI

zCLI is the Zerops command-line tool. To create a new Go service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/go/how-to/shared-storage#create-a-project-description-file)
3. [Create a project with a Go service and a shared storage](/go/how-to/shared-storage#create-a-project-with-a-go-service-and-a-shared-storage)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### description.yaml format

[Read the basics](/go/how-to/create#create-a-project-description-file) how to define the Go service using the description.yaml.

#### Example with a shared storage

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project

  # optional: project description
  description: A project with a Go and a shared storage

  # optional: project tags
  tags:
    - DEMO
    - ZEROPS

# array of project services
services:
  - # service name
    hostname: teststorage

    # shared storage service has no version
    type: shared-storage

    # mode: HA / NON_HA
    mode: NON_HA

  - # service name
    hostname: app

    # service type and version number in go@{version} format
    type: go@latest

    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2

    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4

    # Mount the shared storage to the Go service
    mount:
      - teststorage
```

The mount attribute accepts an array of shared storage names you want to mount to your runtime service.

### Create a project with a Go service and a shared storage

Follow the article [How to create a project based on the description.yaml](/go/how-to/create#create-a-project-based-on-the-descriptionyaml).




<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-1.webp"
    darkImage="/img/mind-maps/build-deploy/step-1-dark.webp"
    alt="build deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Automatic builds and deploys from GitHub or GitLab

Integrate Zerops to your GitHub or GitLab repository and configure the automatic builds and deploys.

Follow these steps:

1. Add [zerops.yaml](/go/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository.
2. Connect your GitHub repository or connect your GitLab repository

Then each time you create a new tag or push to a specific branch, depending on the configuration, GitHub or GitLab will initiate a new build & deploy pipeline.

<p align="center">
  <Image
    lightImage="/img/gui/github-integration.webp"
    darkImage="/img/gui/github-integration.webp"
    alt="github integration"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

### Skip the automatic pipeline once

To ensure that a pipeline is not triggered by your next push, add `[ci skip]` or `[skip ci]` to the commit message. It is case insensitive.

:::note
You will still see a successful delivery of a webhook in your Github/Gitlab repository as a webhook is actually triggered, but with no action.
:::

## Manual builds and deploys using Zerops CLI

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    darkImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    alt="Manual Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

To start a new build & deploy pipeline manually, use the Zerops CLI.

Follow these steps:

1. Add <a href="/go/how-to/build-pipeline#add-zeropsyaml-to-your-repository">`zerops.yaml`</a> to your repository.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli push` command.

The `zcli push` command uploads your application code, builds and deploys your application in Zerops.

The command triggers the [build pipeline](/go/how-to/trigger-pipeline) defined in `zerops.yaml`. `zerops.yaml` must be in the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

zCLI uploads all files and subdirectories of the working directory to Zerops and starts the build pipeline. If the `.gitignore` file is found, it is interpreted and the defined files and folders will be ignored.

If you just want to deploy your application to Zerops, use the [zcli deploy](#manual-deploy-using-zerops-cli) command instead.

#### Push command parameters

```sh
Usage:
  zcli push [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.
  -h, --help                     the service push command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

zCLI commands are interactive, when you press enter after `zcli push`, you will be given a list of your projects to choose from.

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

## Manual deploy using Zerops CLI

To start only a deploy pipeline, use the Zerops CLI.

Follow these steps:

1. Add [zerops.yaml](/go/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository. Omit the build section.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli service deploy` command.

The `zcli service deploy` command uploads your application and deploys it in Zerops. Use this tool if you have your own build process. If you want to build your application in Zerops, use an [automatic](#automatic-builds-and-deploys-from-github-or-gitlab) or [manual](#manual-builds-and-deploys-using-zerops-cli) build process.

#### Deploy command parameters

```sh
Usage:
  zcli service deploy pathToFileOrDir [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
  -h, --help                     the service deploy command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

`pathToFileOrDir` defines a path to one or more directories and/or files relative to the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

`zerops.yaml` must be placed in the working directory.

:::info
You can change the deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your working directory.
:::



You can upgrade or downgrade your Go service to a different major Go version by setting the <a href="/go/how-to/build-pipeline#base-1">`run.base`</a> parameter in your `zerops.yaml`. When you [trigger a new pipeline](/go/how-to/trigger-pipeline), Zerops will start new runtime container(s) with the required Go version. If you don't specify the `run.base` attribute in your `zerops.yaml`, Zerops keeps the current Go version for your runtime.

If you want to build your application with a different major Go version, change the <a href="/go/how-to/build-pipeline#base">`build.base`</a> parameter in your `zerops.yaml`. The `build.base` is the required attribute.




[Go ↗](https://go.dev/) is a statically typed, compiled high-level programming language designed at Google.


As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-go-hello-world), a **_recipe_**, containing the most simple Go web application. The repo will be used as a source from which the app will be built.

<CustomCard title="Feel free to deploy the recipe yourself" emoji="🚀">
  This is the most bare-bones example of Go running on Zerops — as few libraries as possible,
  just a simple endpoint with connect, read and write to a Zerops PostgreSQL database.

  <DeployButton link="go" badgeWidth="200" />
</CustomCard>

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)
2. In the **Projects** box click on **Import a project** and paste in the following YAML config ([source ↗](https://github.com/zeropsio/recipe-go-hello-world/blob/main/import-project/description.yaml)):

```yaml
project:
  name: my-first-project
services:
  - hostname: helloworld
    type: go@latest
    minContainers: 1
    maxContainers: 3
    buildFromGit: https://github.com/zeropsio/recipe-go-hello-world@main
    enableSubdomainAccess: true
```

3. Click on **Import project** and wait until all pipelines have finished.

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://helloworld-24-8080.prg1.zerops.app`.
2. Click or the `subdomain` URL to open it in a browser and you should see

```
Hello, World!
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::

## How to start

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/go/getting-started',
      label: 'New to Zerops?',
      customProps: {
        icon: Icons['rocket-launch'],
        description: 'Learn the basics by following a simple example.',
      },
    },
    {
      type: 'link',
      href: '/go/how-to/create',
      label: 'Care for details?',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Dive in all Zerops has to offer for your Go application.',
      },
    },
  ]}
/>

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/go/how-to/create',
      label: 'Create Go service',
      customProps: {
        icon: Icons['go'],
        description: 'Start with creating a Go service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: '/go/how-to/build-pipeline#add-zeropsyaml-to-your-repository',
      label: 'zerops.yaml',
      customProps: {
        icon: Icons['puzzle'],
        description:
          'See a full example of zerops.yaml file to create your own app.',
      },
    },
    {
      type: 'link',
      href: '/go/how-to/scaling',
      label: 'Scaling configuration',
      customProps: {
        icon: Icons['adjustments'],
        description:
          'Set up scaling of your Go application so that it runs smoothly while using only necessary resources.',
      },
    },
  ]}
/>

{" "}

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/go/how-to/build-process#customize-go-build-environment',
      label: 'Customize build environment',
      customProps: {
        icon: Icons['sparkles'],
      },
    },
    {
      type: 'link',
      href: '/go/how-to/customize-runtime',
      label: 'Customize runtime environment',
      customProps: {
        icon: Icons['sparkles-solid'],
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/go/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>




As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-go-hello-world), a **_recipe_**, containing the most simple Go web application. The repo will be used as a source from which the app will be built.

<CustomCard title="Feel free to deploy the recipe yourself" emoji="🚀">
  This is the most bare-bones example of Go running on Zerops — as few libraries as possible,
  just a simple endpoint with connect, read and write to a Zerops PostgreSQL database.

  <DeployButton link="go" badgeWidth="200" />
</CustomCard>

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)
2. In the **Projects** box click on **Import a project** and paste in the following YAML config ([source ↗](https://github.com/zeropsio/recipe-go-hello-world/blob/main/import-project/description.yaml)):

```yaml
project:
  name: my-first-project
services:
  - hostname: helloworld
    type: go@latest
    minContainers: 1
    maxContainers: 3
    buildFromGit: https://github.com/zeropsio/recipe-go-hello-world@main
    enableSubdomainAccess: true
```

3. Click on **Import project** and wait until all pipelines have finished.

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://helloworld-24-8080.prg1.zerops.app`.
2. Click or the `subdomain` URL to open it in a browser and you should see

```
Hello, World!
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::




As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-onboarding-go), a **_recipe_**, containing a PostgreSQL service with a simple Go application. The repo will be used as a source from which the app will be built.

:::tip
Follow the steps below and when everything is working as expected, fork the repo, try making various changes or be bold and connect your own.
:::

:::note
In the detail of each step, you can find a link with more information about the topic.
:::

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)

<details>
  <summary>2. Create a project.</summary>
  <p>
    Learn more about <a href="/features/infrastructure#projects">projects</a> in Zerops. See how to <a href="/go/how-to/create#create-a-project-description-file">import</a> a whole project into Zerops.
  </p>
</details>

<details>
  <summary>
    3. In the left menu, click on <b>Import services</b>, copy & paste the contents of the `import-services.yaml` config file from the recipe repository of your choice. Then click on <b>Import service</b>.
  </summary>
  <p>
    Learn more about <a href="/features/infrastructure#services--containers">services</a> in Zerops and how to <a href="/go/how-to/create#add-go-service-to-an-existing-project"> import a service </a> to an existing project.
  </p>
  <p>
    The yaml file includes a `buildFromGit` directive, which ensures a one-time build from Git repository source. See how to connect a <a href="/references/github-integration">Github</a> or <a href="/references/github-integration">Gitlab</a> repository to be able to trigger automatic builds & deploys.
  </p>
</details>

<details>
  <summary>4. Several pipelines are created, one for project creation and the rest for the activation of the services. Wait for all to finish.</summary>
  <p>
  Learn more about how the pipelines can be <a href="/go/how-to/trigger-pipeline">triggered</a> and about <a href="/go/how-to/build-process">build</a> and <a href="/go/how-to/deploy-process">deploy</a> processes of a Go application in Zerops.

Learn more about how to access <a href="/go/how-to/logs#build-log">build log</a> of your Go service in Zerops.
  </p>
</details>

<details>
  <summary>
    5. In the service detail, open the <b>Public access & internal ports</b> section, and <b>Enable Zerops Subdomain</b>.
  </summary>
  <p>
    Learn more about how to <a href="/go/how-to/access">access</a> your Go service in Zerops.
  </p>
</details>

<details>
  <summary>6. Once the pipeline has finished, click on the activated <i>subdomain</i> URL. You should see a simple page with <br/><br/>`Entry added successfully with random data: f47ac10b-58cc-0372-8567-0e02b2c3d479. Total count: 1`</summary>
  <p>
  Congratulations! You have created your first application in Zerops, and we hope to see your own projects soon.

For now, check out other features, such as <a href="/go/how-to/env-variables">environment variables</a>, <a href="/go/how-to/logs#runtime-log">runtime log</a> and <a href="/go/how-to/scaling">scaling</a>.

  </p>
</details>

<details>
  <summary>
    7. One of the services is `adminer`, a database management tool.
    See how to <a href="/postgresql/how-to/manage#how-to-access-adminer">access it</a>.
  </summary>
  <p>
    Learn more about how to <a href="/postgresql/how-to/manage#how-to-use-psql-cli-on-your-workstation"> use `psql`</a> command-line tool instead or how to <a href="/postgresql/how-to/export-import-data">import and export data</a> from your database.
  </p>
</details>

8. Feel free to make any changes to your project, fork the repo or connect your own. Also see other <a href="https://github.com/zeropsio?q=go&type=all&language=&sort=">Go</a> and <a href="https://github.com/zeropsio?q=postgresql&type=all&language=&sort=">PostgreSQL</a> recipes on our Github page.

<p>&nbsp;</p>

:::tip
Have you got any additional question? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::




As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-go-hello-world), a **_recipe_**, containing the most simple Go web application. The repo will be used as a source from which the app will be built.

:::tip
Follow the steps below and when everything is working as expected, fork the repo, try making various changes or be bold and connect your own.
:::

:::note
In the detail of each step, you can find a link with more information about the topic.
:::

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)

<details>
  <summary>2. Create a project.</summary>
  <p>
    Learn more about <a href="/features/infrastructure#projects">projects</a> in
    Zerops. See how to <a href="/go/how-to/create#create-a-project-description-file">import</a> a whole project into Zerops.
  </p>
</details>

<details>
  <summary>
    3. In the left menu, click on <b>Import services</b>, copy & paste the
    contents of this <a href="https://github.com/zeropsio/recipe-go-hello-world/blob/main/import-service/description.yaml">yaml file</a> and click on <b>Import service</b>.
  </summary>
  <p>
    Learn more about <a href="/features/infrastructure#services--containers">services</a> in Zerops and how to <a href="/go/how-to/create#add-go-service-to-an-existing-project">import a service</a> to an existing project.
  </p>
  <p>
    The yaml file includes a `buildFromGit` directive, which ensures
    a one-time build from Git repository source. See how to connect a <a href="/references/github-integration">Github</a> or <a href="/references/github-integration">Gitlab</a> repository to be able to
    trigger automatic builds & deploys.
  </p>
</details>

<details>
  <summary>4. Two pipelines are created, one for project creation and one for the service activation. Wait for both to finish.</summary>
  <p>
  Learn more about how the pipelines can be <a href="/go/how-to/trigger-pipeline">triggered</a> and about <a href="/go/how-to/build-process">build</a> and <a href="/go/how-to/deploy-process">deploy</a> processes of a Go application in Zerops.

Learn more about how to access <a href="/go/how-to/logs#build-log">build log</a> of your Go service in Zerops.

  </p>
</details>

<details>
  <summary>
    5. In the service detail, open the <b>Public access & internal ports</b> section, and <b>Enable Zerops Subdomain</b>.
  </summary>
  <p>
    Learn more about how to <a href="/go/how-to/access">access</a> your Go
    service in Zerops.
  </p>
</details>

<details>
  <summary>6. Once the pipeline has finished, click on the activated <i>subdomain</i> URL:<br/><br/> You should see a simple page with `Hello World!` printed.</summary>
  <p>
  Congratulations! You have created your first application in Zerops, and we hope to see your own projects soon.

For now, check out other features, such as <a href="/go/how-to/env-variables">environment variables</a>, <a href="/go/how-to/logs#runtime-log">runtime log</a> and <a href="/go/how-to/scaling">scaling</a>.

  </p>
</details>

7. Feel free to make any changes to your project, fork the repo or connect your own. Also see other <a href="https://github.com/zeropsio?q=go&type=all&language=&sort=">Go recipes</a> on our Github page.

<p>&nbsp;</p>

:::tip
Have you got any additional question? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::




<BackgroundPattern />

export const runtimes = [
    { name: "Node.js", link: "/nodejs/overview", icon: <Icons.nodejs/> },
    { name: "PHP", link: "/php/overview", icon: <Icons.php/> },
    { name: "Python", link: "/python/overview", icon: <Icons.python/> },
    { name: "Go", link: "/go/overview", icon: <Icons.go/> },
    { name: ".NET", link: "/dotnet/overview", icon: <Icons.dotnet/> },
    { name: "Rust", link: "/rust/overview", icon: <Icons.rust/> },
    { name: "Java", link: "/java/overview", icon: <Icons.java/> },
    { name: "Deno", link: "/deno/overview", icon: <Icons.deno/> },
    { name: "Bun", link: "/bun/overview", icon: <Icons.bun/> },
    { name: "Elixir", link: "/elixir/overview", icon: <Icons.elixir/> },
    { name: "Gleam", link: "/gleam/overview", icon: <Icons.gleam/> },
    { name: "Nginx", link: "/nginx/overview", icon: <Icons.nginx/> },
    { name: "Static", link: "/static/overview", icon: <Icons.computer-desktop/> },
]

export const containers = [
    { name: "Docker", link: "/docker/overview", icon: <Icons.docker/> },
    { name: "Alpine", icon: <Icons.alpine/> },
    { name: "Ubuntu", icon: <Icons.ubuntu/> },
]

export const databases = [
    { name: "PostgreSQL", link: "/postgresql/overview", icon: <Icons.postgresql/> },
    { name: "MariaDB", link: "/mariadb/overview", icon: <Icons.mariadb/> },
    { name: "Valkey", link: "/valkey/overview", icon: <Icons.valkey/> },
    { name: "Elasticsearch", link: "/elasticsearch/overview", icon: <Icons.elasticsearch/> },
    { name: "Typesense", link: "/typesense/overview", icon: <Icons.typesense/> },
    { name: "Meilisearch", link: "/meilisearch/overview", icon: <Icons.meilisearch/> },
    { name: "Qdrant", link: "/qdrant/overview", icon: <Icons.qdrant/> },
    { name: "NATS", link: "/nats/overview", icon: <Icons.nats/> },
    { name: "KeyDB", link: "/keydb/overview", icon: <Icons.keydb/> },
    { name: "Kafka", icon: <Icons.kafka/> },
]

export const storages = [
    { name: "Object storage", link: "/object-storage/overview", icon: <Icons.cube-solid/> },
    { name: "Shared storage", link: "/shared-storage/overview", icon: <Icons.server/> },
]

<div className="!max-w-xxl !mx-none">

Zerops is a **developer-first Platform-as-a-Service**, running on bare metal, with every part built from scratch. Zerops aims to be the perfect mix of **developer experience**, **flexibility**, **scalability** and **affordability**, making it a great fit for applications of any size, complexity and traffic.

## Natively supported services

### Runtimes & web servers

For these services Zerops provides pre-prepared build and runtime images and flexible pipeline that allows you to modify them and build your applications.

<TechCard
items={runtimes} />

### Linux containers & VMs

These services can be deployed either as plain Linux containers or using Docker images, giving you flexibility to run any application or service.

<TechCard
items={containers} />

### Databases, search engines & message brokers

These services are fully managed by Zerops and offered in highly available and single container modes.

<TechCard
items={databases} />

### Storages

Fully managed S3 compatible storage running on a separate infrastructure and persistent disk that can be mounted to multiple services.

<TechCard
items={storages} />

<br />
<br />

## Quicklinks

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['window'],
        html: 'CLI used to trigger pipelines, connect to VPN and create and manage projects and services.',
      },
    },
    {
      type: 'link',
      href: '/zerops-yaml/specification',
      label: 'zerops.yaml',
      customProps: {
        icon: Icons['document-text'],
        html: 'Configuration file placed to your repository, telling Zerops how to build and start your app.',
      },
    },
    {
      type: 'link',
      href: '/references/import',
      label: 'Import file',
      customProps: {
        icon: Icons['cloud-arrow-up'],
        html: 'YAML format that allows you to creates templates or projects and services',
      },
    },
  ]}
/>

<br />
<br />

## Feature highlights

Four concepts that play together to make Zerops developer-first and live up to the claim "no matter the size or environment".

### ➡️ Custom dedicated infrastructure deployed with each project

Zerops is made of three levels: **project** -> **service** -> **container**. For each project Zerops deploys dedicated **core services**, these consist of:

- **L3 balancer** with a firewall and unique IP addresses assigned to it, this serves as the main entry point from the internet,
- **Logger** and **Statistics** containers that gather logs and resource metrics from all services inside the project and allow for log forwarding
- **L7 load balancer** that handles and routes http traffic, SSL termination and SSL certificates

User services (which consist of one or more containers) inside the project share a private network created with VXLAN, have resources isolated with cgroups and can securely communicate with each other simply by using the hostname and ports and read and reference each other's environment variables.

:::tip[**What does this mean for you?**]

You get a fully managed, professional infrastructure setup that will scale no matter how much traffic you get and deals with all the networking, balancing and security stuff, so you can just focus on your actual applications.

<Button variant="secondary"><Link href="/features/infrastructure">Read more about the project infrastructure</Link></Button>

:::

<br />
<br />

### ➡️ Granular resource configuration, autoscaling and high availability of services

Zerops has fully automatic horizontal and vertical scaling with configuration steps as small as 0.125 GB RAM and 1 CPU core. Your runtime services can go from a single container with 0.25 RAM and 1 CPU core to 10 containers each with 32 GB RAM and 10 CPU cores and then back in a matter of minutes. At the same time, all database and storage services are offered in well-crafted setups that go through performance optimizations while scaling and are available in both non-HA (single container) and high availability (multiple containers and balancers) modes.

:::tip[**What does this mean for you?**]

You won't ever overprovision or underprovision your resources and your services will always have the exact resources they need. There won't be any cutting corners like sharing too few CPU cores between too many services. You will be able to rely on professional, reliable and highly available database setups with auto-repairing abilities that will scale along with your applications.

<Button variant="secondary"><Link href="/features/scaling-ha">Read more about autoscaling and high availability</Link></Button>

:::

<br />
<br />

### ➡️ Full Linux OS containers with a powerful, flexible build and deploy pipeline

Zerops uses Incus to create containers, which means that you get a full Linux OS, either Ubuntu or Alpine, depending on your choices. This provides the perfect middle ground between a containerized process (Docker) and a full-fledged VM (Proxmox). Zerops provides build and runtime bases for all the popular runtime technologies and a powerful and flexible pipeline that allows you to modify and cache both the build and runtime images. This circumvents the need for Docker registries. The pipeline can be triggered either automatically, by connecting the service with GitHub or GitLab repositories, or manually using our CLI - either for triggering from your machine, or from any existing CI/CD process.

:::tip[**What does this mean for you?**]

You get a built-in powerful and flexible pipeline to modify build and runtime images and deploy your code, without any downtime. It can be used standalone or easily plugged into any existing CI/CD process.

<Button variant="secondary"><Link href="/features/pipeline">Read more about the build and deploy pipeline</Link></Button>

:::

<br />
<br />

### ➡️ Pricing model that doesn't get in the way of good development practices

"Simple and predictable pricing"... is what others say and what we actually do. In Zerops, cost per hardware resource (CPU, RAM, Disk) is 3-5x cheaper than with popular alternatives. And there are no plans, no feature tiers, no fees for seats. PaaS is just hardware with a cherry and bow on top, so why would we charge you for anything else but hardware resources?

:::tip[**What does this mean for you?**]

You get a powerful managed platform with all the best features unlocked for a price that's nearly on par with VPS. You can create as many environments as you need, even one for each developer working on a project, all with the same infrastructure as production, so they can utilize Zerops for their local development. No more "but it works on my machine".

<Button variant="secondary"><Link href="/features/developer-first">Read more about our developer first approach</Link></Button>

:::
</div>




<FAQ>
  <FAQItem question="Sample Question">sample answer</FAQItem>
</FAQ>




This quick start allows you to get hands-on experience of Zerops, whether you only want to see it in action or want to start small and scale up the project size later. The purpose of this guide is to get an existing Java application up and running easily.

If you are already familiar with Zerops and you are interested in more detailed guides for your own application, feel free to head straight to the [How to](/java/how-to/create) section.

## Guides

We have created a repository, a _recipe_, containing the most simple Java web application, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics with one-service app.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-java',
      label: 'Java + SQL database',
      customProps: {
        icon: Icons['github'],
        description: 'A more complex, multi-service application example.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=java&type=all&language=&sort=',
      label: 'All Java recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspired.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



## Private internal access

Projects in Zerops represent a group of one or more services.
Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its [internal port](/java/how-to/build-pipeline#ports).

To connect to your application with `app` hostname running on [internal port](/java/how-to/build-pipeline#ports) `8080`, simply use `http://app:8080`

:::info
Do not use `https://` when communicating with Java from other runtime services in the same project. The internal communication is done over a private network and is isolated from other projects.
:::

### Use Java environment variables

Zerops creates default environment variables for each Java service to help you with connection within the same project. To avoid the need to copy the access parameters manually, use [generated environment variables](/java/how-to/env-variables#generated-env-variables) of the Java service.

#### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Example:

To access the `API_TOKEN` env variable of the `app` service, use `app_API_TOKEN` as the env variable key.

Read more about [env variables](/java/how-to/env-variables).

## Private access via VPN

### Start VPN connection

You can securely connect to your Java application from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)

### Access Java application through VPN

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/java/how-to/env-variables) are available when connected through VPN. To connect to your Java application in Zerops set the hostname and [internal port](/java/how-to/build-pipeline#ports) e.g. http://app:8080

:::info
Do not use `https://` when communicating with Java over the VPN. The security is assured by the VPN. The internal communication is done over a private network and is isolated from other projects.
:::

### Connect via SSH

Use the <a href="/references/ssh">`ssh` command</a> to connect to your service via SSH.

### Stop VPN connection

[Stop the Zerops VPN](/references/vpn#stop-vpn) in zCLI.

## Public access through zerops.io subdomain

By default, your Java service is not publicly accessible. To test your application, enable the [public access through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain).

## Public access through your domain

By default, your Java service is not publicly accessible. When your application is ready for production or if you want to test it on the production domain, [configure the public access through your domain](/features/access#public-access-through-your-domain).

## Public access from another Zerops project

All services of the same project share a dedicated private network. To connect to a service within the same project, just use the service hostname and its [internal port](/java/how-to/build-pipeline#ports). Different projects are not connected inside Zerops. To connect to a runtime service from another Zerops project, you need to use public access either [through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain) or [through your domain](/features/access#public-access-through-your-domain).




Zerops provides a customizable build and runtime environment for your Java application.

## Add zerops.yaml to your repository

Start by adding `zerops.yaml` file to the **root of your repository** and modify it to fit your application:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: java@latest

      # OPTIONAL. Set the operating system for the build environment.
      # os: ubuntu

      # OPTIONAL. Customize the build environment by installing additional packages
      # or tools to the base build environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # REQUIRED. Build your application
      buildCommands:
        - ./mvnw clean install
      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles: target/app.jar

      # OPTIONAL. Which files / folders you want to cache for the next build.
      # Next builds will be faster when the cache is used.
      # cache: some_file

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base: java@latest

      # OPTIONAL. Sets the internal port(s) your app listens on:
      ports:
        # port number
        - port: 8080

      # OPTIONAL. Customize the runtime Java environment by installing additional
      # dependencies to the base Java runtime environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Java application is started.
      # initCommands:
      #  - rm -rf ./cache

      # REQUIRED. Your Java application start command
      start: java -jar target/app.jar
```

The top-level element is always `zerops`.

### Setup

The first element `setup` contains the **hostname** of your service. A runtime service with the same hostname must exist in Zerops.
Zerops supports the definition of multiple runtime services in a single `zerops.yaml`. This is useful when you use a monorepo. Just add multiple setup elements in your `zerops.yaml`:

```yaml
zerops:
  # definition for app service
  - setup: app
    build: ...
    run: ...

  # definition for api service
  - setup: api
    build: ...
    run: ...
```

Each service configuration contains at least two sections: **build** and **run**. Both sections are required to build and deploy your Java application in Zerops. If you'd like to use a readiness check, add an optional **deploy** section.

## Build pipeline configuration

### base

_REQUIRED._ Sets the base technology for the build environment.

Following options are available for Java builds:

<UnorderedList data={data.java.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: java@latest
      ...
```

<p>
  The base build environment contains {data.alpine.default}, the selected version
  of Java, <a href="/references/cli">Zerops command line tool</a>, `git` and
  `wget`.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the build environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base:
        - java@latest
      prepareCommands:
        - zsc add nodejs@latest
      ...
```

See the full list of supported [build base environments](/zerops-yaml/base-list#runtime-services).

To customize your build environment use the [prepareCommands](/java/how-to/build-pipeline#preparecommands) attribute.

:::note
Modifying the base technology will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for more details about cache invalidation.
:::

### os

_OPTIONAL._ Sets the operating system for the build environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customized.
:::

:::note
Changing the OS setting will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache behavior.
:::

### prepareCommands

_OPTIONAL._ Customizes the build environment by installing additional dependencies or tools to the base build environment.

The base build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Java defined in the [base](/java/how-to/build-pipeline#base) attribute
- [Zerops command line tool](/references/cli)
- `git` and `wget`

To install additional packages or tools add one or more prepare commands:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: java@latest

      # OPTIONAL. Customize the build environment by installing additional packages
      # or tools to the base build environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first build is triggered, Zerops will

1. create a build container
2. download your application code from your repository
3. run the prepare commands in the defined order

The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).

:::note
These commands are skipped when using cached environment. Modifying `prepareCommands` will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache invalidation.
:::

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/java/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all prepare commands are finished, your custom build environment is ready for the build phase.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### buildCommands

_REQUIRED._ Defines build commands.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: java@latest

      # REQUIRED. Build your application
      buildCommands:
        - ./mvnw clean install
      ...
```

At least one command is required. Zerops triggers each command in the defined order in a dedicated build container.

Before the build commands are triggered the build container contains:

1. base environment defined by the [base](/java/how-to/build-pipeline#base) attribute
2. optional customisation of the base environment defined in the [prepareCommands](/java/how-to/build-pipeline#preparecommands) attribute
3. your application code

#### Run build commands as a single shell instance

Use following syntax to run all commands in the same environment context. For example, if one command changes the current directory, the next command continues in that directory. When one command creates an environment variable, the next command can access it. Suppose your `mvnw` executable file is in a `cmd` directory.

```yaml
buildCommands:
  - |
    cd cmd
    ./mvnw clean install
```

#### Run build commands as a separate shell instances

When the following syntax is used, each command is triggered in a separate environment context. For example, each shell instance starts in the home directory again. When one command creates an environment variable, it won't be available for the next command. Suppose your `mvnw` executable file is in a `cmd` directory.

```yaml
buildCommands:
  - cd cmd
  - ./cmd/mvnw clean install
```

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/java/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the `-X` debug option.

```yaml
buildCommands:
  - ./mvnw -X clean install
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the deploy phase.

### deployFiles

_REQUIRED._ Selects which files or folders will be deployed after the build has successfully finished. To filter out specific files or folders, use <a href="#deployignore">`.deployignore`</a> file.

```yaml
# REQUIRED. Select which files / folders to deploy after
# the build has successfully finished
deployFiles:
  - app.jar
```

Determines files or folders produced by your build, which should be deployed to your runtime service containers.

The path starts from the **root directory** of your project (the location of `zerops.yaml`). You must enclose the name in quotes if the folder or the file name contains a space.

The files/folders will be placed into `/var/www` folder in runtime, e.g. `./src/assets/fonts` would result in `/var/www/src/assets/fonts`.

#### Examples

Deploys a folder, and a file from the project root directory:

```yaml
deployFiles:
  - api
  - app.jar
```

Deploys the whole content of the build container:

```yaml
deployFiles: .
```

Deploys a folder, and a file in a defined path:

```yaml
deployFiles:
  - ./path/to/file.txt
  - ./path/to/dir/
```

#### How to use a wildcard in the path

Zerops supports the `~` character as a wildcard for one or more folders in the path.

Deploys all `file.txt` files that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/file.txt
```

Deploys all folders that are located in any path that begins with `/path/to/`

```yaml
deployFiles: ./path/to/~/
```

Deploys all folders that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/
```

:::note Example
By default, `./src/assets/fonts` deploys to `/var/www/src/assets/fonts`, keeping the full path. Adding `~`, like `./src/assets/~fonts`, shortens it to `/var/www/fonts`
:::
#### .deployignore

Add a `.deployignore` file to the root of your project to specify which files and folders Zerops should ignore during deploy. The syntax follows the same pattern format as <a href="https://git-scm.com/docs/gitignore#_pattern_format">`.gitignore`</a>.

To ignore a specific file or directory path, start the pattern with a forward slash (`/`). Without the leading slash, the pattern will match files with that name in any directory.

:::tip
For consistency, it's recommended to configure both your `.gitignore` and `.deployignore` files with the same patterns.
:::

Examples:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      deployFiles: ./
```

```text title=".deployignore"
/src/file.txt
```
The example above ignores `file.txt` only in the root src directory.
```text title=".deployignore"
src/file.txt
```
This example above ignores `file.txt` in ANY directory named `src`, such as:
- `/src/file.txt`
- `/folder2/folder3/src/file.txt`
- `/src/src/file.txt`

:::note
`.deployignore` file also works with <a href="/references/cli/commands#deploy">`zcli service deploy`</a> command.
:::

### cache

_OPTIONAL._ Defines which files or folders will be cached for the next build.

```yaml
# OPTIONAL. Which files / folders you want to cache for the next build.
# Next builds will be faster when the cache is used.
cache: file.txt
```

The cache attribute helps optimize build times by preserving specified files between builds.

The cache attribute supports the [~ wildcard character](#how-to-use-a-wildcard-in-the-path).

Learn more about the [build cache system](/features/build-cache) in Zerops.

### envVariables

_OPTIONAL._ Defines the environment variables for the build environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      base: java@latest
        …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/java/how-to/env-variables) in Zerops.

## Runtime configuration

### base

_OPTIONAL._ Sets the base technology for the runtime environment.
If you don't specify the `run.base` attribute, Zerops keeps the current Java version for your runtime.

Following options are available for Java builds:

<UnorderedList data={data.java.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: java@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
        base: java@latest
      ...
```

<p>
  The base runtime environment contains {data.alpine.default}, the selected major
  version of Java, Zerops command line tool, git` and `wget`.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the runtime environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: java@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base:
        - java@latest
      prepareCommands:
        - zsc add nodejs@latest
      ...
```

See the full list of supported [run base environments](/zerops-yaml/base-list).

To customize your build environment use the `prepareCommands` attribute.

### os

_OPTIONAL._ Sets the operating system for the runtime environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customized.
:::

### ports

_OPTIONAL._ Specifies one or more internal ports on which your application will listen.

Projects in Zerops represent a group of one or more services. Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its internal port.

For example, to connect to a Java service with hostname = "app" and port = 8080 from another service of the same project, simply use `app:8080`. Read more about [how to access a Java service](/java/how-to/access).

Each port has following attributes:


<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">port</td>
      <td className="w-fit">Defines the port number. You can set any port number between <em>10</em> and <em>65435</em>. Ports outside this interval are reserved for internal Zerops systems.</td>
    </tr>
    <tr>
      <td className="w-fit">protocol</td>
      <td className="w-fit"><strong>Optional.</strong> Defines the protocol. Allowed values are <code>TCP</code> or <code>UDP</code>. Default value is <code>TCP</code>.</td>
    </tr>
    <tr>
      <td className="w-fit">httpSupport</td>
      <td className="w-fit"><strong>Optional.</strong> <code>httpSupport = true</code> is the default setting for TCP protocol. Set <code>httpSupport = false</code> if a web server isn't running on the port. Zerops uses this information for the configuration of <a href="/features/access">public access</a>. <code>httpSupport = true</code> is available only in combination with the TCP protocol.</td>
    </tr>
  </tbody>
</table>


### prepareCommands

_OPTIONAL._ Customizes the Java runtime environment by installing additional dependencies or tools to the runtime base environment.

<p>
  The base Java environment contains {data.alpine.default}, the selected major
  version of Java, <a href="/references/cli">Zerops command line tool</a> and
  `git` and `wget`. To install additional packages or tools add one or more
  prepare commands:
</p>

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Java runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first deploy with a defined prepare attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/java/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `prepareCommands` commands in the defined order

#### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/java/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

#### Cache of your custom runtime environment

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the [build.addToRunPrepare](#copy-folders-or-files-from-your-build-container) and `run.prepareCommands` attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.

{/* TODO screenshot** */}

When the prepare cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### Copy folders or files from your build container

<p>
  The prepare runtime container contains {data.alpine.default}, the selected
  major version of Java, <a href="/references/cli">Zerops command line tool</a> and `git` and `wget`.
</p>

The prepare runtime container does not contain your application code nor the built application. If you need to copy some folders or files from the build container to the runtime container (e.g. a configuration file) use the `addToRunPrepare` attribute in the [build section](#build-pipeline-configuration).

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...
      addToRunPrepare: ./runtime-config.yaml

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Java runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

In the example above Zerops will copy the `runtime-config.yaml` file from your build container **after the build has finished** into the new **prepare runtime** container. The copied files and folders will be available in the `xxx` folder in the new prepare runtime container before the prepare commands are triggered.

### initCommands

_OPTIONAL._ Defines one or more commands to be run each time a new runtime container is started or a container is restarted.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Java application is started.
      initCommands:
        - rm -rf ./cache
```

These commands are triggered in the runtime container before your Java application is started via the [start command](/java/how-to/build-pipeline#start).

Use init commands to clean or initialise your application cache or similar operations.

:::caution
The init commands will delay the start of your application each time a new runtime container is started (including the [horizontal scaling](/java/how-to/scaling#horizontal-auto-scaling) or when a runtime container is restarted).

Do not use the init commands for customising your runtime environment. Use the [run:prepareCommands](/java/how-to/build-pipeline#preparecommands-1) attribute instead.
:::

#### Command exit code

If any of the `initCommands` fails, it returns an exit code other than 0, but deploy is **not** canceled. After all init commands are finished, regardless of the status code, the application is started. Read the [runtime log](/java/how-to/logs#runtime-log) to troubleshoot the error.

#### Single or separated shell instances

You can configure your `initCommands` to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### envVariables

_OPTIONAL._ Defines the environment variables for the runtime environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to run your application ====
    run:
      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/java/how-to/env-variables) in Zerops.

### start

_REQUIRED._ Defines the start command for your Java application.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Java application start command
      start: java -jar target/app.jar
```

We recommend starting your Java application using `java -jar target/app.jar`.

### health check

_OPTIONAL._ Defines a health check.

`healthCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the health check to request a local URL using a HTTP GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Java application start command
      start: java -jar target/app.jar

      # OPTIONAL. Define a health check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      healthCheck:
        httpGet:
          port: 80
          path: /status
```

Read more about how the [health check works] in Zerops.

#### exec

Configures the health check to run a local command.
Following attributes are available:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/java/how-to/create#set-secret-environment-variables">environment variables</a> as your Java application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Java application start command
      start: java -jar target/app.jar

      # OPTIONAL. Define a health check with a shell command.
      healthCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [health check works] in Zerops.

### crontab

_OPTIONAL._ Defines cron jobs.

Setup cron jobs in the following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app

    # ==== how to run your application ====
    run:
      crontab:
        # REQUIRED. Sets the command to execute:
        - command: ""
        # REQUIRED. Sets the interval time to execute:
          timing: "0 * * * *"
```

Read more about setting up [cron](/references/cron) in Zerops.

## Deploy configuration

### readiness check

_OPTIONAL._ Defines a readiness check. Read more about how the [readiness check works](/java/how-to/deploy-process#readiness-checks) in Zerops.

`readinessCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the readiness check to request a local URL using a http GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        httpGet:
          port: 80
          path: /status

    # ==== how to run your application ====
    run: ...
```

Read more about how the [readiness check works](/java/how-to/deploy-process#readiness-checks) in Zerops.

#### exec

Configures the readiness check to run a local command.
Following attributes are available:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/java/how-to/create#set-secret-environment-variables">environment variables</a> as your Java application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [readiness check works](/java/how-to/deploy-process#readiness-checks) in Zerops.




<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Customize Java build environment

The default Java build environment contains:

- <span>{data.alpine.default}</span>
- Selected version of Java when the runtime service was created.
- [zCLI](/references/cli)
- Git

:::note
To use Ubuntu instead of the default Alpine, set the [build.os](/zerops-yaml/specification#os-) attribute.

Additional packages and tools can be installed using [build.prepareCommands](/zerops-yaml/specification#preparecommands-).
:::

## Description of the build process

Zerops starts a temporary build container and performs following actions:

1. Installs the build environment:
   - Sets up base system and Go runtime
   - Restores cached files if available (based on `build.cache` configuration)
   - Validates cache against current `build.os`, `build.base`, and `build.prepareCommands`
2. Downloads your application source code from [GitHub ↗](https://www.github.com), [GitLab ↗](https://www.gitlab.com) or via [Zerops CLI](/references/cli)
3. Optionally [customizes the build environment](#customize-java-build-environment)
4. Runs the build commands
5. Uploads the application artefact to the internal Zerops storage
6. Preserves specified files for future builds (based on `build.cache` configuration)
7. Optionally [customizes the runtime environment](/java/how-to/customize-runtime)
8. [Deploys your application](/java/how-to/deploy-process)

The build container is automatically deleted after the build has finished or failed.

## Cancel running build

When you know that the running build is not correct and you want to cancel it, you can do it in Zerops GUI. Go to the service detail, select **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Cancel build** button.

{/* ** TODO screenshot of a running build pipeline** */}

The build cancellation is available before the build pipeline is finished. When the build is finished, the deployment cannot be cancelled.

## Customize Java build environment

The default Java build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Java defined in `zerops.yaml` [build.base](/java/how-to/build-pipeline#base) parameter
- [zCLI](/references/cli), Zerops command line tool
- `git` and `wget`

If you prefer the Ubuntu OS instead of Alpine, set the [build.os](/java/how-to/build-pipeline#os) attribute to `ubuntu`. To install additional packages or tools add one or more [build.prepareCommands](/java/how-to/build-pipeline#preparecommands) commands to your `zerops.yaml`.

:::info
The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).
:::

## Java build hardware resources

Build of your Java application is run in a separate build container with following resource configuration:

| HW resource   | Minimum | Maximum |
| ------------- | ------- | ------- |
| **CPU cores** | 6       | 20      |
| **RAM**       | 8 GB    | 8 GB    |
| **Disk**      | 1 GB    | 100 GB  |

The build container is always started with the minimum hardware resources and scales vertically up to the maximum resources.

:::info
Hardware resources of the build containers are not charged. The build costs are covered by the standard Zerops [project fee](https://zerops.io/#pricing).
:::

## Build time limit

The time limit for the whole build pipeline is **1 hour**. After 1 hour, Zerops will terminate the build pipeline and delete the build container.

## Troubleshooting build-related problems

### Failure of a build prepare command

If any [prepare command](/java/how-to/build-pipeline#preparecommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/java/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom build environment is ready for the build phase.

### Invalidate the build cache
If you encounter unexpected build behavior or dependency issues, the problem might be related to [cached build data](/features/build-cache). While Zerops maintains the build cache to speed up deployments, sometimes you may need to start fresh.
To invalidate the build cache:

1. Go to your service detail in Zerops GUI
2. Choose **Pipelines & CI/CD Settings** from the left menu
3. Click on the **Invalidate build cache** button

This will force Zerops to run the next build clean, including all prepare commands, which can help resolve cache-related issues. After invalidation, your next build will also create a fresh cache.

### Failure of a build command

If any [build command](/java/how-to/build-pipeline#buildcommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/java/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the verbose `-X` debug option.

```yaml
build:
  - ./mvnw -X clean install
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the [deploy](/java/how-to/deploy-process) phase.



Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart Java service in Zerops GUI

To stop the Java service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)*/}

To start the stopped Java service choose the **Start** item from the same menu.

To restart the Java service choose the **Restart** item from the same menu.

## Stop and start Java using zCLI

zCLI is the Zerops command-line tool. To stop and start the Java service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and its services to choose from.
:::




Zerops provides a Java runtime service with extensive build support. Java runtime is highly scalable and customisable to suit both development and production.

## Create Java service using Zerops GUI

First, set up a project in Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu in the **Services** block. Then add a new Java service:

<Video
  src="/vids/services/java.webm"
  type="video/webm"
/>

### Choose Java version

Following Java versions are currently supported:

<UnorderedList data={data.java.readable} />

:::info
You can [change](/java/how-to/upgrade) the major version at any time later.
:::

### Set a hostname

Enter a unique service identifier like "app","cache", "gui" etc. Duplicate services with the same name in the same project are forbidden.

#### Limitations:

- maximum 25 characters
- must contain only lowercase ASCII letters (a-z) or numbers (0-9)

:::caution
The hostname is fixed after the service is created. It can't be changed later.
:::

### Set secret environment variables

Add environment variables with sensitive data, such as password, tokens, salts, certificates etc. These will be securely saved inside Zerops and added to your runtime service upon start.

Setting the secret environment variables is optional. You can set them later in Zerops GUI.

Read more about [different types of env variables](/java/how-to/env-variables#types-of-env-variables-in-zerops) in Zerops.

### Set auto scaling configuration

Zerops scales the Java services automatically both vertically and horizontally. Vertical scaling means increasing or decreasing the hardware resources (CPU, RAM and disk) of a Java container. Horizontal scaling adds or removes whole containers.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

**Dedicated**
The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

Choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

Java service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Java service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Java performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](/java/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

:::info
You can change the vertical auto scaling parameters later.
:::

#### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Java service. When your Java service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Java service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

[Learn more](/java/how-to/scaling) about Java auto scaling.

#### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Create Java service using zCLI

zCLI is the Zerops command-line tool. To create a new Java service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/java/how-to/create#create-a-project-description-file)
3. [Create a project with a Java and PostgreSQL service](#full-example)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### Basic example:

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in java@{version} format
    type: java@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes your future project infrastructure. The project will contain one Java version 1 service with default [auto scaling](/java/how-to/scaling) configuration. Hostname will be set to "app", the internal port(s) the service listens on will be defined later in the [zerops.yaml](/java/how-to/build-pipeline#ports). Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

#### Full example:

Create a directory my-project. Create an description.yaml file inside the my-project directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a Java and PostgreSQL database
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in java@{version} format
    type: java@latest
    # optional: vertical auto scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4
    # optional: create secret env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
  - # second service hostname
    hostname: db
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"non_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain a Java service and a [PostgreSQL](/postgresql/overview) service.

Java service with "app" hostname, the internal port(s) the service listens on will be defined later in the zerops.yaml. Java service will run on version 1 with a custom vertical and horizontal scaling. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The hostname of the PostgreSQL service will be set to "db". The [single container](/postgresql/how-to/create#single-container) mode will be chosen and the default [auto scaling configuration](/postgresql/how-to/create#set-auto-scaling-configuration) will be set.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>hostname</strong></td>
      <td className="w-fit">
        The unique service identifier.
         
        The hostname of the new database will be set to the `hostname` value.
         
        <strong>Limitations:</strong>
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>type</strong></td>
      <td className="w-fit">
        Specifies the service type and version.
        <br />
        See what [Java service types](/references/import-yaml/type-list#runtime-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>verticalAutoscaling</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Defines <a href="/java/how-to/create#set-auto-scaling-configuration">custom vertical auto scaling parameters</a>.
        <br />
        All verticalAutoscaling attributes are optional. Not specified attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- cpuMode</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minCpu/maxCpu</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minCpu or maxCpu in CPU cores (integer).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minRam/maxRam</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minRam or maxRam in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minDisk/maxDisk</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minDisk or maxDisk in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>minContainers</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Default = 1. Defines the minimum number of containers for <a href="/java/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.
         
        <strong>Limitations:</strong>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>maxContainers</strong></td>
      <td className="w-fit">
        Defines the maximum number of containers for <a href="/java/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.
         
        <strong>Limitations:</strong>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>envSecrets</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Defines one or more secret env variables as a key value map. See env variable <a href="/java/how-to/env-variables#env-variable-restrictions">restrictions</a>.
      </td>
    </tr>
  </tbody>
</table>

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>
### Add Java service to an existing project

#### Example:

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in java@{version} format
    type: java@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one Java service version 1 with default [auto scaling](/java/how-to/scaling) configuration will be added to your project. Hostname of the new service will be set to `app`. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The content of the `services:` section of `import.yaml` is identical to the project description file. The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the import.yaml file is 100 kB.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline_custom_runtime.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>


The default Java runtime environment contains:

- <span>{data.alpine.default}</span>
- Selected version of Java when the runtime service was created.
- [zCLI](/references/cli)
- Git

:::note
To use Ubuntu instead of the default Alpine, set the [run.os](/zerops-yaml/specification#os--1) attribute.

Additional packages and tools can be installed using [run.prepareCommands](/zerops-yaml/specification#preparecommands--1).
:::

## Runtime Flow

When the first deploy with a defined `prepareCommands` attribute is triggered, Zerops will

1. Create a prepare runtime container
2. Optionally: [copy selected folders or files from your build container](/java/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. Run the run.prepareCommands in the defined order

### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/java/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

The prepare runtime container is automatically deleted after the prepare runtime phase has finished or failed.

### Custom runtime environment cache

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the <a href="/java/how-to/build-pipeline#copy-folders-or-files-from-your-build-container">build.addToRunPrepare</a> and <a href="/java/how-to/build-pipeline#preparecommands-1">run.prepareCommands</a> attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.

{/* ** TODO screenshot** */}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.



## Delete Java service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete Java using zCLI

zCLI is the Zerops command-line tool. To delete the Java service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step3.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Application artefact

When the [build phase](/java/how-to/build-process) is finished, the application artefact is stored in the internal Zerops storage and the build container is deleted.

If you triggered the deploy pipeline [manually](/java/how-to/trigger-pipeline#manual-deploy-using-zerops-cli) using Zerops CLI, the application artefact is also uploaded to the internal Zerops storage.

Zerops uses the stored artefact to deploy the identical version of your application each time a new container is started:

- when a new application version is deployed
- when the application [scales horizontally](/java/how-to/create#horizontal-auto-scaling)
- when a runtime container fails and a new container is started automatically

## First deploy

When your application is deployed for the first time, Zerops will start one or more runtime containers based on the service [auto scaling settings](/java/how-to/scaling).

Zerops performs following actions for each new container:

1. Installs the runtime environment
2. Downloads the application artefact from the internal storage
3. Optionally runs the [init commands](/java/how-to/build-pipeline#initcommands)
4. Starts your application using the [start command](/java/how-to/build-pipeline#start)
5. Optionally waits until the [readiness check](/java/how-to/build-pipeline#readiness-check) succeeds
6. The container is now active and receives incoming requests.

Services with multiple containers are deployed in parallel.

:::info
If your application needs to be initialized in each runtime container, add [init commands](/java/how-to/build-pipeline#initcommands) to `zerops.yaml`.
:::

:::caution
Do not use the `initCommands` for customising your runtime environment. See [how to customize the runtime environment](/java/how-to/customize-runtime).
:::

## Further deploys

When a previous version of your application is already running, Zerops will start new containers. The count of new containers will be the same as the count of existing containers.

Zerops performs the identical actions for each new container as the first deployment.
When all new containers are started your service contains both new and old versions for a short period of time.

The old containers are then removed from the project balancer so they don't receive new requests. The Java process inside each of the old containers is terminated and all old containers are gradually deleted.

## Readiness checks

If your application isn't ready to handle requests right after it is started via the [start command](/java/how-to/build-pipeline#start), configure a [readiness check](/java/how-to/build-pipeline#readiness-check) in your `zerops.yaml`.

If the readiness check is defined, Zerops will:

1. Start your application
2. Perform a readiness check
3. If the readiness check fails, wait 5 seconds and repeat step 2.
4. If the readiness check succeeds, set the container as active.

Application in the runtime container with a pending readiness check won't receive any incoming requests. Only active containers receive incoming requests to your Java service.

If the readiness check is still failing after 5 minutes, the specific runtime container is marked as failed and Zerops will delete it, create a new runtime container and perform the deploy.

The <a href="/java/how-to/build-pipeline#httpget">`httpGet`</a> readiness check is successful when the URL returns HTTP status code `2xx`. The timeout is 5 seconds. When the URL returns a `3xx` HTTP status, the readiness check HTTP client will follow the redirect.

The <a href="/java/how-to/build-pipeline#exec">`exec.command`</a> readiness check is successful when the command returns status code 0. The timeout is 5 seconds.

Read the [runtime log](/java/how-to/logs#runtime-log) to troubleshoot failed readiness checks.

## Application versions

Zerops keeps 10 last versions of your application in the internal storage.

The list of application versions is available in Zerops GUI. Go to the service detail and choose **Service dashboard & runtime containers** from the left menu. The active version is highlighted, show all archived version by clicking on the button below.

<p align="center">
  <img
    src="/img/screenshots/pipeline_history.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

The pipeline detail is accessible from the additional menu. The pipeline detail contains

- The pipeline config (`zerops.yaml`) that was used for the selected version
- The build log (if available)
- The prepare runtime log (if available)

You can download the build artefact of the selected version or delete an inactive version manually.

## Restore an archived version

You can restore an archived version by choosing the **Activate** item from the additional menu.
Zerops will deploy the selected version and the active version will be archived.

The environment variables will be restored to the latest moment when the selected version was active.



Environment variables help you run your application in different environments. They allow you to isolate all specific environment aspects from your application code and keep your app encapsulated. You can create several projects in Zerops that represent different environments (development, stage, production) or even each developer can have a project with its own environment.

In Zerops you do not have to create a `.env` file manually. Zerops handles the environment variables for you.

## Types of env variables in Zerops

There are 3 different sets of env variables in Zerops:

<table className="w-fit my-1.5">
  <thead>
    <tr className="text-center  rounded-lg">
      <th className="w-fit"><strong>Type</strong></th>
      <th className="w-fit"><strong>Environment</strong></th>
      <th className="w-fit"><strong>Defined in</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">build</td>
      <td className="w-fit"><a href="/java/how-to/build-pipeline#envvariables">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/java/how-to/build-pipeline#envvariables-1">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">secret</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/java/how-to/env-variables#set-secret-env-variables-in-zerops-gui">Zerops GUI</a></td>
    </tr>
  </tbody>
</table>


Use the [secret env variables](/java/how-to/create#set-secret-environment-variables) for all sensitive data you don't want to store in your application code. Secret env variables are also useful if you need for testing where you need to change the value of some env variables frequently. Secret variables are managed in Zerops GUI and you don't have to redeploy your application.

The basic build and runtime env variables are listed in your [zerops.yaml](/zerops-yaml/specification) and deployed together with your application code. When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your zerops.yaml and redeploy your application to Zerops.

You can [reference](/java/how-to/env-variables#reference-a-local-variable-in-another-variable-value) another variable of the same service or even a variable of [another service](/java/how-to/env-variables#reference-a-variable-of-another-project-service) within the same project.

## Set secret env variables in Zerops GUI

Use secret variables to store passwords, tokens and other sensitive information that shouldn't be part of your repository and listed in zerops.yaml.

<p align="center">
  <img
    src="/img/screenshots/secret_env.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

You can set env variables when you [create](/java/how-to/create) a new Java service or you can set them later.

To configure env variables for an existing service, go to the service detail and choose **Environment variables** in the left menu. Scroll to the **Secret variables** section and click on the **Add secret variable** button and set variable key and value.

You can edit or delete env variables that you've created by clicking on the menu on the right side of each row.

The changes you've made to environment variables will be automatically applied to all containers of your project's services.

:::caution
You need to **restart** the runtime service after you update environment variables. The Java process running in the container receives the list env variables only when it starts. Update of the env variables while the Java process is running does not affect your application.
:::

## Set basic build env variables in zerops.yaml

To set basic env variables for the build environment, add the `envVariables` attribute to the build section in your `zerops.yaml`

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
       …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Set basic runtime env variables in zerops.yaml

To set basic env variables for the runtime environment, add the `envVariables` attribute to the runtime section in your `zerops.yaml`.

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    run:
       …

      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Env variable restrictions

**key**

- must satisfy the following regular expression: `[a-zA-Z_]+[a-zA-Z0-9_]*`
- all variable keys in the same service must be unique regardless of case
- keys are case sensitive

**value**

- must contain only ASCII characters
- the _End of Line_ character is forbidden

These restrictions apply to all [types of env variables](/java/how-to/env-variables#types-of-env-variables-in-zerops).

## Referencing other env variables

You can reference another variable of the same service using `${key}` in your variable value. You can even reference a variable from a different service using `${hostname_key}`. The referenced variable doesn't need to exist when you are entering your variable.

### Reference a local variable in another variable value

| Variable key | Variable value      | Computed variable value |
| ------------ | ------------------- | ----------------------- |
| id           | 12345               | 12345                   |
| hostname     | app                 | app                     |
| name         | `${id}-${hostname}` | 12345-app               |

### Reference a variable of another project service

Let's say your project contains two PostgreSQL services `dbtest` and `dbprod`. Both services have a `connectionString` variable. Then you can create a `dbConnectionString` env variable in your Java runtime and set `${dbtest_connectionString}` as the variable value. Zerops will fill in the value of the `connectionString` variable of the `dbtest` service.

When you change the `dbConnectionString` value to `${dbprod_connectionString}`, Zerops will fill in the value of the `connectionString` variable of the `dbprod` service.

:::caution
When you change the value of the `connectionString` variable in the service `dbtest` you need to **restart** the Java service. The Java process running in the container receives the list env variables only when it starts. Update of the env variables while the Java process is running does not affect your application.
:::

## Generated env variables

Zerops creates several helper variables when a Java service is created, e.g. `hostname`, `PATH`. Some helper variables are read-only (`hostname`), others are editable (`PATH`). Generated variables cannot be deleted.

Generated env variables are listed on the **Environment variables** page. Scroll to the **Generated variables** section.

<p align="center">
  <img
    src="/img/screenshots/nodejs_generated_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## How to read env variables from your Java app

Zerops passes all environment variables from all project services when your Java app is deployed and started.

To access the local environment variable i.e. the variable set to this Java service in your app, use:

```sh
os.Getenv("YOUR_VARIABLE_KEY_HERE")
```

## How to read env variables of another service

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Examples:

To access the `connectionString` env variable of the `mariadb1` service, use `mariadb1_connectionString` as the env variable key.
To access the `password` env variable of the `mariadb2` service, use `mariadb2_password` as the env variable key.

## How to read runtime env variables in the build environment

You can use runtime env variables in the build environment using the `RUNTIME_` prefix. For example if you have a runtime variable with the `connectionString` key, use the `RUNTIME_connectionString` to read the variable in the build environment. This rule applies both for basic and secret runtime variables.

## Basic and secret env variable with the same key

If you create a secret env variable and a basic runtime env variable with the same key, Zerops saves the basic runtime env variable from your zerops.yaml and ignores the secret env variable.

If you create a basic build env variable and a runtime env variable with the same key, Zerops saves both because the build and runtime environments have separate sets of env variables.



## Zerops GUI

In Zerops GUI, go to the service detail page and choose **Service containers & resources overview** and scroll down to the list of containers.

<p align="center">
  <img
    src="/img/screenshots/nodejs_containers_list.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Then click on the file browser icon and the file browser opens:

<p align="center">
  <img
    src="/img/screenshots/nodejs_file_browser.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

If your service is in the [HA mode], you can switch between containers in the top left corner.

## zCLI & SSH

You can connect to the container via SSH with the Zerops CLI and browse its files.
How to [connect to your service via SSH](/references/ssh).



Zerops provides 3 different logs:

- [build log](#build-log)
- [prepare runtime log](#prepare-runtime-log)
- [runtime log](#runtime-log)

## How to access logs

### Build log

#### Zerops GUI

To access a build log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Build log**. The build log button is available only if the [build pipeline](/java/how-to/trigger-pipeline) was triggered for the selected deploy.

#### zCLI

To access a build log in Zerops CLI use

```sh
zcli service log --showBuildLogs
```

Read more about the [zcli service log](/references/cli/access-logs) command.

### Prepare runtime log

#### Zerops GUI

To access a prepare runtime log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Prepare runtime log**. The prepare runtime log button is available only if the [prepare runtime pipeline](/java/how-to/build-pipeline#preparecommands-1) was triggered for the selected deploy.

#### zCLI

_Prepare runtime log is currently not supported in zCLI._

### Runtime log

#### Zerops GUI

To access a runtime log in Zerops GUI, go to the service detail and choose **Runtime log** in the left menu.

{/* TODO screenshot** */}

Each runtime container has its own log. If your service has multiple containers, select the container in the log header.

You can filter log records by minimum severity or by time.

#### zCLI

To access the log of the runtime containers in Zerops CLI use

```sh
zcli service log
```

Read more about the [zcli service log](/references/cli/access-logs) command.

## Java logging configuration

Zerops logs all messages sent

- to the standard error (`stderr`)
- to the standard output (`stdout`)
- via the Apache `log4j` package etc.

### Severity level

By default the `log4j` methods create messages with the `Informational (6)` severity.

Add a severity number in the `<N>` format as a prefix to set a custom severity as shown below:

```java

public class LogClass {
   private static org.apache.log4j.Logger log = Logger.getLogger(LogClass.class);
   public static void main(String[] args) {
        log.info("A message with the informational severity ...")
        log.info("<0>Emergency (0) severity > system is unusable.")
        log.info("<1>Alert (1) severity > action must be taken immediately.")
        log.info("<2>Critical (2) severity > critical conditions.")
        log.info("<3>Error (3) severity > error conditions.")
        log.info("<4>Warning (4) severity > warning conditions.")
        log.info("<5>Notice (5) severity > normal, but significant, condition.")
        log.info("<6>Informational (6) severity > informational message.")
        log.info("<7>Debug (7) severity > debug-level message.")
   }
}
```

:::info

`log.trace`, `log.info`, `log.debug`,
`log.warn`,`log.error`, and `log.fatal` are
just aliases to the `log.Info` method. They don't set the appropriate
severity number. Use the `&lt;N&gt;` prefix instead. :::




Zerops performs an automated scaling of hardware resources required to run your runtime application based on its usage. If the current use of your application does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your application is under heavy load or needs to store more data, then auto scaling increases the resources to make sure it runs smoothly.

## Vertical and horizontal auto scaling

Each application you deploy starts with the minimum hardware resources: **CPU** cores, **RAM** and **Disk**. Zerops monitors the usage of these 3 resources and if the usage exceeds a set threshold, more CPU cores, RAM or Disk is allocated to the service. This is called **vertical scaling**.

<p align="center">
  <Image
    lightImage="/img/gui/resources.webp"
    darkImage="/img/gui/resources.webp"
    alt="Resources of a Zerops service"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

**Horizontal scaling** adds or removes whole containers.

Zerops has a preference for vertical scaling because it's faster and more precise. If the vertical auto scaling hits the defined maximum a new container is started automatically. When your application doesn't need so much power and all containers are vertically scaled down, Zerops will gradually remove whole containers.

<p align="center">
  <img
    src="/img/screenshots/scaling2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Configure auto scaling

To change the auto scaling settings go to the Java service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### CPU mode

#### Shared

Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

#### Dedicated

The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

Java service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Java service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Java performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Java service. When your Java service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Java service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your application starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your application.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your application doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

By default Zerops keeps a minimum free RAM in each container. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your application need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 0.125 GB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the application is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each Java service. Zerops will never scale above the entered values. If your application is in [highly available mode], maximal resources are identical for all containers of the Java service.

### Not enough resources to scale up

If one of the Java containers needs more resources but there are not enough of them on the underlying machine, a new container with the required hardware resources will be started on another machine. When the new container is ready, it will be added to the service balancer. The old container will be removed from the balancer and deleted.

### Automatic scale down

When the application no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the application from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal autoscaling

Zerops prefers vertical scaling over horizontal scaling because vertical scaling is faster and allows finer adjustment to the required performance. Horizontal scaling can be disabled by setting the same number for the minimum and maximum container count. Zerops will then scale the Java service only vertically.

Your application is created with the defined minimum number of containers. Zerops will add a new container when any of the service's containers reaches the maximum limit for vertical scaling for CPU cores or RAM. Zerops doesn't start a new container when the maximum disk space is reached. No more containers are added when the defined maximum container limit is reached.

The new container is started with a minimum disk size and with an average CPU cores and RAM of the existing containers.

By customising the vertical auto scaling limits, you can cause the horizontal scaling to start earlier. For example if you lower the vertical auto scaling maximum to 1 CPU core, Zerops will start a new container if some of the running containers are using the whole CPU core for more than 20 seconds.

If the application no longer needs as much power, Zerops will gradually remove containers to the defined minimum count. The container is removed after its CPU cores are scaled down to the defined minimum and the free CPU is safely above the minimum threshold for vertical scaling. Zerops only **removes containers** with a minimum **15 minute lifetime**.

## Monitor Java resources

Zerops provides information about how much hardware resources the Java service is currently using. Go to the service detail in Zerops GUI and select **Service dashboard & runtime containers** in the left menu. Zerops also provides the history of resource usage.



Zerops provides [shared storage service](/shared-storage/overview) that can be connected to runtime services. Shared storage enables your runtime service to share files between all containers of the same service or even among containers of different runtime services.

## Connect a shared storage in Zerops GUI

Connect your Java service directly when creating a new shared storage service. Just select your Java service in the **Share with Services** block on the **Add new shared storage service** page.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_1.png)

To connect the existing shared storage to the Java service, go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Select a runtime service and the shared storage will be connected to the selected runtime.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_2.png)

Zerops will create a new folder `/mnt/[shared storage name]`` in the runtime root folder. E.g. `/mnt/teststorage`for a`teststorage` shared storage. The content of this folder is shared among all containers of the runtime service you've selected. If you select multiple runtimes, the content of the folder will be shared among all containers of selected services.

## Disconnect a shared storage in Zerops GUI

Go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Switch off the toggle to disconnect the shared storage from the selected runtime.

:::note
Your runtime service will be automatically restarted when a shared storage is disconnected.
:::

## Create Java service with a shared storage using zCLI

zCLI is the Zerops command-line tool. To create a new Java service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/java/how-to/shared-storage#create-a-project-description-file)
3. [Create a project with a Java service and a shared storage](/java/how-to/shared-storage#create-a-project-with-a-java-service-and-a-shared-storage)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### description.yaml format

[Read the basics](/java/how-to/create#create-a-project-description-file) how to define the Java service using the description.yaml.

#### Example with a shared storage

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project

  # optional: project description
  description: A project with a Java and a shared storage

  # optional: project tags
  tags:
    - DEMO
    - ZEROPS

# array of project services
services:
  - # service name
    hostname: teststorage

    # shared storage service has no version
    type: shared-storage

    # mode: HA / NON_HA
    mode: NON_HA

  - # service name
    hostname: app

    # service type and version number in java@{version} format
    type: java@latest

    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2

    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4

    # Mount the shared storage to the Java service
    mount:
      - teststorage
```

The mount attribute accepts an array of shared storage names you want to mount to your runtime service.

### Create a project with a Java service and a shared storage

Follow the article [How to create a project based on the description.yaml](/java/how-to/create#create-a-project-based-on-the-descriptionyaml).




<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-1.webp"
    darkImage="/img/mind-maps/build-deploy/step-1-dark.webp"
    alt="build deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Automatic builds and deploys from GitHub or GitLab

Integrate Zerops to your GitHub or GitLab repository and configure the automatic builds and deploys.

Follow these steps:

1. Add [zerops.yaml](/java/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository.
2. Connect your GitHub repository or connect your GitLab repository

Then each time you create a new tag or push to a specific branch, depending on the configuration, GitHub or GitLab will initiate a new build & deploy pipeline.

<p align="center">
  <Image
    lightImage="/img/gui/github-integration.webp"
    darkImage="/img/gui/github-integration.webp"
    alt="github integration"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

### Skip the automatic pipeline once

To ensure that a pipeline is not triggered by your next push, add `[ci skip]` or `[skip ci]` to the commit message. It is case insensitive.

:::note
You will still see a successful delivery of a webhook in your Github/Gitlab repository as a webhook is actually triggered, but with no action.
:::

## Manual builds and deploys using Zerops CLI

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    darkImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    alt="Manual Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

To start a new build & deploy pipeline manually, use the Zerops CLI.

Follow these steps:

1. Add <a href="/java/how-to/build-pipeline#add-zeropsyaml-to-your-repository">`zerops.yaml`</a> to your repository.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli push` command.

The `zcli push` command uploads your application code, builds and deploys your application in Zerops.

The command triggers the [build pipeline](/java/how-to/trigger-pipeline) defined in `zerops.yaml`. `zerops.yaml` must be in the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

zCLI uploads all files and subdirectories of the working directory to Zerops and starts the build pipeline. If the `.gitignore` file is found, it is interpreted and the defined files and folders will be ignored.

If you just want to deploy your application to Zerops, use the [zcli deploy](#manual-deploy-using-zerops-cli) command instead.

#### Push command parameters

```sh
Usage:
  zcli push [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.
  -h, --help                     the service push command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

zCLI commands are interactive, when you press enter after `zcli push`, you will be given a list of your projects to choose from.

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

## Manual deploy using Zerops CLI

To start only a deploy pipeline, use the Zerops CLI.

Follow these steps:

1. Add [zerops.yaml](/java/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository. Omit the build section.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli service deploy` command.

The `zcli service deploy` command uploads your application and deploys it in Zerops. Use this tool if you have your own build process. If you want to build your application in Zerops, use an [automatic](#automatic-builds-and-deploys-from-github-or-gitlab) or [manual](#manual-builds-and-deploys-using-zerops-cli) build process.

#### Deploy command parameters

```sh
Usage:
  zcli service deploy pathToFileOrDir [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
  -h, --help                     the service deploy command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

`pathToFileOrDir` defines a path to one or more directories and/or files relative to the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

`zerops.yaml` must be placed in the working directory.

:::info
You can change the deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your working directory.
:::



You can upgrade or downgrade your Java service to a different major Java version by setting the <a href="/java/how-to/build-pipeline#base-1">`run.base`</a> parameter in your `zerops.yaml`. When you [trigger a new pipeline](/java/how-to/trigger-pipeline), Zerops will start new runtime container(s) with the required Java version. If you don't specify the `run.base` attribute in your `zerops.yaml`, Zerops keeps the current Java version for your runtime.

If you want to build your application with a different major Java version, change the <a href="/java/how-to/build-pipeline#base">`build.base`</a> parameter in your `zerops.yaml`. The `build.base` is the required attribute.




# Java overview

[Java ↗](https://www.java.com/en/) is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible.


As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-java-hello-world), a **_recipe_**, containing the most simple Java web application. The repo will be used as a source from which the app will be built.

<CustomCard title="Feel free to deploy the recipe yourself" emoji="🚀">
  This is the most bare-bones example of Java running on Zerops — as few libraries as possible,
  just a simple endpoint with connect, read and write to a Zerops PostgreSQL database.

  <DeployButton link="java" badgeWidth="200" />
</CustomCard>

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)
2. In the **Projects** box click on **Import a project** and paste in the following YAML config ([source ↗](https://github.com/zeropsio/recipe-java-hello-world/blob/main/import-project/description.yaml)):

```yaml
project:
  name: my-first-project
services:
  - hostname: helloworld
    type: java@latest
    minContainers: 1
    maxContainers: 3
    buildFromGit: https://github.com/zeropsio/recipe-java-hello-world@main
    enableSubdomainAccess: true
```

3. Click on **Import project** and wait until all pipelines have finished.

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://helloworld-24-8080.prg1.zerops.app`.
2. Click or the `subdomain` URL to open it in a browser and you should see

```
Hello, World!
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::


## How to start

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/java/getting-started',
      label: 'New to Zerops?',
      customProps: {
        icon: Icons['rocket-launch'],
        description: 'Learn the basics by following a simple example.',
      },
    },
    {
      type: 'link',
      href: '/java/how-to/create',
      label: 'Care for details?',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description:
          'Dive in all Zerops has to offer for your Java application.',
      },
    },
  ]}
/>

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/java/how-to/create',
      label: 'Create Java service',
      customProps: {
        icon: Icons['java'],
        description: 'Start with creating a Java service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: '/java/how-to/build-pipeline#add-zeropsyaml-to-your-repository',
      label: 'zerops.yaml',
      customProps: {
        icon: Icons['puzzle'],
        description:
          'See a full example of zerops.yaml file to create your own app.',
      },
    },
    {
      type: 'link',
      href: '/java/how-to/scaling',
      label: 'Scaling configuration',
      customProps: {
        icon: Icons['adjustments'],
        description:
          'Set up scaling of your Java application so that it runs smoothly while using only necessary resources.',
      },
    },
  ]}
/>

{" "}

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/java/how-to/build-process#customize-java-build-environment',
      label: 'Customize build environment',
      customProps: {
        icon: Icons['sparkles'],
      },
    },
    {
      type: 'link',
      href: '/java/how-to/customize-runtime',
      label: 'Customize runtime environment',
      customProps: {
        icon: Icons['sparkles-solid'],
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/java/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>




This quick start allows you to get hands-on experience of Zerops by running a predefined application consisting of a KeyDB service and a runtime service that handles the SQL queries.

If you are already familiar with Zerops and you are interested in more detailed guides for your own KeyDB service, feel free to head straight to the [How to](/keydb/how-to/create) section.

## Guides

We have created repositories, _recipes_, containing a simple web application and a KeyDB service, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics with one-service app.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=keydb&type=all&language=&sort=',
      label: 'All KeyDB recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspired.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



## Copy access details from Zerops GUI

You will find the KeyDB access details under the **Access details** button in the project dashboard page.

{/*TODO screenshot (Access detail popover)*/}

The same information is available in the service detail page in the left menu under the **Peek access details** button.

### KeyDB access parameters:

| Parameter             | Description                                                                      |
| --------------------- | -------------------------------------------------------------------------------- |
| **Hostname**          | The service hostname specified when the KeyDB service was created.               |
| **Port**              | **6379**<br/>This port is fixed for all KeyDB services and cannot be customized. |
| **Connection string** | The connection string for KeyDB service is:<br/>`redis://{hostname}:6379`        |

## Connect to KeyDB from runtime services of the same project

Projects in Zerops represent a group of one or more services. Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its internal port.

{/*TODO image (project example diagram)*/}

#### Example

To connect to KeyDB `database1` service, set

```
host = database1
```

You will find the password under the [**Access details**](#copy-access-details-from-zerops-gui) button in Zerops GUI.

:::caution
Do not use SSL/TLS protocols when connecting to KeyDB from other runtime services in the same project. Zerops KeyDB is not configured to support these protocols. The security is assured by the project private network. Due to security reasons Zerops doesn't allow exposing KeyDB service to the internet.
:::

## Use KeyDB environment variables

Zerops creates default environment variables for each KeyDB service to help you with connection from runtime services in the same project. To avoid the need to copy database access parameters manually, use environment variables in your [runtime service].

### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Example

To access the `connectionString` env variable of the `keydb1` service, use `keudb1_connectionString` as the env variable key.

### KeyDB environment variables

List of service environment variables is available in Zerops GUI. Go to a KeyDB service detail and choose **Environment variables** in the left menu.

{/*TODO screenshot (Service env variables table page in the KeyDB detail)*/}

Zerops creates following environment variables when the KeyDB service is created:

| Variable              | Description                                                                      |
| --------------------- | -------------------------------------------------------------------------------- |
| **Hostname**          | The service hostname specified when the KeyDB service was created.               |
| **Port**              | **5432**<br/>This port is fixed for all KeyDB services and cannot be customized. |
| **projectId**         | ID of the project. Generated by Zerops.                                          |
| **serviceId**         | ID of the KeyDB service. Generated by Zerops.                                    |
| **Connection string** | The connection string for KeyDB service is:<br/>`redis://{hostname}:6379`        |

You can create own custom [environment variables](/features/env-variables) for the KeyDB service in Zerops GUI and use them in the same way as the default variables.

## Connect to KeyDB in Zerops remotely

:::caution
Due to security reasons Zerops doesn't allow exposing KeyDB service directly to the internet.
:::

### Start VPN connection

You can securely connect to KeyDB from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)

### Access KeyDB through VPN

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](#use-keydb-environment-variables) are available when connected through VPN. To connect to KeyDB in Zerops you have to copy the [access details](#copy-access-details-from-zerops-gui) manually from Zerops GUI.

:::caution
Do not use SSL/TLS protocols when connecting to KeyDB over VPN. Zerops KeyDB is not configured to support these protocols. The security is assured by the VPN.
:::

### Stop VPN connection

[Stop the Zerops VPN](/references/vpn#stop-vpn) in zCLI.

### Connect to KeyDB from another Zerops project

All services of the same project share a **dedicated private network**. You can use the service hostname to connect from one service to another within the same project.

Different Zerops projects have no special connection. They can communicate with each other only via the internet. If you need to connect to a KeyDB service in a Zerops project from a runtime service in another project, you need to use the [Zerops VPN](#access-keydb-through-vpn). Due to security reasons Zerops doesn't allow exposing KeyDB service directly to the internet.



Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart KeyDB service in Zerops GUI

To stop the KeyDB service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)*/}

To start the stopped KeyDB service choose the **Start** item from the same menu.

To restart the KeyDB service choose the **Restart** item from the same menu.

## Stop and start KeyDB using zCLI

zCLI is the Zerops command-line tool. To stop and start the KeyDB service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and its services to choose from.
:::




[KeyDB ↗](https://docs.keydb.dev/) is a fully open source database, backed by Snap, and a faster drop in alternative to Redis.

## Create KeyDB using Zerops GUI

First, set up a project in Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu in the **Services** block. Then add a new KeyDB service:

{/*TODO screenshot (add a new service page)*/}

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Limitations</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>hostname</strong></td>
      <td className="w-fit">A unique service identifier like `keydb`, `db` etc.</td>
      <td className="w-fit">
        <br />- duplicate services with the same name in the same project are forbidden
        <br />- maximum 25 characters
        <br />- must contain only lowercase ASCII letters (a-z) or numbers (0-9)
      </td>
    </tr>
  </tbody>
</table>

:::caution
The hostname is fixed after the service is created. It can't be changed later.
:::

### Choose KeyDB service mode

Zerops provides KeyDB service in two modes: **Highly available** and **Single container**.

<p align="center">
  <img
    src="/img/screenshots/keydb_autoscaling.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

#### Highly available

Creates a KeyDB cluster with **2 database containers**.
This mode is suited for production.

Zerops always keeps the 2 database containers on different physical machines. All your data is stored redundantly in 2 identical copies. In case of a failure of a container or the underlying physical machine, Zerops automatically disconnects the failed container from the cluster, creates a new container and syncs all data from the remaining copy. Finally the broken container is automatically deleted.

[Learn more] about specific behaviour and technical limitations of the KeyDB cluster.

#### Single container

A KeyDB database installed in a single container is created. Useful for non-essential data or dev environments.

:::caution
Your data is stored only in a single container. If the container or the underlying physical machine fails, your data since the last backup are lost. Zerops doesn't provide any automatic repairs of single node KeyDB services.
:::

:::info
The KeyDB service mode is fixed after the service is created. It can't be changed later.
:::

### Choose KeyDB version

Following KeyDB versions are currently supported:

<UnorderedList data={data.keydb.readable} />

### Set auto scaling configuration

Zerops scales the KeyDB services automatically by raising or lowering the hardware resources of each database container.

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

**Dedicated**
The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

Choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

For most cases, the default parameters will work without issues. If you need to limit the cost of the KeyDB service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient KeyDB performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](/keydb/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

:::info
You can change the auto scaling parameters later.
:::

:::tip
[Learn more](/keydb/how-to/scale) about KeyDB auto scaling.
:::

## Create KeyDB using zCLI

zCLI is the Zerops command-line tool. To create a new KeyDB service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](#create-a-project-description-file)
3. Create a project and a KeyDB service

### Create a project description file

Zerops uses a yaml format file to describe the project infrastructure.

#### Basic example

Create a directory `my-project`. Create a `description.yaml` file inside the directory with the following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: keydb1
    # service type and version number in keydb@6 format
    type: keydb@6
    # mode of operation "HA"/"NON_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain one KeyDB service in the [single container](#single-container) mode with default [auto scaling](/keydb/how-to/scale) configuration. Hostname will be set to `keydb1`.

#### Full example

Create a directory `my-project`. Create a `description.yaml` file inside the directory with the following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a KeyDB database
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # first service hostname
    hostname: keydb1
    # service type and version number in keydb@6 format
    type: keydb@6
    # mode of operation "HA"/"NON_HA"
    mode: HA
    # optional: vertical auto scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
  - # second service hostname
    hostname: keydb2
    # service type and version number in keydb@6 format
    type: keydb@6
    # mode of operation "HA"/"non_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain two KeyDB services.

The hostname of the first service will be set to `keydb1`. The [high availability](#highly-available) mode will be chosen and the custom [auto scaling configuration](/keydb/how-to/scale) will be set.

The hostname of the second service will be set to `keydb2`. The [single container](#single-container) mode will be chosen and the default [auto scaling configuration](/keydb/how-to/scale) will be set.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Limitations</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>name</strong></td>
      <td className="w-fit">The name of the new project. Duplicates are allowed.</td>
      <td className="w-fit"></td>
    </tr>
    <tr>
      <td className="w-fit"><strong>description</strong></td>
      <td className="w-fit"><strong>Optional.</strong> Description of the new project.</td>
      <td className="w-fit">Maximum 255 characters.</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>tags</strong></td>
      <td className="w-fit"><strong>Optional.</strong> One or more string tags. Tags do not have a functional meaning, they only provide better orientation in projects.</td>
      <td className="w-fit"></td>
    </tr>
  </tbody>
</table>


At least one service in `services:` section is required. You can create a project with multiple services. The example above contains only KeyDB services but you can create a `description.yaml` with [different types] of services.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>hostname</strong></td>
      <td className="w-fit">
        The unique service identifier.
         
        The hostname of the new database will be set to the `hostname` value.
         
        <strong>Limitations:</strong>
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>type</strong></td>
      <td className="w-fit">
        Specifies the service type and version.
        <br />
        See what [KeyDB service types](/references/import-yaml/type-list#database-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>mode</strong></td>
      <td className="w-fit">
        Defines the operation mode of KeyDB service.
         
        <strong>HA</strong>
        <br />
        Creates a KeyDB cluster with 2 database containers. This mode is suited for production.
         
        Zerops always keeps the 2 database containers on different physical machines. All your data is stored redundantly in 2 identical copies. In case of a failure of a container or the underlying physical machine, Zerops automatically disconnects the failed container from the cluster, creates a new container and syncs all data from the remaining copy. Finally the broken container is automatically deleted.
         
        <strong>NON_HA</strong>
        <br />
        Zerops will create a KeyDB database installed in a single container. Useful for non-essential data or dev environments.
         
        Your data is stored only in a single container. If the container or the underlying physical machine fails, your data since the last backup are lost. Zerops doesn't provide any automatic repairs of single node KeyDB services.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>verticalAutoscaling</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Defines <a href="/keydb/how-to/create#set-auto-scaling-configuration">custom vertical auto scaling parameters</a>.
        <br />
        All verticalAutoscaling attributes are optional. Not specified attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- cpuMode</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minCpu/maxCpu</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minCpu or maxCpu in CPU cores (integer).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minRam/maxRam</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minRam or maxRam in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minDisk/maxDisk</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minDisk or maxDisk in GB (float).
      </td>
    </tr>
  </tbody>
</table>

:::caution
The KeyDB service **hostname** and **mode** are fixed after the service is created. They can't be changed later.
:::

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>
### Add KeyDB service to an existing project

#### Example

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```bash
# array of project services
services:
  -
    # service name
    hostname: keydb1
    # service type and version number in keydb@6 format
    type: keydb@6
    # mode of operation "HA"/"NON_HA"
    mode: NON_HA
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one KeyDB service in the [single container mode](#single-container) with default [auto scaling](/keydb/how-to/scale) configuration will be added to your project. Hostname of the new service will be set to `keydb1`.

The content of the `services:` section of `import.yaml` is identical to the [project description file](#create-a-project-description-file). The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the `import.yaml` file is 100 kB.



## Delete KeyDB service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete KeyDB using zCLI

zCLI is the Zerops command-line tool. To delete the KeyDB service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



## How to use a database management tool on your workstation

Do you already use a database management tool that supports KeyDB on your workstation? Connect it securely to KeyDB from your local workspace via Zerops VPN.

Zerops VPN client is included into zCLI, the Zerops command-line tool. To start the VPN connection, read [how to connect to KeyDB remotely](/keydb/how-to/connect#connect-to-keydb-in-zerops-remotely).

:::caution
Do not use SSL/TLS protocols when connecting to KeyDB over VPN. Zerops KeyDB is not configured to support these protocols. The security is assured by the VPN.
:::

## How to use KeyDB Client CLI on your workstation

If you use the [keydb-cli ↗](https://docs.keydb.dev/docs/keydbcli/) command-line client to manage your KeyDB on your local workspace, you can connect it securely to KeyDB via Zerops VPN.

Zerops VPN client is included into zCLI, the Zerops command-line tool. To start the VPN connection, read [how to connect to KeyDB remotely](/keydb/how-to/connect#connect-to-keydb-in-zerops-remotely).

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/keydb/how-to/connect#connect-to-keydb-in-zerops-remotely) are available when connected through VPN. To connect to KeyDB in Zerops you have to copy the [access details](/keydb/how-to/connect#connect-to-keydb-in-zerops-remotely) manually from Zerops GUI.

Use `keydb-cli` command to connect to KeyDB in Zerops:

```sh
keydb-cli -h [hostname]
```

:::caution
Do not use SSL/TLS protocols when connecting to KeyDB over VPN. Zerops KeyDB is not configured to support these protocols. The security is assured by the VPN.
:::




Zerops performs an automated scaling of hardware resources required to run your database based on its usage. If the current use of your database does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your database is under heavy load or needs to store more data, then auto scaling increases the resources for the database to make sure it runs smoothly.

## Configure auto scaling

To change the auto scaling settings go to the KeyDB service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <img
    src="/img/screenshots/keydb_autoscaling.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

### CPU Mode

**Shared**
Your database gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your database gets is depended on other applications running on the same CPU core. At best case scenario your database gets 10/10 of CPU core power and 1/10 at worst case scenario.

**Dedicated**
The CPU core is dedicated to your database.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

Choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

For most cases, the default parameters will work without issues. If you need to limit the cost of the KeyDB service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient KeyDB performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](/keydb/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your database needs.
:::

:::tip
[Learn more](/keydb/how-to/scale) about KeyDB auto scaling.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your database starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your database.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your database doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

The default minimum free RAM is preset according to the database type and version. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your database need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 62.5 MB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the database is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each KeyDB service. Zerops will never scale above the entered values. If your database is in [highly available mode], maximal resources are identical for all containers of the KeyDB service.

### Not enough resources to scale up

Zerops moves a container between physical machines only if there are not enough resources on the current physical machine to scale the container up. When this happens the behaviour is different for [highly available](/keydb/how-to/create#highly-available) and [single container](/keydb/how-to/create#single-container) mode.

### Automatic scale down

When the database no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the database from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal scaling

Zerops provides KeyDB service in two modes: [Highly available](/keydb/how-to/create#highly-available) and [Single container](/keydb/how-to/create#single-container). The KeyDB service mode is chosen when creating a new service and cannot be changed later.

Zerops doesn't scale KeyDB service horizontally, it means no containers are added or removed from the database cluster. Only in case of a failure of a container or the underlying physical machine, Zerops automatically replaces the broken container with a new one.

## Monitor database resources

Zerops provides information about how much hardware resources the KeyDB service is currently using. Go to KeyDB service detail in Zerops GUI and select **Service dashboard & database containers** in the left menu. Zerops also provides the history of resource usage.




[KeyDB ↗](https://docs.keydb.dev/) is a fully open source database, a faster drop-in alternative to Redis. It offers enhanced performance, multithreading capabilities, and maintains full compatibility with Redis clients and APIs.

:::important
While KeyDB is available on Zerops, please note that KeyDB development has not been very active recently. For new Redis-compatible deployments, we recommend considering [Valkey](/valkey/overview) as the preferred alternative due to its active development and ongoing support.
:::

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/keydb/how-to/create',
      label: 'Create KeyDB service',
      customProps: {
        icon: Icons['computer-desktop'],
        description:
          'Start with creating a KeyDB service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: '/keydb/how-to/create#highly-available',
      label: 'HA mode',
      customProps: {
        icon: Icons['squares-plus'],
        description: 'Learn how to setup your database to be production-ready with high availability.',
      },
    },
    {
      type: 'link',
      href: '/keydb/how-to/create#full-example',
      label: 'Import config file',
      customProps: {
        icon: Icons['puzzle'],
        description: 'Use an example config file to import your KeyDB service.',
      },
    },
  ]}
/>

### Connect to KeyDB service

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/keydb/how-to/manage',
      label: 'Manage KeyDB database',
      customProps: {
        icon: Icons['circle-stack'],
      },
    },
    {
      type: 'link',
      href: '/keydb/how-to/connect#connect-to-keydb-from-runtime-services-of-the-same-project',
      label: 'Connect from the same project',
      customProps: {
        icon: Icons['link'],
      },
    },
    {
      type: 'link',
      href: '/keydb/how-to/connect#connect-to-keydb-in-zerops-remotely',
      label: 'Connect remotely',
      customProps: {
        icon: Icons['globe-europe'],
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your KeyDB service securely with Zerops VPN.',
      },
    },
  ]}
/>

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*



<FAQ>
  <FAQItem question="Sample Question">sample answer</FAQItem>
</FAQ>




This quick start allows you to get hands-on experience of Zerops by running a predefined application consisting of a MariaDB service and a runtime service that handles the SQL queries.

If you are already familiar with Zerops and you are interested in more detailed guides for your own MariaDB service, feel free to head straight to the [How to](/mariadb/how-to/create) section.

## Guides

We have created repositories, _recipes_, containing a simple web application and a MariaDB service, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics with one-service app.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=mariadb&type=all&language=&sort=',
      label: 'All MariaDB recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspired.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



Zerops provides data backup for certain services, including MariaDB. The data is stored in S3 storage.

## Frequency and volume

By default, your data is backed up automatically **every day** at 00:00:00 UTC, unless you update your settings:

### In GUI

Following changes are available in Zerops GUI. Go to the service detail and choose **Backups List & Configuration** section in the left menu.

- do a one-time backup of your data
- change time of your automatic backup
- turn off backing up your data completely
- view all of your backups
- download a backup
- delete a backup

### Via API

- do a one-time backup of your data
- change time of your automatic backup

### Limits

- Each backup is stored for a maximum period of **1 month**.
- For each **service** a maximum of **100 backups** is stored.
- For each **project** a maximum of **25 GiB** of backup volume is stored. Only full backups are stored, the backup that exceeds the limit by its part is not stored.

#### Examples

1. If you backup your data every day, and the total volume is less than 25 GiB, the maximum number of backups is ~30 for the last month. A new backup is stored every day (with the oldest one being deleted), unless you exceed the 25 GiB limit.
2. If you backup your data every hour, and the total volume is less than 25 GiB, the total number of backups is 100 for the last 100 hours. A new backup is stored every hour (with the oldest one being deleted), unless you exceed the 25 GiB limit.
3. If you backup your data every hour, and your backups exceed 25 GiB after 50 hours, the total number of backups is 50, unless you delete some of your backups or wait the oldest one is older than 1 month.

## Persistence

When deleting a service or a project:
* Project deletion affects backups of **all** services within that project
* Backups remain accessible for 7 days
* After 7 days, all backups are permanently removed

## Security

All backups are stored in a separate S3 instance, isolated from the instance accessible by users.

A unique encryption key is created for every project and each backup of the project is encrypted with this key.



## Default MariaDB database and user

Zerops creates a default database and a default user automatically when a new MariaDB service is [created](/mariadb/how-to/create).

#### Database

The default database name is identical to the service hostname. The default encoding is set to `utf8mb4`.

#### DB user

Default user name is identical to the service hostname. Default user password is generated randomly. You will find the password in [Zerops GUI](/mariadb/how-to/connect#copy-access-details-from-zerops-gui) or you can use the [environment variable](#use-mariadb-environment-variables).

:::info
Zerops creates a second DB user: `zps` for maintenance reasons with full privileges. Do not delete, change the password or remove privileges from this user, it will disrupt Zerops ability to maintain the database cluster.
:::

## Copy access details from Zerops GUI

You will find the MariaDB access details under the **Access details** button in the project dashboard page.

{/*TODO screenshot (Access detail popover)*/}

The same information is available in the service detail page in the left menu under the **Peek access details** button.

### MariaDB access parameters:

| Parameter             | Description                                                                                                                          |
| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------ |
| **Hostname**          | The service hostname specified when the MariaDB service was created.                                                                 |
| **Port**              | **3306**<br/>This port is fixed for all MariaDB services and cannot be customized.                                                   |
| **User**              | Zerops creates a database user automatically when the service is created. The user name is always identical to the service hostname. |
| **Password**          | Zerops sets a random password when the service is created.                                                                           |
| **Connection string** | The connection string for MariaDB service is:<br/>`mysql://${user}:${password}@{hostname}:3306`                                      |

## Connect to MariaDB from runtime services of the same project

Projects in Zerops represent a group of one or more services. Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its internal port.

{/*TODO image (project example diagram)*/}

#### Example

To connect to MariaDB `database1` service, set

```
host = database1
user = database1
password = **********
```

You will find the password under the [**Access details**](/mariadb/how-to/connect#copy-access-details-from-zerops-gui) button in Zerops GUI.

:::caution
Do not use SSL/TLS protocols when connecting to MariaDB from other runtime services in the same project. Zerops MariaDB is not configured to support these protocols. The security is assured by the project private network. Due to security reasons Zerops doesn't allow exposing MariaDB service to the internet.
:::

## Use MariaDB environment variables

Zerops creates default environment variables for each MariaDB service to help you with connection from runtime services in the same project. To avoid the need to copy database access parameters manually, use environment variables in your [runtime service].

### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Example

To access the `connectionString` env variable of the `mariadb1` service, use `mariadb1_connectionString` as the env variable key.
To access the `password` env variable of the `mariadb2` service, use `mariadb2_password` as the env variable key.

### MariaDB environment variables

List of service environment variables is available in Zerops GUI. Go to a MariaDB service detail and choose **Environment variables** in the left menu.

{/*TODO screenshot (Service env variables table page in the MariaDB detail)*/}

Zerops creates following environment variables when the MariaDB service is created:

| Variable              | Description                                                                                                                                                                                                                                                                                                                                                       |
| --------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Hostname**          | The service hostname specified when the MariaDB service was created.                                                                                                                                                                                                                                                                                              |
| **Port**              | **3306**<br/>This port is fixed for all MariaDB services and cannot be customized.                                                                                                                                                                                                                                                                                |
| **projectId**         | ID of the project. Generated by Zerops.                                                                                                                                                                                                                                                                                                                           |
| **serviceId**         | ID of the MariaDB service. Generated by Zerops.                                                                                                                                                                                                                                                                                                                   |
| **Connection string** | The connection string for MariaDB service is:<br/>`mysql://${user}:${password}@{hostname}:3306`<br/><br/>Connection string contains [references](/mariadb/how-to/connect#mariadb-access-parameters) to `user` and `password` variables. Each time the `user` or `password` variable is updated, the `connectionString` variable is automatically updated as well. |
| **User**              | Zerops creates a database user automatically when the service is created. The user name is always identical to the service hostname.                                                                                                                                                                                                                              |
| **Password**          | Zerops sets a random password when the service is created.                                                                                                                                                                                                                                                                                                        |

:::caution
When you change the value of the password env variable, only the env variable is updated, not the actual password of the MariaDB user. You have to update the password of the database user manually.
:::
:::caution
When you change the password of the default MariaDB user in the database, the new password is not synchronised to the password env variable. You have to update the `password` env variable manually.
:::

You can create own custom [environment variables](/features/env-variables) for the MariaDB service in Zerops GUI and use them in the same way as the default variables.

## Connect to MariaDB in Zerops remotely

:::caution
Due to security reasons Zerops doesn't allow exposing MariaDB service directly to the internet.
:::

### Start VPN connection

You can securely connect to MariaDB from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)

### Access MariaDB through VPN

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](#use-mariadb-environment-variables) are available when connected through VPN. To connect to MariaDB in Zerops you have to copy the [access details](#copy-access-details-from-zerops-gui) manually from Zerops GUI.

:::caution
Do not use SSL/TLS protocols when connecting to MariaDB over VPN. Zerops MariaDB is not configured to support these protocols. The security is assured by the VPN.
:::

### Stop VPN connection

[Stop the Zerops VPN](/references/vpn#stop-vpn) in zCLI.

### Connect to MariaDB from another Zerops project

All services of the same project share a **dedicated private network**. You can use the service hostname to connect from one service to another within the same project.

Different Zerops projects have no special connection. They can communicate with each other only via the internet. If you need to connect to a MariaDB service in a Zerops project from a runtime service in another project, you need to use the [Zerops VPN](#access-mariadb-through-vpn). Due to security reasons Zerops doesn't allow exposing MariaDB service directly to the internet.



Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart MariaDB service in Zerops GUI

To stop the MariaDB service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)*/}

To start the stopped MariaDB service choose the **Start** item from the same menu.

To restart the MariaDB service choose the **Restart** item from the same menu.

## Stop and start MariaDB using zCLI

zCLI is the Zerops command-line tool. To stop and start the MariaDB service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and services to choose from.
:::




MariaDB is the open source relational database loved by developers all over the world. Created by MySQL’s original developers, MariaDB is compatible with MySQL and guaranteed to stay open source forever.

Zerops provides the MariaDB Community Server edition as a managed database service.

## Create MariaDB using Zerops GUI

First, set up a project in Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu in the **Services** block. Then add a new MariaDB service:

<Video
  src="/vids/services/mariadb.webm"
  type="video/webm"
/>

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Limitations</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>hostname</strong></td>
      <td className="w-fit">A unique service identifier like `mariadb`,`sql`, `db` etc.</td>
      <td className="w-fit">
        <br />- duplicate services with the same name in the same project are forbidden
        <br />- maximum 25 characters
        <br />- must contain only lowercase ASCII letters (a-z) or numbers (0-9)
      </td>
    </tr>
  </tbody>
</table>


:::caution
The hostname is fixed after the service is created. It can't be changed later.
:::

### Choose MariaDB service mode

Zerops provides MariaDB service in two modes: **Highly available** and **Single container**.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling7.png"
    darkImage="/img/screenshots/scaling7.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

#### Highly available

Creates a MariaDB cluster with **3 database containers** and **2 free database proxies**.
This mode is suited for production.

Zerops always keeps the 3 database containers on different physical machines. All your data is stored redundantly in 3 identical copies. In case of a failure of a container or the underlying physical machine, Zerops automatically disconnects the failed container from the cluster, creates a new container and syncs all data from the remaining 2 copies. Finally the broken container is automatically deleted.

[Learn more](/mariadb/tech-details/cluster) about specific behaviour and technical limitations of the MariaDB cluster.

#### Single container

A MariaDB database installed in a single container is created. Useful for non-essential data or dev environments.

:::caution
Your data is stored only in a single container. If the container or the underlying physical machine fails, your data since the last backup are lost. Zerops doesn't provide any automatic repairs of single node MariaDB services.
:::

:::info
The MariaDB service mode is fixed after the service is created. It can't be changed later.
:::

### Choose MariaDB version

Following MariaDB versions are currently supported:

<UnorderedList data={data.mariadb.readable} />

### Set auto scaling configuration

Zerops scales the MariaDB services automatically by raising or lowering the hardware resources of each database container.

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

**Dedicated**
The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

Choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable resources={{
  ram: {
    min: '0.25 GB',
  }
}} />

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Resources Type</strong></th>
      <th className="w-fit"><strong>Minimum resource</strong></th>
      <th className="w-fit"><strong>Maximum resource</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>CPU cores</strong></td>
      <td className="w-fit">1</td>
      <td className="w-fit">5</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>RAM</strong></td>
      <td className="w-fit">0.5 GB</td>
      <td className="w-fit">32 GB</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>Disk</strong></td>
      <td className="w-fit">1 GB</td>
      <td className="w-fit">100 GB</td>
    </tr>
  </tbody>
</table>

For most cases, the default parameters will work without issues. If you need to limit the cost of the MariaDB service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient MariaDB performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](/mariadb/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

:::info
You can change the auto scaling parameters later.
:::

:::tip
[Learn more](/mariadb/how-to/scale) about MariaDB auto scaling.
:::

## Create MariaDB using zCLI

zCLI is the Zerops command-line tool. To create a new MariaDB service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](#create-a-project-description-file)
3. Create a project and a MariaDB service

### Create a project description file

Zerops uses a yaml format file to describe the project infrastructure.

#### Basic example

Create a directory `my-project`. Create a `description.yaml` file inside the directory with the following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: mariadb1
    # service type and version number in mariadb@{version} format
    type: mariadb@10.4
    # mode of operation "HA"/"NON_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain one MariaDB 10.4 service in the [single container](#single-container) mode with default [auto scaling](/mariadb/how-to/scale) configuration. Hostname will be set to `mariadb1`.

#### Full example

Create a directory `my-project`. Create a `description.yaml` file inside the directory with the following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a MariaDB database
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # first service hostname
    hostname: mariadb1
    # service type and version number in mariadb@{version} format
    type: mariadb@10.4
    # mode of operation "HA"/"NON_HA"
    mode: HA
    # optional: vertical auto scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
  - # second service hostname
    hostname: mariadb2
    # service type and version number in mariadb@{version} format
    type: mariadb@10.4
    # mode of operation "HA"/"non_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain two MariaDB 10.4 services.

The hostname of the first service will be set to `mariadb1`. The [high availability](#highly-available) mode will be chosen and the custom [auto scaling configuration](/mariadb/how-to/scale) will be set.

The hostname of the second service will be set to `mariadb2`. The [single container](#single-container) mode will be chosen and the default [auto scaling configuration](/mariadb/how-to/scale) will be set.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Limitations</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>name</strong></td>
      <td className="w-fit">The name of the new project. Duplicates are allowed.</td>
      <td className="w-fit"></td>
    </tr>
    <tr>
      <td className="w-fit"><strong>description</strong></td>
      <td className="w-fit"><strong>Optional.</strong> Description of the new project.</td>
      <td className="w-fit">Maximum 255 characters.</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>tags</strong></td>
      <td className="w-fit"><strong>Optional.</strong> One or more string tags. Tags do not have a functional meaning, they only provide better orientation in projects.</td>
      <td className="w-fit"></td>
    </tr>
  </tbody>
</table>


At least one service in `services:` section is required. You can create a project with multiple services. The example above contains only MariaDB services but you can create a `description.yaml` with [different types] of services.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Limitations</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>hostname</strong></td>
      <td className="w-fit">A unique service identifier like `mariadb`,`sql`, `db` etc.</td>
      <td className="w-fit">
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>type</strong></td>
      <td className="w-fit">Specifies the service type and version.</td>
      <td className="w-fit">
        See what [MariaDB service types](/references/import-yaml/type-list#database-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>mode</strong></td>
      <td className="w-fit">Defines the operation mode of MariaDB service.</td>
      <td className="w-fit">
        <b>HA</b>
        <br />
        Zerops will create a MariaDB cluster with 3 database containers and 2
        free database proxies. This mode is suited for production.
        <br />
        <br />
        Zerops always keep the 3 database containers on different physical
        machines. All your data is stored redundantly in 3 copies. In case of a
        failure of a container or the underlying physical machine, Zerops
        automatically disconnects the failed container from the cluster, creates
        a new container and syncs all data from the remaining 2 copies. Finally
        the broken container is automatically deleted.
        <br />
        <br />
        <b>NON_HA</b>
        <br />
        Zerops will create a MariaDB database installed in a single container.
        Useful for non-essential data or dev environments.
        <br />
        <br />
        Your data is stored only in a single container. If the container or the
        underlying physical machine fails, your data since the last backup are
        lost. Zerops doesn't provide any automatic repairs of single node
        MariaDB services.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>verticalAutoscaling</strong></td>
      <td className="w-fit">Defines <a href="/mariadb/how-to/create#set-auto-scaling-configuration">custom vertical auto scaling parameters</a></td>
      <td className="w-fit">
        All verticalAutoscaling attributes are optional. Not specified
        attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong> - cpuMode</strong></td>
      <td className="w-fit">Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`</td>
      <td className="w-fit"></td>
    </tr>
    <tr>
      <td className="w-fit"><strong> - minCpu/maxCpu</strong></td>
      <td className="w-fit">Set the minCpu or maxCpu in CPU cores (integer).</td>
      <td className="w-fit"></td>
    </tr>
    <tr>
      <td className="w-fit"><strong> - minRam/maxRam</strong></td>
      <td className="w-fit">Set the minRam or maxRam in GB (float).</td>
      <td className="w-fit"></td>
    </tr>
    <tr>
      <td className="w-fit"><strong> - minDisk/maxDisk</strong></td>
      <td className="w-fit">Set the minDisk or maxDisk in GB (float).</td>
      <td className="w-fit"></td>
    </tr>
  </tbody>
</table>

:::caution
The MariaDB service **hostname** and **mode** are fixed after the service is created. They can't be changed later.
:::

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>

### Add MariaDB service to an existing project

#### Example

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```bash
# array of project services
services:
  -
    # service name
    hostname: mariadb1
    # service type and version number in mariadb@{version} format
    type: mariadb@10.4
    # mode of operation "HA"/"NON_HA"
    mode: NON_HA
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one MariaDB 10.4 service in the [single container mode](#single-container) with default [auto scaling](/mariadb/how-to/scale) configuration will be added to your project. Hostname of the new service will be set to `mariadb1`.

The content of the `services:` section of `import.yaml` is identical to the [project description file](#create-a-project-description-file). The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the `import.yaml` file is 100 kB.



## Delete MariaDB service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete MariaDB using zCLI

zCLI is the Zerops command-line tool. To delete the MariaDB service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



## Use Adminer to export or import data

[Adminer ↗](https://www.adminer.org) is an open source full-featured database management tool written in PHP.

1. [Install Adminer to Zerops](/mariadb/how-to/manage#how-to-install-adminer-to-zerops)
2. Use Adminer standard export or import functions

## Use phpMyAdmin to export or import data

[phpMyAdmin ↗](https://www.phpmyadmin.net) is a free software tool written in PHP, intended to handle the administration of MariaDB over the Web.

1. [Install phpMyAdmin to Zerops](/mariadb/how-to/manage#how-to-install-phpmyadmin-to-zerops)
2. Use phpMyAdmin standard export or import functions

## Use a database management tool on your workstation to export or import data

Do you already use a database management tool that supports MariaDB on your workstation? Connect it securely to MariaDB from your local workspace via Zerops VPN.

Zerops VPN client is included into zCLI, the Zerops command-line tool. To start the VPN connection, read [how to connect to MariaDB remotely](/mariadb/how-to/connect#connect-to-mariadb-in-zerops-remotely).
:::caution
Do not use SSL/TLS protocols when connecting to MariaDB over VPN. Zerops MariaDB is not configured to support these protocols. The security is assured by the VPN.
:::

Once the connection to MariaDB is established, use the standard export or import functions of your favourite management tool.

## Use mysql CLI to export or import data

If you are using the [mysql ↗](https://dev.mysql.com/doc/refman/8.1/en/mysql.html) command-line client to manage your MariaDB on your local workspace, you can connect it securely to MariaDB via Zerops VPN.

Zerops VPN client is included into zCLI, the Zerops command-line tool. To start the VPN connection, read [how to connect to MariaDB remotely](/mariadb/how-to/connect#connect-to-mariadb-in-zerops-remotely).

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/mariadb/how-to/connect#use-mariadb-environment-variables) are available when connected through VPN. To connect to MariaDB in Zerops you have to copy the [access details](/mariadb/how-to/connect#connect-to-mariadb-in-zerops-remotely) manually from Zerops GUI.

Use [mysql ↗](https://dev.mysql.com/doc/refman/8.1/en/mysql.html) command to connect to MariaDB in Zerops:

```sh
mysql -h [hostname] -u [user] -p [password] [database_name]
```

:::caution
Do not use SSL/TLS protocols when connecting to MariaDB over VPN. Zerops MariaDB is not configured to support these protocols. The security is assured by the VPN.
:::

To export your database data and structure, use the [mysqldump ↗](https://dev.mysql.com/doc/refman/8.1/en/mysqldump.html) command.

```sh
mysqldump -h [hostname] -u [user] –p [password] [database_name] > dumpfilename.sql
```

To import your database data and structure, use the `mysql` command.

```sh
mysql -h [hostname] -u [user] –p [password] [database_name] < dumpfilename.sql
```



## Default database and user

Zerops creates a default database and a default user automatically when a new MariaDB service is [created](/mariadb/how-to/create).

#### Database

The default database name is identical to the service hostname. The default encoding is set to `utf8mb4`.

#### DB user

Default user name is identical to the service hostname. Default user password is generated randomly. You will find the password in [Zerops GUI](/mariadb/how-to/connect#copy-access-details-from-zerops-gui) or you can use the [environment variable](/mariadb/how-to/connect#use-mariadb-environment-variables).

:::info
Zerops creates a second DB user: `zps` for maintenance reasons with full privileges. Do not delete, change the password or remove privileges from this user, it will disrupt Zerops ability to maintain the database cluster.
:::

## How to install Adminer to Zerops

[Adminer ↗](https://www.adminer.org) is a open source full-featured database management tool written in PHP.

### Single-click installation

To install Adminer into your project, open your project in Zerops GUI and select **import services** in the left menu.

Copy the following yaml file into the text area and start the import:

```yaml
services:
  - # Service will be accessible through zCLI VPN under: http://adminer
    hostname: adminer
    # Type and version of service used.
    type: php-apache@8.0+2.4
    # Whether the service will be run on one or multiple containers.
    # Since this is a utility service, using a single container is fine.
    minContainers: 1
    maxContainers: 1
    # Folder name used as the root of the publicly accessible web server content.
    documentRoot: public
    # Link to Zerops repository that contains Adminer code with Zerops build and deploy instructions.
    buildFromGit: https://github.com/zeropsio/recipe-adminer@main
```

When the import is finished, Adminer will be running as a PHP service in your project.

## How to access Adminer

### Use Zerops VPN

By default Adminer service is private and is accessible from your local workstation over VPN.

You can securely connect to MariaDB from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn)
3. Type `http://adminer` into your browser

:::caution
Do not use https when connecting to Adminer via VPN.
:::

### Enable public access

You can enable the public access to the Adminer service via the [Zerops subdomain].

Or you can configure the [Public routing] on the Adminer service to make it accessible on your own domain.

## How to install phpMyAdmin to Zerops

[phpMyAdmin ↗](https://www.phpmyadmin.net) is a free software tool written in PHP, intended to handle the administration of MariaDB over the Web.

### Single-click installation

To install phpMyAdmin into your project, open your project in Zerops GUI and select **import services** in the left menu.

Copy the following yaml file into the text area and start the import:

```yaml
services:
  - # Service will be accessible through zCLI VPN under: http://phpmyadmin
    hostname: phpmyadmin
    # Type and version of service used.
    type: php-apache@8.1+2.4
    # Whether the service will be run on one or multiple containers.
    # Since this is a utility service, using a single container is fine.
    minContainers: 1
    maxContainers: 1
    # Folder name used as the root of the publicly accessible web server content.
    documentRoot: public
    # Link to Zerops repository that contains Adminer code with Zerops build and deploy instructions.
    buildFromGit: https://github.com/zeropsio/recipe-phpmyadmin@main
```

When the import is finished, phpMyAdmin will be running as a PHP service in your project.

## How to access phpMyAdmin

### Use Zerops VPN

By default phpMyAdmin service is private and is accessible from your local workstation over VPN.

You can securely connect to MariaDB from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn)
3. Type `http://phpmyadmin` into your browser

:::caution
Do not use https when connecting to phpMyAdmin via VPN.
:::

### Enable public access

You can enable the public access to the phpMyAdmin service via the [Zerops subdomain].

Or you can configure the [Public routing] on the phpMyAdmin service to make it accessible on your own domain.

## How to use a database management tool on your workstation

Do you already use a database management tool that supports MariaDB on your workstation? Connect it securely to MariaDB from your local workspace via Zerops VPN.

Zerops VPN client is included into zCLI, the Zerops command-line tool. To start the VPN connection, read [how to connect to MariaDB remotely](/mariadb/how-to/connect#connect-to-mariadb-in-zerops-remotely).

:::caution
Do not use SSL/TLS protocols when connecting to MariaDB over VPN. Zerops MariaDB is not configured to support these protocols. The security is assured by the VPN.
:::

## How to use mysql CLI on your workstation

If you use the [mysql ↗](https://dev.mysql.com/doc/refman/8.1/en/mysql.html) command-line client to manage your MariaDB on your local workspace, you can connect it securely to MariaDB via Zerops VPN.

Zerops VPN client is included into zCLI, the Zerops command-line tool. To start the VPN connection, read [how to connect to MariaDB remotely](/mariadb/how-to/connect#connect-to-mariadb-in-zerops-remotely).

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/mariadb/how-to/connect#connect-to-mariadb-in-zerops-remotely) are available when connected through VPN. To connect to MariaDB in Zerops you have to copy the [access details](/mariadb/how-to/connect#connect-to-mariadb-in-zerops-remotely) manually from Zerops GUI.

Use `mysql` command to connect to MariaDB in Zerops:

```sh
mysql -h [hostname] -u [user] -p [password] [database_name]
```

:::caution
Do not use SSL/TLS protocols when connecting to MariaDB over VPN. Zerops MariaDB is not configured to support these protocols. The security is assured by the VPN.
:::




Zerops performs an automated scaling of hardware resources required to run your database based on its usage. If the current use of your database does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your database is under heavy load or needs to store more data, then auto scaling increases the resources for the database to make sure it runs smoothly.

## Configure auto scaling

To change the auto scaling settings go to the MariaDB service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling7.png"
    darkImage="/img/screenshots/scaling7.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### CPU Mode

**Shared**
Your database gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your database gets is depended on other applications running on the same CPU core. At best case scenario your database gets 10/10 of CPU core power and 1/10 at worst case scenario.

**Dedicated**
The CPU core is dedicated to your database.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

Choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable resources={{
  ram: {
    min: '0.25 GB',
  }
}} />

For most cases, the default parameters will work without issues. If you need to limit the cost of the MariaDB service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient MariaDB performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](/mariadb/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your database needs.
:::

:::tip
[Learn more](/mariadb/how-to/scale) about MariaDB auto scaling.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your database starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your database.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your database doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

The default minimum free RAM is preset according to the database type and version. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your database need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 0.125 GB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the database is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each MariaDB service. Zerops will never scale above the entered values. If your database is in [highly available mode], maximal resources are identical for all containers of the MariaDB service.

### Not enough resources to scale up

Zerops moves a container between physical machines only if there are not enough resources on the current physical machine to scale the container up. When this happens the behaviour is different for [highly available](/mariadb/how-to/create#highly-available) and [single container](/mariadb/how-to/create#single-container) mode.

### Automatic scale down

When the database no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the database from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal scaling

Zerops provides MariaDB service in two modes: [Highly available](/mariadb/how-to/create#highly-available) and [Single container](/mariadb/how-to/create#single-container). The MariaDB service mode is chosen when creating a new service and cannot be changed later.

Zerops doesn't scale MariaDB service horizontally, it means no containers are added or removed from the database cluster. Only in case of a failure of a container or the underlying physical machine, Zerops automatically replaces the broken container with a new one.

## Monitor database resources

Zerops provides information about how much hardware resources the MariaDB service is currently using. Go to MariaDB service detail in Zerops GUI and select **Service dashboard & database containers** in the left menu. Zerops also provides the history of resource usage.




[MariaDB ↗](https://mariadb.org/) is one of the most popular open source relational databases. It’s made by the original developers of MySQL and guaranteed to stay open source.

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/mariadb/how-to/create',
      label: 'Create MariaDB service',
      customProps: {
        icon: Icons['computer-desktop'],
        description: 'Start with creating a MariaDB service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: '/mariadb/how-to/create#highly-available',
      label: 'HA mode',
      customProps: {
        icon: Icons['squares-plus'],
        description: 'Learn how to setup your database to be production-ready.',
      },
    },
    {
      type: 'link',
      href: '/mariadb/how-to/create#full-example',
      label: 'Import config file',
      customProps: {
        icon: Icons['puzzle'],
        description: 'Use an example config file to import your own app.',
      },
    },
  ]}
/>

### Connect to MariaDB service

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/mariadb/how-to/manage',
      label: 'Manage users and databases',
      customProps: {
        icon: Icons['circle-stack'],
      },
    },
    {
      type: 'link',
      href: '/mariadb/how-to/connect#connect-to-mariadb-from-runtime-services-of-the-same-project',
      label: 'Connect from the same project',
      customProps: {
        icon: Icons['link'],
      },
    },
    {
      type: 'link',
      href: '/mariadb/how-to/connect#connect-to-mariadb-in-zerops-remotely',
      label: 'Connect remotely',
      customProps: {
        icon: Icons['globe-europe'],
      },
    },
  ]}
/>

### Others

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/mariadb/how-to/scale',
      label: 'Scale MariaDB service',
      customProps: {
        icon: Icons['adjustments'],
      },
    },
    {
      type: 'link',
      href: '/mariadb/how-to/export-import-data',
      label: 'Export and import data',
      customProps: {
        icon: Icons['arrow-down-tray'],
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/mariadb/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>



The following description applies only to the [highly available mode](/mariadb/how-to/create#highly-available) of the MariaDB service.

## Description of MariaDB cluster

MariaDB cluster in highly available mode contains 3 database containers and 2 free database proxies.

{/*TODO diagram [inspirace](https://mariadb.com/resources/blog/mariadb-maxscale-6-0-native-clustering/)*/}

#### 1 write node + 2 read nodes

Zerops always keeps the 3 database containers on different physical machines. A MariaDB cluster node is installed in each database container. First a writer node is started followed by 2 read nodes. All your data is stored redundantly in 3 identical copies.

If the container with one of the reader nodes fails, Zerops disconnects it from the MariaDB cluster. Zerops then creates a new container with a MariaDB read node inside, connects it to the cluster and starts the synchronisation of the data to the new node. Finally the broken container is deleted.

If the container with the writer node fails, Zerops disconnects it from the MariaDB cluster and one of the read nodes is automatically promoted to the writer node. Zerops creates a new container with a MariaDB read node inside, connects it to the cluster and starts the synchronisation of the data to the new node. Finally the broken container is deleted.

#### 2 database proxies

Zerops uses [MaxScale 2.5 ↗](https://mariadb.com/kb/en/maxscale/), this database proxy is optimised specifically for MariaDB. MaxScale database proxy understands the mysql protocol. It forwards all **write requests** to the writer node and all **read requests** to read nodes.

Zerops creates 2 containers with MaxScale database proxy and connects them to the database cluster in the highly available infrastructure. Zerops always keep the 2 database proxies on different physical machines.

If a container with the database proxy fails, Zerops starts a new container automatically. Database proxy doesn't contain any data therefore the start of the new database proxy is fast.

## Synchronous vs. Asynchronous replication

#### Synchronous replication

Synchronous replication guarantees that when a change happens on the write node, it is replicated on the read nodes synchronously. Synchronous replication uses a distributed locking which proved to be very slow. The data replication from the write node to the read nodes takes some time and the write transactions must wait until the changed data is successfully replicated to all database nodes. In case one of the database nodes is overloaded, the whole cluster becomes very slow.

#### Asynchronous replication

Asynchronous replication gives no guarantees about the delay between applying changes on the write node and the propagation of changes to all read nodes. The delay is usually very short but when one of the read containers is overloaded the delay can be longer. The main benefit of the asynchronous replication is the performance. Write transaction is completed when the write node successfully commits the transaction locally and writes it to the write-ahead log that prevents the loss of data.

The downside of the asynchronous replication is no guarantee that the read nodes will always return the current data. In some cases a `SELECT` query that quickly follows the previous `COMMIT` may return old data. As mentioned above, the database proxy forwards all read requests to read nodes. When the read node processes the `SELECT` query before the replication of the previous transaction is finished, old data is returned.

Zerops uses the asynchronous replication in MariaDB cluster.

## How to deal with situations when old data is returned

#### Use explicit transactions

MariaDB cluster returns old data most often when you use the `SELECT` query right after the `COMMIT` in the same algorithm. This problem can be solved by moving the `SELECT` query into the transaction. All queries inside a `BEGIN..COMMIT` transaction are always executed against the write node.

#### Enable synchronous checks for SELECT queries

For a critical read that must have the most up-to-date data use the `wsrep_sync_wait` option:

```sh
SET SESSION wsrep_sync_wait=1;
SELECT ...;
SET SESSION wsrep_sync_wait=0;
```

When the `wsrep_sync_wait=1` option is used, the read node will synchronise data from the write node before executing the query. The read node will wait until all updates from the write node that were committed before the `SELECT` query was received and only then executes the query.



The following description applies only to the [highly available mode](/mariadb/how-to/create#highly-available) of the MariaDB service.

#### InnoDB only

Only the InnoDB storage engine is supported.

#### Mandatory table primary key

All database tables should have a primary key. A multi-column primary key can also be used. `DELETE` operations are unsupported on tables without a primary key. Also, rows in tables without a primary key may appear in a different order on different nodes.

#### Limited locks support

No support for explicit locks, including `LOCK TABLES`, `FLUSH TABLES {explicit table list} WITH READ LOCK`, `GET_LOCK`, `RELEASE_LOCK`. These limitations can be overcome using transactions. Global locking operators like `FLUSH TABLES WITH READ LOCK` are supported.

#### Do not use local exports

Do not use `SELECT INTO OUTFILE` or `SELECT INTO DUMPFILE` commands. It will create a file on one of the database containers that will receive the request. Zerops doesn't support direct access into the MariaDB database containers so you won't be able to access the file. Learn more about [how to export and import MariaDB data](/mariadb/how-to/export-import-data).

[Full list of MariaDB cluster limitations ↗](https://mariadb.com/kb/en/mariadb-galera-cluster-known-limitations/)





As said, there is no need for coding yet, we have created multiple repositories, **_recipes_**, containing a PostgreSQL service with a simple web application. The repo will be used as a source from which the app will be built.

<CustomCard title="Feel free to deploy a recipe with Mariadb" emoji="🚀">
  Ghost is an open source blogging platform that can be used as a headless CMS.
  This recipe showcases how to properly setup and run Ghost on Zerops.

  <DeployButton link="ghost" badgeWidth="200" />
</CustomCard>

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)
2. Choose a recipe based on your desired technology and copy the content of the yaml config in a `README` file
3. In Zerops GUI, in the **Projects** box click on **Import a project** and paste the config.
4. Click on **Import project** and wait until all pipelines have finished.

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-nodejs',
      label: 'Node.js + PostgreSQL',
      customProps: {
        icon: Icons['nodejs'],
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-golang',
      label: 'Go + PostgreSQL',
      customProps: {
        icon: Icons['go'],
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-php',
      label: 'PHP + PostgreSQL',
      customProps: {
        icon: Icons['php'],
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-python',
      label: 'Python + PostgreSQL',
      customProps: {
        icon: Icons['python'],
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-dotnet',
      label: '.NET + PostgreSQL',
      customProps: {
        icon: Icons['dotnet'],
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-rust',
      label: 'Rust + PostgreSQL',
      customProps: {
        icon: Icons['rust'],
      },
    },
  ]}
/>

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://golang1-24-8080.prg1.zerops.app`.
2. Click on the `subdomain` URL to open it in a browser and you should see:

```
Entry added successfully with random data: f47ac10b-58cc-0372-8567-0e02b2c3d479. Total count: 1
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation, and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::




Choose from the technologies below and follow the guide:

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/nodejs/tutorial/runtime-sql',
      label: 'Node.js + PostgreSQL',
      customProps: {
        icon: Icons['nodejs'],
      },
    },
    {
      type: 'link',
      href: '/go/tutorial/runtime-sql',
      label: 'Go + PostgreSQL',
      customProps: {
        icon: Icons['go'],
      },
    },
    {
      type: 'link',
      href: '/php/tutorial/runtime-sql',
      label: 'PHP + PostgreSQL',
      customProps: {
        icon: Icons['php'],
      },
    },
    {
      type: 'link',
      href: '/python/tutorial/runtime-sql',
      label: 'Python + PostgreSQL',
      customProps: {
        icon: Icons['python'],
      },
    },
    {
      type: 'link',
      href: '/dotnet/tutorial/runtime-sql',
      label: '.NET + PostgreSQL',
      customProps: {
        icon: Icons['dotnet'],
      },
    },
    {
      type: 'link',
      href: '/rust/tutorial/runtime-sql',
      label: 'Rust + PostgreSQL',
      customProps: {
        icon: Icons['rust'],
      },
    },
  ]}
/>

:::tip
Have you got any additional question? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::




Deploy and manage Meilisearch on a fully managed infrastructure. Get instant access to fast, typo-tolerant search with zero operational overhead.

## Supported Versions

Currently supported Meilisearch versions:
<UnorderedList data={data.meilisearch.readable}/>

Import configuration version:
<UnorderedCodeList data={data.meilisearch.import}/>

## Service Configuration

Our Meilisearch implementation runs as a **single-node** setup, as Meilisearch does not currently support cluster configurations.

### Environment Modes

:::note
Environment mode affects the availability of certain features and can impact your application's security. Choose carefully based on your use case.
:::

#### Production Mode (Default)
- Optimized for performance and security
- Search Preview (Mini-dashboard) disabled
- Recommended for production deployments

#### Development Mode
- Includes Search Preview (Mini-dashboard)
- Enhanced debugging capabilities
- Suitable for development and testing

To switch between modes:
1. Navigate to the **Environment variables** section in the Meilisearch service detail and scroll to the **Generated Variables**
2. Set the `environment` variable to either:
   - `production` - for production mode (default)
   - `development` - for development mode with Mini-dashboard
3. Restart the service to apply changes

### API Key Management

The service provides three pre-configured API keys, each with specific access levels:

#### `masterKey`
- Root access to your Meilisearch instance
- Use only for initial setup and key management
- **Never expose in application code or frontend**

#### `defaultSearchKey`
- Read-only search operations across all indices
- Safe for frontend implementations
- **Can be exposed in client-side code**

#### `defaultAdminKey`
- Full administrative access to all indices
- For backend operations and index management
- **Keep secure in backend services only**

[Custom API keys](https://www.meilisearch.com/docs/reference/api/keys) provide fine-grained access control for specific use cases. For example, you might create:
- Search-only keys for specific indices
- Temporary keys with expiration dates
- Keys with restricted actions for third-party integrations

## Network Architecture & Access

### Access Methods

#### Public HTTPS Access
When enabled, access via [Zerops subdomain](/features/access#public-access-through-zerops-subdomain).

#### Internal Project Access
Services within the same project can reach Meilisearch directly:
```
http://{hostname}:7700
```

## Quick Start Example

Here's a minimal example of implementing search in a React application:

```javascript

const MEILISEARCH_URL = process.env.zeropsSubdomain;
const SEARCH_KEY = process.env.defaultSearchKey;

function SearchComponent() {
  const [results, setResults] = useState([]);

  const handleSearch = async (query) => {
    const response = await fetch(`${MEILISEARCH_URL}/indexes/products/search`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${SEARCH_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        q: query,
        limit: 10
      })
    });

    const data = await response.json();
    setResults(data.hits);
  };

  return (
    <div>
      <input
        type="search"
        onChange={(e) => handleSearch(e.target.value)}
        placeholder="Search products..."
      />
      <ul>
        {results.map(hit => (
          <li key={hit.id}>{hit.name}</li>
        ))}
      </ul>
    </div>
  );
}
```

## Best Practices

#### Security
- Store sensitive keys (`masterKey`, `defaultAdminKey`) securely in backend services
- Use `defaultSearchKey` or custom keys with minimal permissions for frontend
- Rotate custom keys periodically

#### Performance
- Implement debouncing for search inputs
- Cache frequently accessed search results
- Monitor response times and adjust index settings
- Use appropriate batch sizes for bulk operations

#### Error Handling
- Implement retry logic for temporary failures
- Set appropriate timeout values for your use case
- Handle rate limiting gracefully

## Troubleshooting

### Common Issues

#### Connection Problems
- Check if your instance is in the correct environment mode
- Ensure your API keys have the necessary permissions
- Confirm your service is running and healthy in the Zerops dashboard

#### Search Performance
- Review your index settings for optimal search performance
- Monitor your instance's resource usage
- Consider implementing client-side caching for frequent searches

#### API Key Issues
- Verify you're using the correct key type for your operation (search vs. admin)
- Check key permissions match your intended operations
- Ensure keys are properly formatted in your Authorization header
- Remember that master and admin keys should never be used in frontend code

## Learn More

- [Official Meilisearch Documentation](https://www.meilisearch.com/docs) - Comprehensive guide to all Meilisearch features and capabilities
- [API Reference](https://www.meilisearch.com/docs/reference/api/overview) - Detailed API specifications and usage examples

## Support

For advanced configurations or custom requirements:
- Join our [Discord community](https://discord.gg/zeropsio)
- Contact support via [email](mailto:support@zerops.io)




Zerops provides a fully managed [NATS](https://nats.io/) messaging system with automated scaling and zero infrastructure overhead, letting developers focus entirely on development.

## Supported Versions

Currently supported NATS version:
<UnorderedList data={data.nats.readable}/>

Import configuration version:
<UnorderedCodeList data={data.nats.import}/>

## Service Configuration

Our NATS implementation features optimized default settings designed for common use cases.

**Key configuration aspects** include:
- Standard protocol port `4222` for client connections
- HTTP monitoring interface `8222` for management
- Secure authentication with automatically generated credentials
- Optimized settings for performance and reliability

### JetStream Configuration

The service includes [JetStream](https://docs.nats.io/nats-concepts/jetstream) functionality **enabled by default**, providing persistent storage capabilities for your messaging workloads:
- **Memory store**: Up to 40GB for high-performance message caching
- **File store**: Up to 250GB for persistent storage
- **Regular sync intervals**: Ensures data durability and consistency

In HA deployments, data persistence is further enhanced with 1-minute sync intervals across all nodes, ensuring robust data durability and high availability.

This configuration provides a robust foundation for message persistence while balancing performance and reliability.

#### Disabling JetStream

If you don't need message persistence, you can disable JetStream by setting the `JET_STREAM_ENABLED` environment variable to `0` in your service configuration. This can be done:

- During service creation through the [import configuration](/references/import)
- In the Zerops GUI under service environment variables
- Via the [Zerops API](/references/api) when creating a new service

:::tip
Disabling JetStream may reduce resource usage when persistence isn't required for your application.
:::

### Deployment Modes

:::warning
Deployment mode is selected during service creation and cannot be changed later.
:::

#### Non-HA Mode
- Suitable for development and testing
- Data persistence not guaranteed during node failures
- Lower resource requirements

#### HA Mode
- Creates a multi-node NATS cluster
- Configures routes between cluster nodes automatically
- Implements [NATS clustering](https://docs.nats.io/running-a-nats-service/configuration/clustering) for high availability
- Provides improved reliability compared to non-HA deployments

### Authentication Management

Authentication credentials are automatically generated and managed by the platform. The system creates a default user (`zerops`) with a secure 16-character password. You can access these credentials through:
- The service access details in the Zerops GUI
- Environment variables in your service configuration:
  - `user` - Username for authentication (default: "zerops")
  - `password` - Generated secure password
  - `connectionString` - Complete connection string in the format `nats://${dbUser}:${dbPassword}@${hostname}:${port}`

## Health Monitoring

Zerops continuously monitors your NATS service health using built-in health checks:

- **HTTP Health Check**: The system checks the `/healthz` endpoint at port 8222
- **Self-Healing**: The platform automatically recovers unhealthy nodes when issues are detected

### Health Status

You can check the health status of your NATS service:

1. Through the Zerops GUI dashboard
2. By accessing the management interface at port `8222`

## Backup and Recovery

Zerops provides built-in backup functionality for your NATS JetStream data, ensuring your message streams and configurations can be safely preserved and restored when needed.

### Backup Process

Backups are created in `.tar.gz` format using the `nats` backup command. They are saved to local disk, compressed, streamed to backup storage, and then deleted locally.

For general information about backup frequency and storage limits, see our [Backup documentation](/features/backup).

## Support

For advanced configurations or custom requirements:
- Join our [Discord community](https://discord.gg/zerops)
- Contact support via [email](mailto:support@zerops.io)



<FAQ>
  <FAQItem question="How do I enable SEO optimization with prerender.io?">
    Zerops provides built-in prerender.io support. Simply set the `PRERENDER_TOKEN` environment variable with your prerender.io service token. See our [prerender.io documentation](/nginx/how-to/env-variables#prerenderio-support) for details.
  </FAQItem>
</FAQ>




This quick start allows you to get hands-on experience of Zerops, whether you only want to see it in action or want to start small and scale up the project size later. The purpose of this guide is to get an existing Nginx application up and running easily.

If you are already familiar with Zerops and you are interested in more detailed guides for your own application, feel free to head straight to the [How to](/nginx/how-to/create) section.

## Guides

We have created a repository, a _recipe_, containing the most simple Nginx web application, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics on the way.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-php',
      label: 'Nginx + SQL database',
      customProps: {
        icon: Icons['github'],
        description: 'A more complex, multi-service application example.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=php&type=all&language=&sort=',
      label: 'All Nginx recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspired.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



## Private internal access

Projects in Zerops represent a group of one or more services.
Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its [internal port](/nginx/how-to/build-pipeline#ports).

To connect to your application with `app` hostname running on [internal port](/nginx/how-to/build-pipeline#ports) `80`, simply use `http://app:80`

:::info
Do not use `https://` when communicating with Nginx from other runtime services in the same project. The internal communication is done over a private network and is isolated from other projects.
:::

### Use Nginx environment variables

Zerops creates default environment variables for each Nginx static service to help you with connection within the same project. To avoid the need to copy the access parameters manually, use [generated environment variables](/nginx/how-to/env-variables#generated-env-variables) of the Nginx static service.

#### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Example:

To access the `API_TOKEN` env variable of the `app` service, use `app_API_TOKEN` as the env variable key.

Read more about [env variables](/nginx/how-to/env-variables).

## Private access via VPN

### Start VPN connection

You can securely connect to your Nginx application from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)

### Access Nginx application through VPN

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/nginx/how-to/env-variables) are available when connected through VPN. To connect to your Nginx application in Zerops set the hostname and [internal port](/nginx/how-to/build-pipeline#ports) e.g. http://app:80

:::info
Do not use `https://` when communicating with Nginx over the VPN. The security is assured by the VPN. The internal communication is done over a private network and is isolated from other projects.
:::

### Connect via SSH

Use the <a href="/references/ssh">`ssh` command</a> to connect to your service via SSH.

### Stop VPN connection

[Stop the Zerops VPN](/references/vpn#stop-vpn) in zCLI.

## Public access through zerops.io subdomain

By default, your Nginx static service is not publicly accessible. To test your application, enable the [public access through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain).

## Public access through your domain

By default, your Nginx static service is not publicly accessible. When your application is ready for production or if you want to test it on the production domain, [configure the public access through your domain](/features/access#public-access-through-your-domain).

## Public access from another Zerops project

All services of the same project share a dedicated private network. To connect to a service within the same project, just use the service hostname and its [internal port](/nginx/how-to/build-pipeline#ports). Different projects are not connected inside Zerops. To connect to a runtime service from another Zerops project, you need to use public access either [through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain) or [through your domain](/features/access#public-access-through-your-domain).





export const languages = [
    { name: "Node.js", link: "/nodejs/how-to/build-pipeline" },
    { name: "PHP", link: "/php/how-to/build-pipeline" },
    { name: "Python", link: "/python/how-to/build-pipeline" },
    { name: "Go", link: "/go/how-to/build-pipeline" },
    { name: ".NET", link: "/dotnet/how-to/build-pipeline" },
    { name: "Rust", link: "/rust/how-to/build-pipeline" },
    { name: "Java", link: "/java/how-to/build-pipeline" },
]

Zerops provides a customizable build and runtime environment for your static content.

Zerops supports different build environments:

<GroupCards id="build-sections" emoji="🚀" heading="Know more about build environments for your Runtime" items={languages} />

If you just need to deploy your static content, use the [manual deploy](/nginx/how-to/trigger-pipeline#manual-deploy-using-zerops-cli) via Zerops CLI.

## Add zerops.yaml to your repository

Start by adding `zerops.yaml` file to the **root of your repository** and modify it to fit your application:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: nodejs@latest

      # OPTIONAL. Set the operating system for the build environment.
      # os: ubuntu

      # OPTIONAL. Customize the build environment by installing additional packages
      # or tools to the base build environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # REQUIRED. Build your application
      buildCommands:
        - npm i
        - npm run build

      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles:
        - dist
        - package.json
        - node_modules

      # OPTIONAL. Which files / folders you want to cache for the next build.
      # Next builds will be faster when the cache is used.
      cache: node_modules

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base: nginx@latest

      # OPTIONAL. Customize the runtime Nginx environment by installing additional
      # dependencies to the base Nginx runtime environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Nginx application is started.
      # initCommands:
      #  - rm -rf ./cache

      # OPTIONAL. Customize the folder that will be used as the root of the publicly
      # accessible web server content. Enter the path relative to the /var/www folder.
      documentRoot: public

      # OPTIONAL. Sets the custom Nginx configuration. The file must be deployed in
      # the runtime container. Enter the path to the file relative to the /var/www folder
      siteConfigPath: site_config.tmpl
```

The top-level element is always `zerops`.

### Setup

The first element `setup` contains the **hostname** of your service. A runtime service with the same hostname must exist in Zerops.
Zerops supports the definition of multiple runtime services in a single `zerops.yaml`. This is useful when you use a monorepo. Just add multiple setup elements in your `zerops.yaml`:

```yaml
zerops:
  # definition for app service
  - setup: app
    build: ...
    run: ...

  # definition for api service
  - setup: api
    build: ...
    run: ...
```

Each service configuration contains at least two sections: **build** and **run**. Both sections are required to build and deploy your Nginx application in Zerops. If you'd like to use a readiness check, add an optional **deploy** section.

## Runtime configuration

### base

_OPTIONAL._ Sets the base technology for the runtime environment.
If you don't specify the `run.base` attribute, Zerops keeps the current Nginx version for your runtime.

Following options are available for Nginx builds:

<UnorderedCodeList data={data.nginx.base.runtime} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: nodejs@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
        base: nginx@latest
      ...
```

<p>
  The base runtime environment contains {data.alpine.default}, the
  selected major version of Nginx, <a href="/references/cli">Zerops command line tool</a> and `composer`, `git` and `wget`.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the runtime environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: nodejs@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base:
        - nginx@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [run base environments](/zerops-yaml/base-list).

To customize your build environment use the `prepareCommands` attribute.

### os

_OPTIONAL._ Sets the operating system for the runtime environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customized.
:::

### ports

_OPTIONAL._ Specifies one or more internal ports on which your application will listen.

:::info
If no ports are specified, Zerops adds the port TCP 80 automatically.
:::

:::caution
If you want the web server to listen on other port(s) than `:80`, you must [customize](/nginx/how-to/customize-web-server) your web server configuration as well.
:::

Projects in Zerops represent a group of one or more services. Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its internal port.

For example, to connect to a Nginx static service with hostname = "app" and port = 80 from another service of the same project, simply use `app:80`. Read more about [how to access a Nginx static service](/nginx/how-to/access).

:::info
Do not use the port **:443**. All the incoming traffic is terminated on the Zerops internal balancer where the SSL certificate is installed and the request is forwarded to your Nginx static service as a **http://** on the port **:80**.
:::

Each port has following attributes:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">port</td>
      <td className="w-fit">Defines the port number. You can set any port number between <em>10</em> and <em>65435</em>. Ports outside this interval are reserved for internal Zerops systems.</td>
    </tr>
    <tr>
      <td className="w-fit">protocol</td>
      <td className="w-fit"><strong>Optional.</strong> Defines the protocol. Allowed values are <code>TCP</code> or <code>UDP</code>. Default value is <code>TCP</code>.</td>
    </tr>
    <tr>
      <td className="w-fit">httpSupport</td>
      <td className="w-fit"><strong>Optional.</strong> <code>httpSupport = true</code> is the default setting for TCP protocol. Set <code>httpSupport = false</code> if a web server isn't running on the port. Zerops uses this information for the configuration of <a href="/features/access">public access</a>. <code>httpSupport = true</code> is available only in combination with the TCP protocol.</td>
    </tr>
  </tbody>
</table>

### prepareCommands

_OPTIONAL._ Customizes the Nginx runtime environment by installing additional dependencies or tools to the runtime base environment.

<p>
  The base Nginx environment contains {data.alpine.default}, the selected
  major version of Nginx, <a href="/references/cli">Zerops command line tool</a> and `composer`, `git` and `wget`. To install
  additional packages or tools add one or more prepare commands:
</p>

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Nginx runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first deploy with a defined prepare attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/nginx/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `prepareCommands` commands in the defined order

#### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/nginx/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

#### Cache of your custom runtime environment

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the [build.addToRunPrepare](#copy-folders-or-files-from-your-build-container) and `run.prepareCommands` attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.

<p align="center">
  <img
    src="/img/screenshots/runtime_clear_build_cache.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

When the prepare cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances.

### Copy folders or files from your build container

<p>
  The prepare runtime container contains {data.alpine.default}, the
  selected major version of Nginx, <a href="/references/cli">Zerops command line tool</a> and `composer`, `git` and `wget`.
</p>

The prepare runtime container does not contain your application code nor the built application. If you need to copy some folders or files from the build container to the runtime container (e.g. a configuration file) use the `addToRunPrepare` attribute in the build section of your chosen technology.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...
      addToRunPrepare: ./runtime-config.yaml

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Nginx runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

In the example above Zerops will copy the `runtime-config.yaml` file from your build container **after the build has finished** into the new **prepare runtime** container. The copied files and folders will be available in the `xxx` folder in the new prepare runtime container before the prepare commands are triggered.

### initCommands

_OPTIONAL._ Defines one or more commands to be run each time a new runtime container is started or a container is restarted.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Nginx application is started.
      initCommands:
        - rm -rf ./cache
```

These commands are triggered in the runtime container before your Nginx application is started.

Use init commands to clean or initialise your application cache or similar operations.

:::caution
The init commands will delay the start of your application each time a new runtime container is started (including the [horizontal scaling](/nginx/how-to/scaling#horizontal-auto-scaling) or when a runtime container is restarted).

Do not use the init commands for customising your runtime environment. Use the [run:prepareCommands](/nginx/how-to/build-pipeline#preparecommands) attribute instead.
:::

#### Command exit code

If any of the `initCommands` fails, it returns an exit code other than 0, but deploy is **not** canceled. After all init commands are finished, regardless of the status code, the application is started. Read the [runtime log](/nginx/how-to/logs#runtime-log) to troubleshoot the error.

#### Single or separated shell instances

You can configure your `initCommands` to be run in a single shell instance or multiple shell instances.

### documentRoot

_OPTIONAL._ Customizes the folder that will be used as the root of the publicly accessible web server content.

:::info
By default, the document root is configured to `/var/www`.
:::

Customize the folder that will be used as the root of the publicly accessible web server content. Enter the path relative to the `/var/www` folder.
E.g. `documentRoot: public` will set the web server document root to `/var/www/public`.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the folder that will be used as the root of the publicly
      # accessible web server content. Enter the path relative to the /var/www folder.
      documentRoot: public
```

### siteConfigPath

_OPTIONAL._ Sets the custom Nginx configuration.

:::info
If you don't set your custom configuration Zerops applies the [default](/nginx/how-to/customize-web-server#default-nginx-configuration) configuration.
:::

The file must be deployed in the runtime container. Enter the path to the file relative to the `/var/www` folder.
Read more about the [web server customization](/nginx/how-to/customize-web-server).

### envVariables

_OPTIONAL._ Defines the environment variables for the runtime environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to run your application ====
    run:
      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/nginx/how-to/env-variables) in Zerops.

### health check

_OPTIONAL._ Defines a health check.

`healthCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the health check to request a local URL using a HTTP GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the folder that will be used as the root of the publicly
      # accessible web server content. Enter the path relative to the /var/www folder.
      documentRoot: public

      # OPTIONAL. Define a health check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      healthCheck:
        httpGet:
          port: 80
          path: /status
```

Read more about how the [health check works] in Zerops.

#### exec

Configures the health check to run a local command.
Following attributes are available:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/nginx/how-to/create#set-secret-environment-variables">environment variables</a> as your Nginx application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the folder that will be used as the root of the publicly
      # accessible web server content. Enter the path relative to the /var/www folder.
      documentRoot: public

      # OPTIONAL. Define a health check with a shell command.
      healthCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [health check works] in Zerops.

## Deploy configuration

### readiness check

_OPTIONAL._ Defines a readiness check. Read more about how the [readiness check works](/nginx/how-to/deploy-process#readiness-checks) in Zerops.

`readinessCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the readiness check to request a local URL using a http GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        httpGet:
          port: 80
          path: /status

    # ==== how to run your application ====
    run: ...
```

Read more about how the [readiness check works](/nginx/how-to/deploy-process#readiness-checks) in Zerops.

#### exec

Configures the readiness check to run a local command.
Following attributes are available:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/nginx/how-to/create#set-secret-environment-variables">environment variables</a> as your Nginx application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [readiness check works](/nginx/how-to/deploy-process#readiness-checks) in Zerops.



Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart Nginx static service in Zerops GUI

To stop the Nginx static service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)*/}

To start the stopped Nginx static service choose the **Start** item from the same menu.

To restart the Nginx static service choose the **Restart** item from the same menu.

## Stop and start Nginx using zCLI

zCLI is the Zerops command-line tool. To stop and start the Nginx static service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and services to choose from.
:::




The Nginx static service contains the Nginx web server optimized for your static content. Nginx static service is highly scalable and customisable to suit both development and production.

## Create Nginx static service using Zerops GUI

First, set up a project in Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu in the **Services** block. Then add a new Nginx static service:

<Video
  src="/vids/services/nginx-static.webm"
  type="video/webm"
/>

### Choose Nginx version

Following Nginx versions are currently supported:

<UnorderedList data={data.nginx.readable} />

:::info
You can [change](/nginx/how-to/upgrade) the major version at any time later.
:::

### Set a hostname

Enter a unique service identifier like "app","cache", "gui" etc. Duplicate services with the same name in the same project are forbidden.

#### Limitations:

- maximum 25 characters
- must contain only lowercase ASCII letters (a-z) or numbers (0-9)

:::caution
The hostname is fixed after the service is created. It can't be changed later.
:::

### Set secret environment variables

Add environment variables with sensitive data, such as password, tokens, salts, certificates etc. These will be securely saved inside Zerops and added to your runtime service upon start.

Setting the secret environment variables is optional. You can set them later in Zerops GUI.

Read more about [different types of env variables](/nginx/how-to/env-variables#types-of-env-variables-in-zerops) in Zerops.

### Set auto scaling configuration

Zerops scales the Nginx static services automatically both vertically and horizontally. Vertical scaling means increasing or decreasing the hardware resources (CPU, RAM and disk) of a Nginx container. Horizontal scaling adds or removes whole containers.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

**Dedicated**
The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

Choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

Nginx static service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Nginx static service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Nginx performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](/nginx/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

:::info
You can change the vertical auto scaling parameters later.
:::

#### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Nginx static service. When your Nginx static service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Nginx static service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

[Learn more](/nginx/how-to/scaling) about Nginx auto scaling.

#### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Create Nginx static service using zCLI

zCLI is the Zerops command-line tool. To create a new Nginx static service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/nginx/how-to/create#create-a-project-description-file)
3. [Create a project with a Nginx and PostgreSQL service](#full-example)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### Basic example:

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in nginx@{version} format
    type: nginx@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes your future project infrastructure. The project will contain one Nginx version 8.1 service with default [auto scaling](/nginx/how-to/scaling) configuration. Hostname will be set to "app", the internal port(s) the service listens on will be defined later in the [zerops.yaml](/nginx/how-to/build-pipeline#ports). Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

#### Full example:

Create a directory my-project. Create an description.yaml file inside the my-project directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a Nginx static service
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in nginx@{version} format
    type: nginx@latest
    # optional: vertical auto scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4
    # optional: create secret env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes your future project infrastructure. The project will contain an Nginx static service with `app` hostname. The internal port(s) the service listens on will be defined later in the [zerops.yaml](/nginx/how-to/build-pipeline#ports). Nginx static service will run on version 1.22 with a custom vertical and horizontal scaling. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Limitations</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>name</strong></td>
      <td className="w-fit">The name of the new project. Duplicates are allowed.</td>
      <td className="w-fit"></td>
    </tr>
    <tr>
      <td className="w-fit"><strong>description</strong></td>
      <td className="w-fit"><strong>Optional.</strong> Description of the new project.</td>
      <td className="w-fit">Maximum 255 characters.</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>tags</strong></td>
      <td className="w-fit"><strong>Optional.</strong> One or more string tags. Tags do not have a functional meaning, they only provide better orientation in projects.</td>
      <td className="w-fit"></td>
    </tr>
  </tbody>
</table>


At least one service in `services:` section is required. You can create a project with multiple services. The example above contains an Nginx static service but you can create a `description.yaml` with your own combination of [services](/features/infrastructure).

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit">Parameter</th>
      <th className="w-fit">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">
        <b>hostname</b>
      </td>
      <td className="w-fit">
        The unique service identifier.
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>type</b>
      </td>
      <td className="w-fit">
        Specifies the service type and version.
        <br />
        See what [nginx service types](/references/import-yaml/type-list#runtime-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>verticalAutoscaling</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Defines <a href="/nginx/how-to/create#set-auto-scaling-configuration">custom vertical auto scaling parameters</a>.<br />
        All verticalAutoscaling attributes are optional. Not specified
        attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - cpuMode</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minCpu/maxCpu</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minCpu or maxCpu in CPU cores (integer).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minRam/maxRam</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minRam or maxRam in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minDisk/maxDisk</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minDisk or maxDisk in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>minContainers</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Default = 1. Defines the minimum number of containers
        for <a href="/nginx/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.<br />
        <br />
        <b>Limitations:</b>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maxContainers</b>
      </td>
      <td className="w-fit">
        Defines the maximum number of containers for <a href="/nginx/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.<br />
        <br />
        <b>Limitations:</b>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>envSecrets</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Defines one or more secret env variables as a key value
        map. See env variable <a href="/nginx/how-to/env-variables#env-variable-restrictions">restrictions</a>.
      </td>
    </tr>
  </tbody>
</table>

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>

### Add Nginx static service to an existing project

#### Example:

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in nginx@{version} format
    type: nginx@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one Nginx static service version 1.22 with default [auto scaling](/nginx/how-to/scaling) configuration will be added to your project. Hostname of the new service will be set to `app`. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The content of the `services:` section of `import.yaml` is identical to the project description file. The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the import.yaml file is 100 kB.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline_custom_runtime.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>


The default Nginx runtime environment contains:

- <span>{data.alpine.default}</span>
- Selected version of Nginx when the runtime service was created.
- [zCLI](/references/cli)
- Git and Composer

:::note
To use Ubuntu instead of the default Alpine, set the [run.os](/zerops-yaml/specification#os--1) attribute.

Additional packages and tools can be installed using [run.prepareCommands](/zerops-yaml/specification#preparecommands--1).
:::

### Runtime Flow

When the first deploy with a defined `prepareCommands` attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/nginx/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the run.prepareCommands commands in the defined order

### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/nginx/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

The prepare runtime container is automatically deleted after the prepare runtime phase has finished or failed.

### Custom runtime environment cache

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the <a href="/nginx/how-to/build-pipeline#copy-folders-or-files-from-your-build-container">build.addToRunPrepare</a> and <a href="/nginx/how-to/build-pipeline#preparecommands-1">run.prepareCommands</a> attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.

{/* ** TODO screenshot** */}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.



## Default Nginx configuration

The default Nginx static service has following configuration:

```
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name _;
    root {{.DocumentRoot}};

    location / {
        try_files $uri $uri/ /index.html;
    }

    access_log syslog:server=unix:/dev/log,facility=local1,tag=nginx,severity=info default_short;
    error_log syslog:server=unix:/dev/log,facility=local1,tag=nginx,severity=error;
}
```

The configuration contains 2 variables:

- **`{{.DocumentRoot}}`** is replaced by the <a href="/nginx/how-to/build-pipeline#documentroot">`run.documentRoot`</a> attribute from the `zerops.yaml`. If the attribute is not specified, the default value `/var/www` is used.

## Customize Nginx configuration

Follow these steps to customize the Nginx configuration in Nginx static service:

1. Create a **.tmpl** file with the Nginx configuration in your repository.

2. Optionally use following variables:

- **`{{.DocumentRoot}}`** is replaced by the <a href="/nginx/how-to/build-pipeline#documentroot">`run.documentRoot`</a> attribute from the `zerops.yaml`. If the attribute is not specified, the default value `/var/www` is used.

Example:

```
root {{.DocumentRoot}};
```

- **`{{.Environment.ENV_NAME}}`** is replaced by the [env variable](/nginx/how-to/env-variables) value. The env variable must be either defined in [run.envVariables](/nginx/how-to/build-pipeline#envvariables) in `zerops.yaml` or set as a [secret](/nginx/how-to/env-variables#set-secret-env-variables-in-zerops-gui) or [generated](/nginx/how-to/env-variables#generated-env-variables) env variable in Zerops GUI.

:::caution
Use the **.tmpl** file extension to make Zerops interpret the file as a template. Zerops will replace the supported variables listed above.
:::

3. Check that your Nginx configuration is consistent with Zerops requirements:

- Do not use IP addresses in the `listen` directive
- If you use other ports than `:80` in the `listen` directive, add them to the <a href="/nginx/how-to/build-pipeline#ports">`run.ports`</a> in your `zerops.yaml` as well.
- Do not use the port **:443**. All the incoming `https://` traffic is terminated on the Zerops internal balancer where the SSL certificate is installed and the request is forwarded to your Nginx static service as a **http://** on the port **:80**.

4. Add the <a href="/nginx/how-to/build-pipeline#siteconfigpath">`siteConfigPath`</a> to the run section of your `zerops.yaml`

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: nodejs@latest

      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles:
        - vendor
        - public

    # ==== how to run your application ====
    run:
      documentRoot: public

      # OPTIONAL. Sets the custom Nginx or Apache configuration. The file must be deployed in the runtime container. Enter the path to the file relative to the /var/www folder
      siteConfigPath: site_config.tmpl
```

5. Ensure that the <a href="/nginx/how-to/build-pipeline#deployfiles">`build.deployFiles`</a> contains the folder with the `siteConfigPath` or add the path to the Nginx config file to the `deployFiles` list. Zerops will deploy the file to the runtime container(s).

6. [Trigger](/nginx/how-to/trigger-pipeline) the build & deploy pipeline.

### Built-in Prerender.io Support

The default Nginx configuration includes automatic prerender.io support for SEO optimization. When `PRERENDER_TOKEN` is set, Nginx will automatically serve pre-rendered content to search engines and social media crawlers.

See [environment variables](/nginx/how-to/env-variables#prerenderio-support) for configuration details.



## Delete Nginx static service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete Nginx using zCLI

zCLI is the Zerops command-line tool. To delete the Nginx static service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step3.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Application artefact

If you triggered the deploy pipeline [manually](/nginx/how-to/trigger-pipeline#manual-deploy-using-zerops-cli) using Zerops CLI, the application artefact is also uploaded to the internal Zerops storage.

Zerops uses the stored artefact to deploy the identical version of your application each time a new container is started:

- when a new application version is deployed
- when the application [scales horizontally](/nginx/how-to/create#horizontal-auto-scaling)
- when a runtime container fails and a new container is started automatically

## First deploy

When your application is deployed for the first time, Zerops will start one or more runtime containers based on the service [auto scaling settings](/nginx/how-to/scaling).

Zerops performs following actions for each new container:

1. Installs the runtime environment
2. Downloads the application artefact from the internal storage
3. Optionally runs the [init commands](/nginx/how-to/build-pipeline#initcommands)
4. Starts your application
5. Optionally waits until the [readiness check](/nginx/how-to/build-pipeline#readiness-check) succeeds
6. The container is now active and receives incoming requests.

Services with multiple containers are deployed in parallel.

:::info
If your application needs to be initialized in each runtime container, add [init commands](/nginx/how-to/build-pipeline#initcommands) to `zerops.yaml`.
:::

:::caution
Do not use the `initCommands` for customising your runtime environment. See [how to customize the runtime environment](/nginx/how-to/customize-runtime).
:::

## Further deploys

When a previous version of your application is already running, Zerops will start new containers. The count of new containers will be the same as the count of existing containers.

Zerops performs the identical actions for each new container as the first deployment.
When all new containers are started your service contains both new and old versions for a short period of time.

The old containers are then removed from the project balancer so they don't receive new requests. The Nginx process inside each of the old containers is terminated and all old containers are gradually deleted.

## Readiness checks

If your application isn't ready as soon as it is started, configure a [readiness check](/nginx/how-to/build-pipeline#readiness-check) in your `zerops.yaml`.

If the readiness check is defined, Zerops will:

1. Start your application
2. Perform a readiness check
3. If the readiness check fails, wait 5 seconds and repeat step 2.
4. If the readiness check succeeds, set the container as active.

Application in the runtime container with a pending readiness check won't receive any incoming requests. Only active containers receive incoming requests to your Nginx static service.

If the readiness check is still failing after 5 minutes, the specific runtime container is marked as failed and Zerops will delete it, create a new runtime container and perform the deploy.

The <a href="/nginx/how-to/build-pipeline#httpget">`httpGet`</a> readiness check is successful when the URL returns HTTP status code `2xx`. The timeout is 5 seconds. When the URL returns a `3xx` HTTP status, the readiness check HTTP client will follow the redirect.

The <a href="/nginx/how-to/build-pipeline#exec">`exec.command`</a> readiness check is successful when the command returns status code 0. The timeout is 5 seconds.

Read the [runtime log](/nginx/how-to/logs#runtime-log) to troubleshoot failed readiness checks.

## Application versions

Zerops keeps 10 last versions of your application in the internal storage.

The list of application versions is available in Zerops GUI. Go to the service detail and choose **Service dashboard & runtime containers** from the left menu. The active version is highlighted, show all archived version by clicking on the button below.

<p align="center">
  <img
    src="/img/screenshots/pipeline_history.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

The pipeline detail is accessible from the additional menu. The pipeline detail contains

- The pipeline config (`zerops.yaml`) that was used for the selected version
- The build log (if available)
- The prepare runtime log (if available)

You can download the build artefact of the selected version or delete an inactive version manually.

## Restore an archived version

You can restore an archived version by choosing the **Activate** item from the additional menu.
Zerops will deploy the selected version and the active version will be archived.

The environment variables will be restored to the latest moment when the selected version was active.



Environment variables help you run your application in different environments. They allow you to isolate all specific environment aspects from your application code and keep your app encapsulated. You can create several projects in Zerops that represent different environments (development, stage, production) or even each developer can have a project with its own environment.

In Zerops you do not have to create a `.env` file manually. Zerops handles the environment variables for you.

## Types of env variables in Zerops

There are 3 different sets of env variables in Zerops:

<table className="w-fit my-1.5">
  <thead>
    <tr className="text-center  rounded-lg">
      <th className="w-fit"><strong>Type</strong></th>
      <th className="w-fit"><strong>Environment</strong></th>
      <th className="w-fit"><strong>Defined in</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">build</td>
      <td className="w-fit"><a href="/nginx/how-to/build-pipeline#envvariables">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/nginx/how-to/build-pipeline#envvariables-1">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">secret</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/nginx/how-to/env-variables#set-secret-env-variables-in-zerops-gui">Zerops GUI</a></td>
    </tr>
  </tbody>
</table>


Use the [secret env variables](/nginx/how-to/create#set-secret-environment-variables) for all sensitive data you don't want to store in your application code. Secret env variables are also useful if you need for testing where you need to change the value of some env variables frequently. Secret variables are managed in Zerops GUI and you don't have to redeploy your application.

The basic build and runtime env variables are listed in your [zerops.yaml](/zerops-yaml/specification) and deployed together with your application code. When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your zerops.yaml and redeploy your application to Zerops.

You can [reference](/nginx/how-to/env-variables#reference-a-local-variable-in-another-variable-value) another variable of the same service or even a variable of [another service](/nginx/how-to/env-variables#reference-a-variable-of-another-project-service) within the same project.

## Set secret env variables in Zerops GUI

Use secret variables to store passwords, tokens and other sensitive information that shouldn't be part of your repository and listed in zerops.yaml.

<p align="center">
  <img
    src="/img/screenshots/secret_env.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

You can set env variables when you [create](/nginx/how-to/create) a new Nginx static service or you can set them later.

To configure env variables for an existing service, go to the service detail and choose **Environment variables** in the left menu. Scroll to the **Secret variables** section and click on the **Add secret variable** button and set variable key and value.

You can edit or delete env variables that you've created by clicking on the menu on the right side of each row.

The changes you've made to environment variables will be automatically applied to all containers of your project's services.

:::caution
You need to **restart** the runtime service after you update environment variables. The Nginx process running in the container receives the list env variables only when it starts. Update of the env variables while the Nginx process is running does not affect your application.
:::

## Set basic build env variables in zerops.yaml

To set basic env variables for the build environment, add the `envVariables` attribute to the build section in your `zerops.yaml`

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
       …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Set basic runtime env variables in zerops.yaml

To set basic env variables for the runtime environment, add the `envVariables` attribute to the runtime section in your `zerops.yaml`.

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    run:
       …

      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Env variable restrictions

**key**

- must satisfy the following regular expression: `[a-zA-Z_]+[a-zA-Z0-9_]*`
- all variable keys in the same service must be unique regardless of case
- keys are case sensitive

**value**

- must contain only ASCII characters
- the _End of Line_ character is forbidden

These restrictions apply to all [types of env variables](/nginx/how-to/env-variables#types-of-env-variables-in-zerops).

## Referencing other env variables

You can reference another variable of the same service using `${key}` in your variable value. You can even reference a variable from a different service using `${hostname_key}`. The referenced variable doesn't need to exist when you are entering your variable.

### Reference a local variable in another variable value

| Variable key | Variable value      | Computed variable value |
| ------------ | ------------------- | ----------------------- |
| id           | 12345               | 12345                   |
| hostname     | app                 | app                     |
| name         | `${id}-${hostname}` | 12345-app               |

### Reference a variable of another project service

Let's say your project contains two PostgreSQL services `dbtest` and `dbprod`. Both services have a `connectionString` variable. Then you can create a `dbConnectionString` env variable in your Nginx runtime and set `${dbtest_connectionString}` as the variable value. Zerops will fill in the value of the `connectionString` variable of the `dbtest` service.

When you change the `dbConnectionString` value to `${dbprod_connectionString}`, Zerops will fill in the value of the `connectionString` variable of the `dbprod` service.

:::caution
When you change the value of the `connectionString` variable in the service `dbtest` you need to **restart** the Nginx static service. The Nginx process running in the container receives the list env variables only when it starts. Update of the env variables while the Nginx process is running does not affect your application.
:::

## Generated env variables

Zerops creates several helper variables when a Nginx static service is created, e.g. `hostname`, `PATH`. Some helper variables are read-only (`hostname`), others are editable (`PATH`). Generated variables cannot be deleted.

Generated env variables are listed on the **Environment variables** page. Scroll to the **Generated variables** section.

<p align="center">
  <img
    src="/img/screenshots/nodejs_generated_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## How to read env variables from your Nginx app

Zerops passes all environment variables from all project services when your Nginx app is deployed and started.

To access the local environment variable i.e. the variable set to this Nginx static service in your app, use:

```sh
getenv('YOUR_VARIABLE_KEY_HERE');
```

## How to read env variables of another service

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Examples:

To access the `connectionString` env variable of the `mariadb1` service, use `mariadb1_connectionString` as the env variable key.
To access the `password` env variable of the `mariadb2` service, use `mariadb2_password` as the env variable key.

## How to read runtime env variables in the build environment

You can use runtime env variables in the build environment using the `RUNTIME_` prefix. For example if you have a runtime variable with the `connectionString` key, use the `RUNTIME_connectionString` to read the variable in the build environment. This rule applies both for basic and secret runtime variables.

## Basic and secret env variable with the same key

If you create a secret env variable and a basic runtime env variable with the same key, Zerops saves the basic runtime env variable from your zerops.yaml and ignores the secret env variable.

If you create a basic build env variable and a runtime env variable with the same key, Zerops saves both because the build and runtime environments have separate sets of env variables.

## Prerender.io Support

Zerops provides built-in prerender.io support for SEO optimization. Configure it using these environment variables:

<table className="w-fit my-1.5">
  <thead>
    <tr className="text-center rounded-lg">
      <th className="w-fit"><strong>Variable</strong></th>
      <th className="w-fit"><strong>Required</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Default</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr className="text-center">
      <td className="w-fit">PRERENDER_TOKEN</td>
      <td className="w-fit">Yes</td>
      <td className="w-fit">Your prerender.io service token</td>
      <td className="w-fit">-</td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">PRERENDER_HOST</td>
      <td className="w-fit">No</td>
      <td className="w-fit">Prerender service host</td>
      <td className="w-fit">service.prerender.io</td>
    </tr>
  </tbody>
</table>

:::tip
Set `PRERENDER_TOKEN` as a secret environment variable in Zerops GUI for security.
:::

Example in zerops.yaml:
```yaml
zerops:
  - setup: app
    run:
      envVariables:
        PRERENDER_HOST: "custom.prerender.host"
```



## Zerops GUI

In Zerops GUI, go to the service detail page and choose **Service containers & resources overview** and scroll down to the list of containers.

<p align="center">
  <img
    src="/img/screenshots/nodejs_containers_list.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Then click on the file browser icon and the file browser opens:

<p align="center">
  <img
    src="/img/screenshots/nodejs_file_browser.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

If your service is in the [HA mode], you can switch between containers in the top left corner.

## zCLI & SSH

You can connect to the container via SSH with the Zerops CLI and browse its files.
How to [connect to your service via SSH](/references/ssh).



Zerops provides 3 different logs:

- [build log](#build-log)
- [prepare runtime log](#prepare-runtime-log)
- [runtime log](#runtime-log)

## How to access logs

### Build log

#### Zerops GUI

To access a build log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Build log**. The build log button is available only if the [build pipeline](/nginx/how-to/trigger-pipeline) was triggered for the selected deploy.

#### zCLI

To access a build log in Zerops CLI use

```sh
zcli service log --showBuildLogs
```

Read more about the [zcli service log](/references/cli/access-logs) command.

### Prepare runtime log

#### Zerops GUI

To access a prepare runtime log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Prepare runtime log**. The prepare runtime log button is available only if the [prepare runtime pipeline](/nginx/how-to/build-pipeline#preparecommands) was triggered for the selected deploy.

#### zCLI

_Prepare runtime log is currently not supported in zCLI._

### Runtime log

#### Zerops GUI

To access a runtime log in Zerops GUI, go to the service detail and choose **Runtime log** in the left menu.

{/* TODO screenshot** */}

Each runtime container has its own log. If your service has multiple containers, select the container in the log header.

You can filter log records by minimum severity or by time.

#### zCLI

To access the log of the runtime containers in Zerops CLI use

```sh
zcli service log
```

Read more about the [zcli service log](/references/cli/access-logs) command.

## Nginx logging configuration

By default Nginx static containers logs the content of Nginx access log and error log to syslog:

```
    access_log syslog:server=unix:/dev/log,facility=local1,tag=nginx,severity=info default_short;
    error_log syslog:server=unix:/dev/log,facility=local1,tag=nginx,severity=error;
```

The syslog messages are stored and are accessible as a runtime log in Zerops GUI or zCLI.




Zerops performs an automated scaling of hardware resources required to run your runtime application based on its usage. If the current use of your application does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your application is under heavy load or needs to store more data, then auto scaling increases the resources to make sure it runs smoothly.

## Vertical and horizontal auto scaling

Each application you deploy starts with the minimum hardware resources: **CPU** cores, **RAM** and **Disk**. Zerops monitors the usage of these 3 resources and if the usage exceeds a set threshold, more CPU cores, RAM or Disk is allocated to the service. This is called **vertical scaling**.

<p align="center">
  <Image
    lightImage="/img/gui/resources.webp"
    darkImage="/img/gui/resources.webp"
    alt="Resources of a Zerops service"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

**Horizontal scaling** adds or removes whole containers.

Zerops has a preference for vertical scaling because it's faster and more precise. If the vertical auto scaling hits the defined maximum a new container is started automatically. When your application doesn't need so much power and all containers are vertically scaled down, Zerops will gradually remove whole containers.

<p align="center">
  <img
    src="/img/screenshots/scaling2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Configure auto scaling

To change the auto scaling settings go to the Nginx static service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### CPU mode

#### Shared

Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

#### Dedicated

The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

Nginx static service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Nginx static service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient performance or capacity of Nginx static service, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Nginx static service. When your Nginx static service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Nginx static service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your application starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your application.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your application doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

By default Zerops keeps a minimum free RAM in each container. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your application need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 62.5 MB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the application is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each Nginx static service. Zerops will never scale above the entered values. If your application is in [highly available mode], maximal resources are identical for all containers of the Nginx static service.

### Not enough resources to scale up

If one of the Nginx containers needs more resources but there are not enough of them on the underlying machine, a new container with the required hardware resources will be started on another machine. When the new container is ready, it will be added to the service balancer. The old container will be removed from the balancer and deleted.

### Automatic scale down

When the application no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the application from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal autoscaling

Zerops prefers vertical scaling over horizontal scaling because vertical scaling is faster and allows finer adjustment to the required performance. Horizontal scaling can be disabled by setting the same number for the minimum and maximum container count. Zerops will then scale the Nginx static service only vertically.

Your application is created with the defined minimum number of containers. Zerops will add a new container when any of the service's containers reaches the maximum limit for vertical scaling for CPU cores or RAM. Zerops doesn't start a new container when the maximum disk space is reached. No more containers are added when the defined maximum container limit is reached.

The new container is started with a minimum disk size and with an average CPU cores and RAM of the existing containers.

By customising the vertical auto scaling limits, you can cause the horizontal scaling to start earlier. For example if you lower the vertical auto scaling maximum to 1 CPU core, Zerops will start a new container if some of the running containers are using the whole CPU core for more than 20 seconds.

If the application no longer needs as much power, Zerops will gradually remove containers to the defined minimum count. The container is removed after its CPU cores are scaled down to the defined minimum and the free CPU is safely above the minimum threshold for vertical scaling. Zerops only **removes containers** with a minimum **15 minute lifetime**.

## Monitor Nginx resources

Zerops provides information about how much hardware resources the Nginx static service is currently using. Go to the service detail in Zerops GUI and select **Service dashboard & runtime containers** in the left menu. Zerops also provides the history of resource usage.



Zerops provides [shared storage service](/shared-storage/overview) that can be connected to runtime services. Shared storage enables your runtime service to share files between all containers of the same service or even among containers of different runtime services.

## Connect a shared storage in Zerops GUI

Connect your Nginx static service directly when creating a new shared storage service. Just select your Nginx static service in the **Share with Services** block on the **Add new shared storage service** page.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_1.png)

To connect the existing shared storage to the Nginx static service, go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Select a runtime service and the shared storage will be connected to the selected runtime.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_2.png)

Zerops will create a new folder `/mnt/[shared storage name]`` in the runtime root folder. E.g. `/mnt/teststorage`for a`teststorage` shared storage. The content of this folder is shared among all containers of the runtime service you've selected. If you select multiple runtimes, the content of the folder will be shared among all containers of selected services.

## Disconnect a shared storage in Zerops GUI

Go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Switch off the toggle to disconnect the shared storage from the selected runtime.

:::note
Your runtime service will be automatically restarted when a shared storage is disconnected.
:::

## Create Nginx static service with a shared storage using zCLI

zCLI is the Zerops command-line tool. To create a new Nginx static service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](#create-a-project-description-file)
3. [Create a project with a Nginx static service and a shared storage](#create-a-project-with-nginx-static-service-and-a-shared-storage)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### description.yaml format

[Read the basics](/nginx/how-to/create#create-a-project-description-file) how to define the Nginx static service using the description.yaml.

#### Example with a shared storage

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project

  # optional: project description
  description: A project with a Nginx and a shared storage

  # optional: project tags
  tags:
    - DEMO
    - ZEROPS

# array of project services
services:
  - # service name
    hostname: teststorage

    # shared storage service has no version
    type: shared-storage

    # mode: HA / NON_HA
    mode: NON_HA

  - # service name
    hostname: app

    # service type and version number in nginx@{version} or nginx@latest format
    type: nginx@latest

    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2

    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4

    # Mount the shared storage to the Nginx static service
    mount:
      - teststorage
```

The mount attribute accepts an array of shared storage names you want to mount to your runtime service.

### Create a project with Nginx static service and a shared storage

Follow the article [How to create a project based on the description.yaml](/nginx/how-to/create#create-a-project-based-on-the-descriptionyaml).




<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-1.webp"
    darkImage="/img/mind-maps/build-deploy/step-1-dark.webp"
    alt="build deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Automatic builds and deploys from GitHub or GitLab

Integrate Zerops to your GitHub or GitLab repository and configure the automatic builds and deploys.

Follow these steps:

1. Add [zerops.yaml](/nginx/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository.
2. Connect your GitHub repository or connect your GitLab repository

Then each time you create a new tag or push to a specific branch, depending on the configuration, GitHub or GitLab will initiate a new build & deploy pipeline.

<p align="center">
  <Image
    lightImage="/img/gui/github-integration.webp"
    darkImage="/img/gui/github-integration.webp"
    alt="github integration"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

### Skip the automatic pipeline once

To ensure that a pipeline is not triggered by your next push, add `[ci skip]` or `[skip ci]` to the commit message. It is case insensitive.

:::note
You will still see a successful delivery of a webhook in your Github/Gitlab repository as a webhook is actually triggered, but with no action.
:::

## Manual builds and deploys using Zerops CLI

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    darkImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    alt="Manual Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

To start a new build & deploy pipeline manually, use the Zerops CLI.

Follow these steps:

1. Add <a href="/nginx/how-to/build-pipeline#add-zeropsyaml-to-your-repository">`zerops.yaml`</a> to your repository.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli push` command.

The `zcli push` command uploads your application code, builds and deploys your application in Zerops.

The command triggers the [build pipeline](/nginx/how-to/trigger-pipeline) defined in `zerops.yaml`. `zerops.yaml` must be in the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

zCLI uploads all files and subdirectories of the working directory to Zerops and starts the build pipeline. If the `.gitignore` file is found, it is interpreted and the defined files and folders will be ignored.

If you just want to deploy your application to Zerops, use the [zcli deploy](#manual-deploy-using-zerops-cli) command instead.

#### Push command parameters

```sh
Usage:
  zcli push [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.
  -h, --help                     the service push command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

zCLI commands are interactive, when you press enter after `zcli push`, you will be given a list of your projects to choose from.

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

## Manual deploy using Zerops CLI

To start only a deploy pipeline, use the Zerops CLI.

Follow these steps:

1. Add [zerops.yaml](/nginx/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository. Omit the build section.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli service deploy` command.

The `zcli service deploy` command uploads your application and deploys it in Zerops. Use this tool if you have your own build process. If you want to build your application in Zerops, use an [automatic](#automatic-builds-and-deploys-from-github-or-gitlab) or [manual](#manual-builds-and-deploys-using-zerops-cli) build process.

#### Deploy command parameters

```sh
Usage:
  zcli service deploy pathToFileOrDir [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
  -h, --help                     the service deploy command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

`pathToFileOrDir` defines a path to one or more directories and/or files relative to the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

`zerops.yaml` must be placed in the working directory.

:::info
You can change the deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your working directory.
:::



You can upgrade or downgrade your Nginx static service to a different major Nginx version by setting the <a href="/nginx/how-to/build-pipeline#base-1">`run.base`</a> parameter in your `zerops.yaml`. When you [trigger a new pipeline](/nginx/how-to/trigger-pipeline), Zerops will start new runtime container(s) with the required Nginx version. If you don't specify the `run.base` attribute in your `zerops.yaml`, Zerops keeps the current Nginx version for your runtime.




The Nginx static service contains the [Nginx ↗](https://nginx.org/) web server optimized for your static content.

## How to start

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/nginx/getting-started',
      label: 'New to Zerops?',
      customProps: {
        icon: Icons['rocket-launch'],
        description: 'Learn the basics by following a simple example.',
      },
    },
    {
      type: 'link',
      href: '/nginx/how-to/create',
      label: 'Care for details?',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description:
          'Dive in all Zerops has to offer for your Nginx application.',
      },
    },
  ]}
/>

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/nginx/how-to/create',
      label: 'Create Nginx static service',
      customProps: {
        icon: Icons['php'],
        description:
          'Start with creating a Nginx static service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: '/nginx/how-to/build-pipeline#add-zeropsyaml-to-your-repository',
      label: 'zerops.yaml',
      customProps: {
        icon: Icons['puzzle'],
        description:
          'See a full example of zerops.yaml file to create your own app.',
      },
    },
    {
      type: 'link',
      href: '/nginx/how-to/scaling',
      label: 'Scaling configuration',
      customProps: {
        icon: Icons['adjustments'],
        description:
          'Set up scaling of your Nginx application so that it runs smoothly while using only necessary resources.',
      },
    },
    {
      type: 'link',
      href: '/nginx/how-to/env-variables#prerenderio-support',
      label: 'SEO Optimization',
      customProps: {
        icon: Icons['magnifying-glass'],
        description: 'Built-in prerender.io support for better SEO.',
      },
    },
  ]}
/>

{" "}

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/nginx/how-to/create',
      label: 'Customize build environment',
      customProps: {
        icon: Icons['sparkles'],
      },
    },
    {
      type: 'link',
      href: '/nginx/how-to/customize-runtime',
      label: 'Customize runtime environment',
      customProps: {
        icon: Icons['sparkles-solid'],
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/nginx/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>




As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-php-hello-world), a **_recipe_**, containing the most simple Nginx web application. The repo will be used as a source from which the app will be built.

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)
2. In the **Projects** box click on **Import a project** and paste in the following YAML config ([source ↗](https://github.com/zeropsio/recipe-php-hello-world/blob/main/import-project/description.yaml)):

```yaml
project:
  name: my-first-project
services:
  - hostname: helloworld
    type: php-apache@8.1+2.4
    minContainers: 1
    maxContainers: 3
    buildFromGit: https://github.com/zeropsio/recipe-php-hello-world@main
    enableSubdomainAccess: true
```

3. Click on **Import project** and wait until all pipelines have finished.

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://helloworld-24-8080.prg1.zerops.app`.
2. Click or the `subdomain` URL to open it in a browser and you should see

```
Hello, World!
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::




As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-onboarding-php), a **_recipe_**, containing a PostgreSQL service with a simple Nginx application. The repo will be used as a source from which the app will be built.

:::tip
Follow the steps below and when everything is working as expected, fork the repo, try making various changes or be bold and connect your own.
:::

:::note
In the detail of each step, you can find a link with more information about the topic.
:::

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)

<details>
  <summary>2. Create a project.</summary>
  <p>
    Learn more about <a href="/features/infrastructure#projects">projects</a> in Zerops. See how to
    <a href="/nginx/how-to/create#create-a-project-description-file">import</a> a whole project into Zerops.
  </p>
</details>

<details>
  <summary>
    3. In the left menu, click on <b>Import services</b>, copy & paste the
    contents of the `import-services.yaml` config file from the recipe
    repository of your choice. Then click on <b>Import service</b>.
  </summary>
  <p>
    Learn more about <a href="/features/infrastructure#services--containers">services</a> in
    Zerops and how to <a href="/nginx/how-to/create#add-nginx-service-to-an-existing-project">import a service</a> to an existing project.
  </p>
  <p>
    The yaml file includes a `buildFromGit` directive, which ensures
    a one-time build from Git repository source. See how to connect a <a href="/references/github-integration">Github</a> or <a href="/references/github-integration">Gitlab</a> repository to be able to
    trigger automatic builds & deploys.
  </p>
</details>

<details>
  <summary>4. Several pipelines are created, one for project creation and the rest for the activation of the services. Wait for all to finish.</summary>
  <p>
  Learn more about how the pipelines can be <a href="/nginx/how-to/trigger-pipeline">triggered</a> and about <a href="/nginx/how-to/build-process">build</a> and <a href="/nginx/how-to/deploy-process">deploy</a> processes of a Nginx application in Zerops.

Learn more about how to access <a href="/nginx/how-to/logs#build-log">build log</a> of your Nginx static service in Zerops.

  </p>
</details>

<details>
  <summary>
    5. In the service detail, open the <b>Public access & internal ports</b> section, and <b>Enable Zerops Subdomain</b>.
  </summary>
  <p>
    Learn more about how to <a href="/nginx/how-to/access">access</a> your Nginx
    static service in Zerops.
  </p>
</details>

<details>
  <summary>6. Once the pipeline has finished, click on the activated <i>subdomain</i> URL. You should see a simple page with <br/><br/>`Entry added successfully with random data: f47ac10b-58cc-0372-8567-0e02b2c3d479. Total count: 1`</summary>
  <p>
  Congratulations! You have created your first application in Zerops, and we hope to see your own projects soon.

For now, check out other features, such as <a href="/nginx/how-to/env-variables">environment variables</a>, <a href="/nginx/how-to/logs#runtime-log">runtime log</a> and <a href="/nginx/how-to/scaling">scaling</a>.

  </p>
</details>

<details>
  <summary>
    7. One of the services is `adminer`, a database management tool.
    See how to <a href="/postgresql/how-to/manage#how-to-access-adminer">access it</a>.
  </summary>
  <p>
    Learn more about how to <a href="/postgresql/how-to/manage#how-to-use-psql-cli-on-your-workstation">use `psql`</a> command-line tool instead or how to <a href="/postgresql/how-to/export-import-data">import and export data</a> from your database.
  </p>
</details>

8. Feel free to make any changes to your project, fork the repo or connect your own. Also see other <a href="https://github.com/zeropsio?q=nginx&type=all&language=&sort=">Nginx</a> and <a href="https://github.com/zeropsio?q=postgresql&type=all&language=&sort=">PostgreSQL</a> recipes on our Github page.

<p>&nbsp;</p>

:::tip
Have you got any additional question? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::




As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-php-hello-world), a **_recipe_**, containing the most simple Nginx web application. The repo will be used as a source from which the app will be built.

:::tip
Follow the steps below and when everything is working as expected, fork the repo, try making various changes or be bold and connect your own.
:::

:::note
In the detail of each step, you can find a link with more information about the topic.
:::

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)

<details>
  <summary>2. Create a project.</summary>
  <p>
    Learn more about <a href="/features/infrastructure#projects">projects</a> in
    Zerops. See how to <a href="/nginx/how-to/create#create-a-project-description-file">import</a> a whole project into Zerops.
  </p>
</details>

<details>
  <summary>
    3. In the left menu, click on <b>Import services</b>, copy & paste the
    contents of this <a href="https://github.com/zeropsio/recipe-php-hello-world/blob/main/import-service/description.yaml">yaml file</a> and click on <b>Import service</b>.
  </summary>
  <p>
    Learn more about <a href="/features/infrastructure#services--containers">services</a> in Zerops and how to <a href="/nginx/how-to/create#add-nginx-service-to-an-existing-project">import a service</a> to an existing project.
  </p>
  <p>
    The yaml file includes a `buildFromGit` directive, which ensures
    a one-time build from Git repository source. See how to connect a <a href="/references/github-integration">Github</a> or <a href="/references/github-integration">Gitlab</a> repository to be able to
    trigger automatic builds & deploys.
  </p>
</details>

<details>
  <summary>4. Two pipelines are created, one for project creation and one for the service activation. Wait for both to finish.</summary>
  <p>
  Learn more about how the pipelines can be <a href="/nginx/how-to/trigger-pipeline">triggered</a> and about <a href="/nginx/how-to/build-process">build</a> and <a href="/nginx/how-to/deploy-process">deploy</a> processes of a Nginx application in Zerops.

Learn more about how to access <a href="/nginx/how-to/logs#build-log">build log</a> of your Nginx static service in Zerops.

  </p>
</details>

<details>
  <summary>
    5. In the service detail, open the <b>Public access & internal ports</b> section, and <b>Enable Zerops Subdomain</b>.
  </summary>
  <p>
    Learn more about how to <a href="/nginx/how-to/access">access</a> your Nginx
    static service in Zerops.
  </p>
</details>

<details>
  <summary>6. Once the pipeline has finished, click on the activated <i>subdomain</i> URL:<br/><br/> You should see a simple page with `Hello World!` printed.</summary>
  <p>
  Congratulations! You have created your first application in Zerops, and we hope to see your own projects soon.

For now, check out other features, such as <a href="/nginx/how-to/env-variables">environment variables</a>, <a href="/nginx/how-to/logs#runtime-log">runtime log</a> and <a href="/nginx/how-to/scaling">scaling</a>.

  </p>
</details>

7. Feel free to make any changes to your project, fork the repo or connect your own. Also see other <a href="https://github.com/zeropsio?q=nginx&type=all&language=&sort=">Nginx recipes</a> on our Github page.

<p>&nbsp;</p>

:::tip
Have you got any additional question? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::




<FAQ>
  <FAQItem question="Sample Question">sample answer</FAQItem>
</FAQ>




This quick start allows you to get hands-on experience of Zerops, whether you only want to see it in action or want to start small and scale up the project size later. The purpose of this guide is to get an existing Node.js application up and running easily.

If you are already familiar with Zerops and you are interested in more detailed guides for your own application, feel free to head straight to the [How to](/nodejs/how-to/create) section.

## Guides

We have created a repository, a _recipe_, containing the most simple Node.js web application, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics with one-service app.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-nodejs',
      label: 'Node.js + SQL database',
      customProps: {
        icon: Icons['github'],
        description: 'A more complex, multi-service application example.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=nodejs&type=all&language=&sort=',
      label: 'All Node.js recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspired.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



## Private internal access

Projects in Zerops represent a group of one or more services.
Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its [internal port](/nodejs/how-to/build-pipeline#ports).

To connect to your application with `app` hostname running on [internal port](/nodejs/how-to/build-pipeline#ports) `3000`, simply use `http://app:3000`

:::info
Do not use `https://` when communicating with Node.js from other runtime services in the same project. The internal communication is done over a private network and is isolated from other projects.
:::

### Use Node.js environment variables

Zerops creates default environment variables for each Node.js service to help you with connection within the same project. To avoid the need to copy the access parameters manually, use [generated environment variables](/nodejs/how-to/env-variables#generated-env-variables) of the Node.js service.

#### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Example:

To access the `API_TOKEN` env variable of the `app` service, use `app_API_TOKEN` as the env variable key.

Read more about [env variables](/nodejs/how-to/env-variables).

## Private access via VPN

### Start VPN connection

You can securely connect to your Node.js application from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)

### Access Node.js application through VPN

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/nodejs/how-to/env-variables) are available when connected through VPN. To connect to your Node.js application in Zerops set the hostname and [internal port](/nodejs/how-to/build-pipeline#ports) e.g. http://app:3000

:::info
Do not use `https://` when communicating with Node.js over the VPN. The security is assured by the VPN. The internal communication is done over a private network and is isolated from other projects.
:::

### Connect via SSH

Use the <a href="/references/ssh">`ssh` command</a> to connect to your service via SSH.

### Stop VPN connection

[Stop the Zerops VPN](/references/vpn#stop-vpn) in zCLI.

## Public access through zerops.io subdomain

By default, your Node.js service is not publicly accessible. To test your application, enable the [public access through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain).

## Public access through your domain

By default, your Node.js service is not publicly accessible. When your application is ready for production or if you want to test it on the production domain, [configure the public access through your domain](/features/access#public-access-through-your-domain).

## Public access from another Zerops project

All services of the same project share a dedicated private network. To connect to a service within the same project, just use the service hostname and its [internal port](/nodejs/how-to/build-pipeline#ports). Different projects are not connected inside Zerops. To connect to a runtime service from another Zerops project, you need to use public access either [through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain) or [through your domain](/features/access#public-access-through-your-domain).





Zerops provides a customizable build and runtime environment for your Node.js application.

## Add zerops.yaml to your repository

Start by adding `zerops.yaml` file to the **root of your repository** and modify it to fit your application:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: nodejs@latest

      # OPTIONAL. Set the operating system for the build environment.
      # os: ubuntu

      # OPTIONAL. Customize the build environment by installing additional packages
      # or tools to the base build environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # REQUIRED. Build your application
      buildCommands:
        - npm i
        - npm run build

      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles:
        - dist
        - package.json
        - node_modules

      # OPTIONAL. Which files / folders you want to cache for the next build.
      # Next builds will be faster when the cache is used.
      cache: node_modules

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base: nodejs@latest

      # OPTIONAL. Sets the internal port(s) your app listens on:
      ports:
        # port number
        - port: 3000

      # OPTIONAL. Customize the runtime Node.js environment by installing additional
      # dependencies to the base Node.js runtime environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Node.js application is started.
      # initCommands:
      #  - rm -rf ./cache

      # REQUIRED. Your Node.js application start command
      start: npm start
```

The top-level element is always `zerops`.

### Setup

The first element `setup` contains the **hostname** of your service. A runtime service with the same hostname must exist in Zerops.
Zerops supports the definition of multiple runtime services in a single `zerops.yaml`. This is useful when you use a monorepo. Just add multiple setup elements in your `zerops.yaml`:

```yaml
zerops:
  # definition for app service
  - setup: app
    build: ...
    run: ...

  # definition for api service
  - setup: api
    build: ...
    run: ...
```

Each service configuration contains at least two sections: **build** and **run**. Both sections are required to build and deploy your Node.js application in Zerops. If you'd like to use a readiness check, add an optional **deploy** section.

## Build pipeline configuration

### base

_REQUIRED._ Sets the base technology for the build environment.

Following options are available for Node.js builds:

<UnorderedCodeList data={data.nodejs.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: nodejs@latest
      ...
```

<p>
  The base build environment contains {data.alpine.default}, the selected
  major version of Node.js, <a href="/references/cli">Zerops command line tool</a>, `npm`, `yarn`, `git` and `npx` tools.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the build environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base:
        - nodejs@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [build base environments](/zerops-yaml/base-list#runtime-services).

To customize your build environment use the [prepareCommands](/nodejs/how-to/build-pipeline#preparecommands) attribute.

:::note
Modifying the base technology will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for more details about cache invalidation.
:::

### os

_OPTIONAL._ Sets the operating system for the build environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customized.
:::

:::note
Changing the OS setting will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache behavior.
:::

### prepareCommands

_OPTIONAL._ Customizes the build environment by installing additional dependencies or tools to the base build environment.

The base build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Node.js defined in the [base](/nodejs/how-to/build-pipeline#base) attribute
- [Zerops command line tool](/references/cli)
- `npm`, `yarn`, `git` and `npx` tools

To install additional packages or tools add one or more prepare commands:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: nodejs@latest

      # OPTIONAL. Customize the build environment by installing additional packages
      # or tools to the base build environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first build is triggered, Zerops will

1. create a build container
2. download your application code from your repository
3. run the prepare commands in the defined order

The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).

:::note
These commands are skipped when using cached environment. Modifying `prepareCommands` will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache invalidation.
:::

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/nodejs/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all prepare commands are finished, your custom build environment is ready for the build phase.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### buildCommands

_REQUIRED._ Defines build commands.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: nodejs@latest

      # REQUIRED. Build your application
      buildCommands:
        - npm i
        - npm run build
      ...
```

At least one command is required. Zerops triggers each command in the defined order in a dedicated build container.

Before the build commands are triggered the build container contains:

1. base environment defined by the [base](/nodejs/how-to/build-pipeline#base) attribute
2. optional customisation of the base environment defined in the [prepareCommands](/nodejs/how-to/build-pipeline#preparecommands) attribute
3. your application code

#### Run build commands as a single shell instance

Use following syntax to run all commands in the same environment context. For example, if one command changes the current directory, the next command continues in that directory. When one command creates an environment variable, the next command can access it.

```yaml
buildCommands:
  - |
    npm i
    npm run build
```

#### Run build commands as a separate shell instances

When the following syntax is used, each command is triggered in a separate environment context. For example, each shell instance starts in the home directory again. When one command creates an environment variable, it won't be available for the next command.

```yaml
buildCommands:
  - npm i
  - npm run build
```

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/nodejs/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the --verbose option.

```yaml
buildCommands:
  - npm i --verbose
  - npm run build
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the deploy phase.

### deployFiles

_REQUIRED._ Selects which files or folders will be deployed after the build has successfully finished. To filter out specific files or folders, use <a href="#deployignore">`.deployignore`</a> file.

```yaml
# REQUIRED. Select which files / folders to deploy after
# the build has successfully finished
deployFiles:
  - dist
  - package.json
  - node_modules
```

Determines files or folders produced by your build, which should be deployed to your runtime service containers.

The path starts from the **root directory** of your project (the location of `zerops.yaml`). You must enclose the name in quotes if the folder or the file name contains a space.

The files/folders will be placed into `/var/www` folder in runtime, e.g. `./src/assets/fonts` would result in `/var/www/src/assets/fonts`.

#### Examples

Deploys a folder, and a file from the project root directory:

```yaml
deployFiles:
  - dist
  - package.json
```

Deploys the whole content of the build container:

```yaml
deployFiles: .
```

Deploys a folder, and a file in a defined path:

```yaml
deployFiles:
  - ./path/to/file.txt
  - ./path/to/dir/
```

#### How to use a wildcard in the path

Zerops supports the `~` character as a wildcard for one or more folders in the path.

Deploys all `file.txt` files that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/file.txt
```

Deploys all folders that are located in any path that begins with `/path/to/`

```yaml
deployFiles: ./path/to/~/
```

Deploys all folders that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/
```

:::note Example
By default, `./src/assets/fonts` deploys to `/var/www/src/assets/fonts`, keeping the full path. Adding `~`, like `./src/assets/~fonts`, shortens it to `/var/www/fonts`
:::
#### .deployignore

Add a `.deployignore` file to the root of your project to specify which files and folders Zerops should ignore during deploy. The syntax follows the same pattern format as <a href="https://git-scm.com/docs/gitignore#_pattern_format">`.gitignore`</a>.

To ignore a specific file or directory path, start the pattern with a forward slash (`/`). Without the leading slash, the pattern will match files with that name in any directory.

:::tip
For consistency, it's recommended to configure both your `.gitignore` and `.deployignore` files with the same patterns.
:::

Examples:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      deployFiles: ./
```

```text title=".deployignore"
/src/file.txt
```
The example above ignores `file.txt` only in the root src directory.
```text title=".deployignore"
src/file.txt
```
This example above ignores `file.txt` in ANY directory named `src`, such as:
- `/src/file.txt`
- `/folder2/folder3/src/file.txt`
- `/src/src/file.txt`

:::note
`.deployignore` file also works with <a href="/references/cli/commands#deploy">`zcli service deploy`</a> command.
:::

### cache

_OPTIONAL._ Defines which files or folders will be cached for the next build.

```yaml
# OPTIONAL. Which files / folders you want to cache for the next build.
# Next builds will be faster when the cache is used.
cache: file.txt
```

The cache attribute helps optimize build times by preserving specified files between builds.

The cache attribute supports the [~ wildcard character](#how-to-use-a-wildcard-in-the-path).

Learn more about the [build cache system](/features/build-cache) in Zerops.

### envVariables

_OPTIONAL._ Defines the environment variables for the build environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      base: nodejs@latest
        …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/nodejs/how-to/env-variables) in Zerops.

## Runtime configuration

### base

_OPTIONAL._ Sets the base technology for the runtime environment.
If you don't specify the `run.base` attribute, Zerops keeps the current Node.js version for your runtime.

Following options are available for Node.js builds:

<UnorderedCodeList data={data.nodejs.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: nodejs@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
        base: nodejs@latest
      ...
```

<p>
  The base runtime environment contains {data.alpine.default}, the
  selected major version of Node.js, Zerops command line tool, `npm`, `yarn`, `git` and `npx` tools.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the runtime environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: nodejs@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base:
        - nodejs@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [run base environments](/zerops-yaml/base-list).

To customize your build environment use the `prepareCommands` attribute.

### os

_OPTIONAL._ Sets the operating system for the runtime environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customized.
:::

### ports

_OPTIONAL._ Specifies one or more internal ports on which your application will listen.

Projects in Zerops represent a group of one or more services. Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its internal port.

For example, to connect to a Node.js service with hostname = "app" and port = 3000 from another service of the same project, simply use `app:3000`. Read more about [how to access a Node.js service](/nodejs/how-to/access).

Each port has following attributes:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">port</td>
      <td className="w-fit">Defines the port number. You can set any port number between <em>10</em> and <em>65435</em>. Ports outside this interval are reserved for internal Zerops systems.</td>
    </tr>
    <tr>
      <td className="w-fit">protocol</td>
      <td className="w-fit"><strong>Optional.</strong> Defines the protocol. Allowed values are <code>TCP</code> or <code>UDP</code>. Default value is <code>TCP</code>.</td>
    </tr>
    <tr>
      <td className="w-fit">httpSupport</td>
      <td className="w-fit"><strong>Optional.</strong> <code>httpSupport = true</code> is the default setting for TCP protocol. Set <code>httpSupport = false</code> if a web server isn't running on the port. Zerops uses this information for the configuration of <a href="/features/access">public access</a>. <code>httpSupport = true</code> is available only in combination with the TCP protocol.</td>
    </tr>
  </tbody>
</table>

### prepareCommands

_OPTIONAL._ Customises the Node.js runtime environment by installing additional dependencies or tools to the runtime base environment.

<p>
  The base Node.js environment contains {data.alpine.current} the selected
  major version of Node.js, <a href="/references/cli">Zerops command line tool</a> and `npm`, `yarn`, `git` and `npx` tools. To install
  additional packages or tools add one or more prepare commands:
</p>

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Node.js runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first deploy with a defined prepare attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/nodejs/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `prepareCommands` commands in the defined order

#### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/nodejs/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

#### Cache of your custom runtime environment

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the [build.addToRunPrepare](#copy-folders-or-files-from-your-build-container) and `run.prepareCommands` attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.

{/* TODO screenshot** */}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### Copy folders or files from your build container

<p>
  The prepare runtime container contains {data.alpine.current}, the
  selected major version of Node.js, <a href="/references/cli">Zerops command line tool</a> and `npm`, `yarn`, `git` and `npx` tools.
</p>

The prepare runtime container does not contain your application code nor the built application. If you need to copy some folders or files from the build container to the runtime container (e.g. a configuration file) use the `addToRunPrepare` attribute in the [build section](#build-pipeline-configuration).

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...
      addToRunPrepare: ./runtime-config.yaml

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Node.js runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

In the example above Zerops will copy the `runtime-config.yaml` file from your build container **after the build has finished** into the new **prepare runtime** container. The copied files and folders will be available in the `xxx` folder in the new prepare runtime container before the prepare commands are triggered.

### initCommands

_OPTIONAL._ Defines one or more commands to be run each time a new runtime container is started or a container is restarted.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Node.js application is started.
      initCommands:
        - rm -rf ./cache
```

These commands are triggered in the runtime container before your Node.js application is started via the [start command](/nodejs/how-to/build-pipeline#start).

Use init commands to clean or initialise your application cache or similar operations.

:::caution
The init commands will delay the start of your application each time a new runtime container is started (including the [horizontal scaling](/nodejs/how-to/scaling#horizontal-auto-scaling) or when a runtime container is restarted).

Do not use the init commands for customising your runtime environment. Use the [run:prepareCommands](/nodejs/how-to/build-pipeline#preparecommands-1) attribute instead.
:::

#### Command exit code

If any of the `initCommands` fails, it returns an exit code other than 0, but deploy is **not** canceled. After all init commands are finished, regardless of the status code, the application is started. Read the [runtime log](/nodejs/how-to/logs#runtime-log) to troubleshoot the error.

#### Single or separated shell instances

You can configure your `initCommands` to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### envVariables

_OPTIONAL._ Defines the environment variables for the runtime environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to run your application ====
    run:
      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/nodejs/how-to/env-variables) in Zerops.

### start

_REQUIRED._ Defines the start command for your Node.js application.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Node.js application start command
      start: npm start
```

We recommend starting your Node.js application using `npm start`.

### health check

_OPTIONAL._ Defines a health check.

`healthCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the health check to request a local URL using a HTTP GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Node.js application start command
      start: npm start

      # OPTIONAL. Define a health check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      healthCheck:
        httpGet:
          port: 80
          path: /status
```

Read more about how the [health check works] in Zerops.

#### exec

Configures the health check to run a local command.
Following attributes are available:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/nodejs/how-to/create#set-secret-environment-variables">environment variables</a> as your Node.js application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Node.js application start command
      start: npm start

      # OPTIONAL. Define a health check with a shell command.
      healthCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [health check works] in Zerops.

### crontab

_OPTIONAL._ Defines cron jobs.

Setup cron jobs in the following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app

    # ==== how to run your application ====
    run:
      crontab:
        # REQUIRED. Sets the command to execute:
        - command: ""
        # REQUIRED. Sets the interval time to execute:
          timing: "0 * * * *"
```

Read more about setting up [cron](/references/cron) in Zerops.

## Deploy configuration

### readiness check

_OPTIONAL._ Defines a readiness check. Read more about how the [readiness check works](/nodejs/how-to/deploy-process#readiness-checks) in Zerops.

`readinessCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the readiness check to request a local URL using a http GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        httpGet:
          port: 80
          path: /status

    # ==== how to run your application ====
    run: ...
```

Read more about how the [readiness check works](/nodejs/how-to/deploy-process#readiness-checks) in Zerops.

#### exec

Configures the readiness check to run a local command.
Following attributes are available:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/nodejs/how-to/create#set-secret-environment-variables">environment variables</a> as your Node.js application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [readiness check works](/nodejs/how-to/deploy-process#readiness-checks) in Zerops.




<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Customize NodeJS build environment

The default NodeJS build environment contains:

- <span>{data.alpine.default}</span>
- Selected version of Node.js when the runtime service was created.
- [zCLI](/references/cli)
- NPM, Yarn, Git and NPX tools

:::note
To use Ubuntu instead of the default Alpine, set the [build.os](/zerops-yaml/specification#os-) attribute.

Additional packages and tools can be installed using [build.prepareCommands](/zerops-yaml/specification#preparecommands-).
:::


## Description of the build process

Zerops starts a temporary build container and performs following actions:

1. Installs the build environment:
   - Sets up base system and Go runtime
   - Restores cached files if available (based on `build.cache` configuration)
   - Validates cache against current `build.os`, `build.base`, and `build.prepareCommands`
2. Downloads your application source code from [GitHub ↗](https://www.github.com), [GitLab ↗](https://www.gitlab.com) or via [Zerops CLI](/references/cli)
3. Optionally [customizes the build environment](#customize-nodejs-build-environment)
4. Runs the build commands
5. Uploads the application artefact to the internal Zerops storage
6. Preserves specified files for future builds (based on `build.cache` configuration)
7. Optionally [customizes the runtime environment](/nodejs/how-to/customize-runtime)
8. [Deploys your application](/nodejs/how-to/deploy-process)

The build container is automatically deleted after the build has finished or failed.

## Cancel running build

When you know that the running build is not correct and you want to cancel it, you can do it in Zerops GUI. Go to the service detail, open the list of running processes and click on the **Open pipeline detail** button. Then click on the **Cancel build** button.

<p align="center">
  <img
    src="/img/screenshots/cancel_running_build.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

:::caution
The build cancellation is available before the build pipeline is finished. When the build is finished, the deployment cannot be cancelled.
:::

## Customize Node.js build environment

The default Node.js build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Node.js defined in `zerops.yaml` [build.base](/nodejs/how-to/build-pipeline#base) parameter
- [zCLI](/references/cli), Zerops command line tool
- `npm`, `yarn`, `git` and `npx` tools

If you prefer the Ubuntu OS instead of Alpine, set the [build.os](/nodejs/how-to/build-pipeline#os) attribute to `ubuntu`. To install additional packages or tools add one or more [build.prepareCommands](/nodejs/how-to/build-pipeline#preparecommands) commands to your `zerops.yaml`.

:::info
The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).
:::

## Node.js build hardware resources

Build of your Node.js application is run in a separate build container with following resource configuration:

| HW resource   | Minimum | Maximum |
| ------------- | ------- | ------- |
| **CPU cores** | 6       | 20      |
| **RAM**       | 8 GB    | 8 GB    |
| **Disk**      | 1 GB    | 100 GB  |

The build container is always started with the minimum hardware resources and scales vertically up to the maximum resources.

:::info
Hardware resources of the build containers are not charged. The build costs are covered by the standard Zerops [project fee](https://zerops.io/#pricing).
:::

## Build time limit

The time limit for the whole build pipeline is **1 hour**. After 1 hour, Zerops will terminate the build pipeline and delete the build container.

## Troubleshooting build-related problems

### Failure of a build prepare command

If any [prepare command](/nodejs/how-to/build-pipeline#preparecommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/nodejs/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom build environment is ready for the build phase.

### Invalidate the build cache
If you encounter unexpected build behavior or dependency issues, the problem might be related to [cached build data](/features/build-cache). While Zerops maintains the build cache to speed up deployments, sometimes you may need to start fresh.
To invalidate the build cache:

1. Go to your service detail in Zerops GUI
2. Choose **Pipelines & CI/CD Settings** from the left menu
3. Click on the **Invalidate build cache** button

This will force Zerops to run the next build clean, including all prepare commands, which can help resolve cache-related issues. After invalidation, your next build will also create a fresh cache.

### Failure of a build command

If any [build command](/nodejs/how-to/build-pipeline#buildcommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/nodejs/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the `--verbose` option.

```yaml
buildCommands:
  - npm i --verbose
  - npm run build
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the [deploy](/nodejs/how-to/deploy-process) phase.



Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart Node.js service in Zerops GUI

To stop the Node.js service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)*/}

To start the stopped Node.js service choose the **Start** item from the same menu.

To restart the Node.js service choose the **Restart** item from the same menu.

## Stop and start Node.js using zCLI

zCLI is the Zerops command-line tool. To stop and start the Node.js service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and services to choose from.
:::




Zerops provides a powerful Node.js runtime service with extensive build support. The Node.js runtime is highly scalable and customizable to suit your development and production needs. With just a few clicks or commands, you can have a production-ready Node.js environment up and running in no time.

## Create a Node.js service using Zerops GUI

First, set up a project in the Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu under the **Services** section. From there, you can add a new Node.js service:

<Video
  src="/vids/services/nodejs.webm"
  type="video/webm"
/>

### Choose a Node.js version

Zerops supports the following Node.js versions:

<UnorderedList data={data.nodejs.readable} />

:::info
You can easily [upgrade](/nodejs/how-to/upgrade) the major version at any time later.
:::

### Set a hostname

Enter a unique service identifier like "app", "cache", "gui", etc. Duplicate services with the same name within the same project are not allowed.

#### Limitations:

- Maximum 25 characters
- Must contain only lowercase ASCII letters (a-z) or numbers (0-9)

:::caution
The hostname is fixed after the service is created and cannot be changed later.
:::

### Set secret environment variables

Add environment variables with sensitive data, such as passwords, tokens, salts, certificates, etc. These will be securely saved inside Zerops and added to your runtime service upon start.

Setting secret environment variables is optional. You can always set them later in the Zerops GUI.

Read more about the [different types of environment variables](/nodejs/how-to/env-variables#types-of-env-variables-in-zerops) in Zerops.

### Configure auto scaling

Zerops automatically scales Node.js services both vertically and horizontally. Vertical scaling adjusts the hardware resources (CPU, RAM, and disk) of a Node.js container, while horizontal scaling adds or removes entire containers.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. The power your application receives depends on the other applications running on the same CPU core. In the best-case scenario, your application gets 10/10 of the CPU core power, and 1/10 in the worst-case scenario.

**Dedicated**
The CPU core is dedicated exclusively to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

You can choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto scaling

Vertical auto scaling has the following default configuration:

<ResourceTable />

Node.js services always start with the minimal resources.

In most cases, the default parameters will work without issues. If you need to limit the cost of the Node.js service, you can lower the maximum resources. Zerops will never scale above the selected maximums.

If you experience insufficient Node.js performance or capacity, you can increase the minimum resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine-tune](/nodejs/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application's needs.
:::

:::info
You can change the vertical auto scaling parameters at any time.
:::

#### Horizontal auto scaling

When a container needs more CPU or RAM but is already consuming the maximum resources defined for vertical auto scaling, Zerops will add a new container to your Node.js service. When your Node.js service doesn't need as much power and all containers are vertically scaled down such that their CPU allocation is near the minimum resources, Zerops will gradually remove entire containers.

Horizontal auto scaling has the following default configuration:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Value</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>Minimum containers</strong></td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>Maximum containers</strong></td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Node.js services always start with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

[Learn more](/nodejs/how-to/scaling) about Node.js auto scaling in Zerops.

#### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will automatically start a new container and deploy your application. However, the application will be unavailable for a short period. This mode is recommended for non-critical applications or development environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers based on your application's load. An application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed down to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents temporary outages in case any of the Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically, and the broken container will be deleted.

:::caution
Make sure your application is designed to run in multiple containers.
:::

## Create a Node.js service using zCLI

zCLI is the Zerops command-line tool. To create a new Node.js service via the command line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/nodejs/how-to/create#create-a-project-description-file)
3. [Create a project with a Node.js and PostgreSQL service](#full-example)

### Create a project description file

Zerops uses a YAML format to describe the project infrastructure.

#### Basic example:

Create a directory called `my-project`. Inside the `my-project` directory, create a `description.yaml` file with the following content:
```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in nodejs@{version} format
    type: nodejs@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes your future project infrastructure. The project will contain one Node.js version 20 service with default [auto scaling](/nodejs/how-to/scaling) configuration. Hostname will be set to "app", the internal port(s) the service listens on will be defined later in the [zerops.yaml](/nodejs/how-to/build-pipeline#ports). Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

#### Full example:

Create a directory my-project. Create an description.yaml file inside the my-project directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a Node.js and PostgreSQL database
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in nodejs@{version} format
    type: nodejs@latest
    # optional: vertical auto scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
  - # second service hostname
    hostname: db
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"non_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain a Node.js service and a [PostgreSQL](/postgresql/overview) service.

Node.js service with "app" hostname, the internal port(s) the service listens on will be defined later in the [zerops.yaml](/nodejs/how-to/build-pipeline#ports). Node.js service will run on version 20 with a custom vertical and horizontal scaling. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The hostname of the PostgreSQL service will be set to "db". The [single container](/postgresql/how-to/create#single-container) mode will be chosen and the default [auto scaling configuration](/postgresql/how-to/create#set-auto-scaling-configuration) will be set.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Limitations</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>name</strong></td>
      <td className="w-fit">The name of the new project. Duplicates are allowed.</td>
      <td className="w-fit"></td>
    </tr>
    <tr>
      <td className="w-fit"><strong>description</strong></td>
      <td className="w-fit"><strong>Optional.</strong> Description of the new project.</td>
      <td className="w-fit">Maximum 255 characters.</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>tags</strong></td>
      <td className="w-fit"><strong>Optional.</strong> One or more string tags. Tags do not have a functional meaning, they only provide better orientation in projects.</td>
      <td className="w-fit"></td>
    </tr>
  </tbody>
</table>

At least one service in `services:` section is required. You can create a project with multiple services. The example above contains Node.js and PostgreSQL services but you can create a `description.yaml` with your own combination of [services](/features/infrastructure).

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>hostname</strong></td>
      <td className="w-fit">
        The unique service identifier.
         
        The hostname of the new database will be set to the `hostname` value.
         
        <strong>Limitations:</strong>
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>type</strong></td>
      <td className="w-fit">
        Specifies the service type and version.
        <br />
        See what [Node.js service types](/references/import-yaml/type-list#runtime-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>verticalAutoscaling</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Defines <a href="/nodejs/how-to/create#set-auto-scaling-configuration">custom vertical auto scaling parameters</a>.
        <br />
        All verticalAutoscaling attributes are optional. Not specified attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- cpuMode</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minCpu/maxCpu</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minCpu or maxCpu in CPU cores (integer).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minRam/maxRam</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minRam or maxRam in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minDisk/maxDisk</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minDisk or maxDisk in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>minContainers</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Default = 1. Defines the minimum number of containers for <a href="/nodejs/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.
         
        <strong>Limitations:</strong>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>maxContainers</strong></td>
      <td className="w-fit">
        Defines the maximum number of containers for <a href="/nodejs/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.
         
        <strong>Limitations:</strong>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>envSecrets</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Defines one or more secret env variables as a key value map. See env variable <a href="/nodejs/how-to/env-variables#env-variable-restrictions">restrictions</a>.
      </td>
    </tr>
  </tbody>
</table>

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>
### Add Node.js service to an existing project

#### Example:

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in nodejs@{version} format
    type: nodejs@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one Node.js service version 20 with default [auto scaling](/nodejs/how-to/scaling) configuration will be added to your project. Hostname of the new service will be set to `app`. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The content of the `services:` section of `import.yaml` is identical to the project description file. The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the import.yaml file is 100 kB.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline_custom_runtime.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>


### Runtime Environment

The default Node.js runtime environment contains:

- <span>{data.alpine.default}</span>
- Selected version of Node.js when the runtime service was created.
- [zCLI](/references/cli)
- NPM, Yarn, Git and NPX tools

:::note
To use Ubuntu instead of the default Alpine, set the [run.os](/zerops-yaml/specification#os--1) attribute.

Additional packages and tools can be installed using [run.prepareCommands](/zerops-yaml/specification#preparecommands--1).
:::

When the first deploy with a defined `prepareCommands` attribute is triggered, Zerops will

1. Create a prepare runtime container
2. Optionally: [copy selected folders or files from your build container](/nodejs/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. Run the run.prepareCommands in the defined order

### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/nodejs/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

The prepare runtime container is automatically deleted after the prepare runtime phase has finished or failed.

### Custom runtime environment cache

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the <a href="/nodejs/how-to/build-pipeline#copy-folders-or-files-from-your-build-container">build.addToRunPrepare</a> and <a href="/nodejs/how-to/build-pipeline#preparecommands-1">run.prepareCommands</a> attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.

{/* **TODO screenshot** */}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.



## Delete Node.js service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete Node.js using zCLI

zCLI is the Zerops command-line tool. To delete the Node.js service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step3.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Application artefact

When the [build phase](/nodejs/how-to/build-process) is finished, the application artefact is stored in the internal Zerops storage and the build container is deleted.

If you triggered the deploy pipeline [manually](/nodejs/how-to/trigger-pipeline#manual-deploy-using-zerops-cli) using Zerops CLI, the application artefact is also uploaded to the internal Zerops storage.

Zerops uses the stored artefact to deploy the identical version of your application each time a new container is started:

- when a new application version is deployed
- when the application [scales horizontally](/nodejs/how-to/create#horizontal-auto-scaling)
- when a runtime container fails and a new container is started automatically

## First deploy

When your application is deployed for the first time, Zerops will start one or more runtime containers based on the service [auto scaling settings](/nodejs/how-to/scaling).

Zerops performs following actions for each new container:

1. Installs the runtime environment
2. Downloads the application artefact from the internal storage
3. Optionally runs the [init commands](/nodejs/how-to/build-pipeline#initcommands)
4. Starts your application using the [start command](/nodejs/how-to/build-pipeline#start)
5. Optionally waits until the [readiness check](/nodejs/how-to/build-pipeline#readiness-check) succeeds
6. The container is now active and receives incoming requests.

Services with multiple containers are deployed in parallel.

:::info
If your application needs to be initialized in each runtime container, add [init commands](/nodejs/how-to/build-pipeline#initcommands) to `zerops.yaml`.
:::

:::caution
Do not use the `initCommands` for customising your runtime environment. See [how to customize the runtime environment](/nodejs/how-to/build-pipeline#preparecommands-1).
:::

## Further deploys

When a previous version of your application is already running, Zerops will start new containers. The count of new containers will be the same as the count of existing containers.

Zerops performs the identical actions for each new container as the first deployment.
When all new containers are started your service contains both new and old versions for a short period of time.

The old containers are then removed from the project balancer so they don't receive new requests. The Node.js process inside each of the old containers is terminated and all old containers are gradually deleted.

## Readiness checks

If your application isn't ready to handle requests right after it is started via the [start command](/nodejs/how-to/build-pipeline#start), configure a [readiness check](/nodejs/how-to/build-pipeline#readiness-check) in your `zerops.yaml`.

If the readiness check is defined, Zerops will:

1. Start your application
2. Perform a readiness check
3. If the readiness check fails, wait 5 seconds and repeat step 2.
4. If the readiness check succeeds, set the container as active.

Application in the runtime container with a pending readiness check won't receive any incoming requests. Only active containers receive incoming requests to your Node.js service.

If the readiness check is still failing after 5 minutes, the specific runtime container is marked as failed and Zerops will delete it, create a new runtime container and perform the deploy.

The <a href="/nodejs/how-to/build-pipeline#httpget">`httpGet`</a> readiness check is successful when the URL returns HTTP status code `2xx`. The timeout is 5 seconds. When the URL returns a `3xx` HTTP status, the readiness check HTTP client will follow the redirect.

The <a href="/nodejs/how-to/build-pipeline#exec">`exec.command`</a> readiness check is successful when the command returns status code 0. The timeout is 5 seconds.

Read the [runtime log](/nodejs/how-to/logs#runtime-log) to troubleshoot failed readiness checks.

## Application versions

Zerops keeps 10 last versions of your application in the internal storage.

The list of application versions is available in Zerops GUI. Go to the service detail and choose **Service dashboard & runtime containers** from the left menu. The active version is highlighted, show all archived version by clicking on the button below.

<p align="center">
  <img
    src="/img/screenshots/pipeline_history.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

The pipeline detail is accessible from the additional menu. The pipeline detail contains

- The pipeline config (`zerops.yaml`) that was used for the selected version
- The build log (if available)
- The prepare runtime log (if available)

You can download the build artefact of the selected version or delete an inactive version manually.

## Restore an archived version

You can restore an archived version by choosing the **Activate** item from the additional menu.
Zerops will deploy the selected version and the active version will be archived.

The environment variables will be restored to the latest moment when the selected version was active.



Environment variables help you run your application in different environments. They allow you to isolate all specific environment aspects from your application code and keep your app encapsulated. You can create several projects in Zerops that represent different environments (development, stage, production) or even each developer can have a project with its own environment.

In Zerops you do not have to create a `.env` file manually. Zerops handles the environment variables for you.

## Types of env variables in Zerops

There are 3 different sets of env variables in Zerops:

<table className="w-fit my-1.5">
  <thead>
    <tr className="text-center  rounded-lg">
      <th className="w-fit"><strong>Type</strong></th>
      <th className="w-fit"><strong>Environment</strong></th>
      <th className="w-fit"><strong>Defined in</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">build</td>
      <td className="w-fit"><a href="/nodejs/how-to/build-pipeline#envvariables">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/nodejs/how-to/build-pipeline#envvariables-1">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">secret</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/nodejs/how-to/env-variables#set-secret-env-variables-in-zerops-gui">Zerops GUI</a></td>
    </tr>
  </tbody>
</table>

Use the [secret env variables](/nodejs/how-to/create#set-secret-environment-variables) for all sensitive data you don't want to store in your application code. Secret env variables are also useful if you need for testing where you need to change the value of some env variables frequently. Secret variables are managed in Zerops GUI and you don't have to redeploy your application.

The basic build and runtime env variables are listed in your [zerops.yaml](/zerops-yaml/specification) and deployed together with your application code. When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your zerops.yaml and redeploy your application to Zerops.

You can [reference](/nodejs/how-to/env-variables#reference-a-local-variable-in-another-variable-value) another variable of the same service or even a variable of [another service](/nodejs/how-to/env-variables#reference-a-variable-of-another-project-service) within the same project.

## Set secret env variables in Zerops GUI

Use secret variables to store passwords, tokens and other sensitive information that shouldn't be part of your repository and listed in zerops.yaml.

<p align="center">
  <img
    src="/img/screenshots/runtime_secret_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

You can set env variables when you [create](/nodejs/how-to/create) a new Node.js service or you can set them later.

To configure env variables for an existing service, go to the service detail and choose **Environment variables** in the left menu. Scroll to the **Secret variables** section and click on the **Add secret variable** button and set variable key and value.

You can edit or delete env variables that you've created by clicking on the menu on the right side of each row.

The changes you've made to environment variables will be automatically applied to all containers of your project's services.

:::caution
You need to **restart** the runtime service after you update environment variables. The Node.js process running in the container receives the list env variables only when it starts. Update of the env variables while the Node.js process is running does not affect your application.
:::

## Set basic build env variables in zerops.yaml

To set basic env variables for the build environment, add the `envVariables` attribute to the build section in your `zerops.yaml`

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
       …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Set basic runtime env variables in zerops.yaml

To set basic env variables for the runtime environment, add the `envVariables` attribute to the runtime section in your `zerops.yaml`.

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    run:
       …

      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        NODE_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Env variable restrictions

**key**

- must satisfy the following regular expression: `[a-zA-Z_]+[a-zA-Z0-9_]*`
- all variable keys in the same service must be unique regardless of case
- keys are case sensitive

**value**

- must contain only ASCII characters
- the _End of Line_ character is forbidden

These restrictions apply to all [types of env variables](/nodejs/how-to/env-variables#types-of-env-variables-in-zerops).

## Referencing other env variables

You can reference another variable of the same service using `${key}` in your variable value. You can even reference a variable from a different service using `${hostname_key}`. The referenced variable doesn't need to exist when you are entering your variable.

### Reference a local variable in another variable value

| Variable key | Variable value      | Computed variable value |
| ------------ | ------------------- | ----------------------- |
| id           | 12345               | 12345                   |
| hostname     | app                 | app                     |
| name         | `${id}-${hostname}` | 12345-app               |

### Reference a variable of another project service

Let's say your project contains two PostgreSQL services `dbtest` and `dbprod`. Both services have a `connectionString` variable. Then you can create a `dbConnectionString` env variable in your Node.js runtime and set `${dbtest_connectionString}` as the variable value. Zerops will fill in the value of the `connectionString` variable of the `dbtest` service.

When you change the `dbConnectionString` value to `${dbprod_connectionString}`, Zerops will fill in the value of the `connectionString` variable of the `dbprod` service.

:::caution
When you change the value of the `connectionString` variable in the service `dbtest` you need to **restart** the Node.js service. The Node.js process running in the container receives the list env variables only when it starts. Update of the env variables while the Node.js process is running does not affect your application.
:::

## Generated env variables

Zerops creates several helper variables when a Node.js service is created, e.g. `hostname`, `PATH`. Some helper variables are read-only (`hostname`), others are editable (`PATH`). Generated variables cannot be deleted.

Generated env variables are listed on the **Environment variables** page. Scroll to the **Generated variables** section.

<p align="center">
  <img
    src="/img/screenshots/nodejs_generated_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## How to read env variables from your Node.js app

Zerops passes all environment variables from all project services when your Node.js app is deployed and started.

To access the local environment variable i.e. the variable set to this Node.js service in your app, use:

```sh
process.env.YOUR_VARIABLE_KEY_HERE
```

## How to read env variables of another service

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Examples:

To access the `connectionString` env variable of the `mariadb1` service, use `mariadb1_connectionString` as the env variable key.
To access the `password` env variable of the `mariadb2` service, use `mariadb2_password` as the env variable key.

## How to read runtime env variables in the build environment

You can use runtime env variables in the build environment using the `RUNTIME_` prefix. For example if you have a runtime variable with the `connectionString` key, use the `RUNTIME_connectionString` to read the variable in the build environment. This rule applies both for basic and secret runtime variables.

## Basic and secret env variable with the same key

If you create a secret env variable and a basic runtime env variable with the same key, Zerops saves the basic runtime env variable from your zerops.yaml and ignores the secret env variable.

If you create a basic build env variable and a runtime env variable with the same key, Zerops saves both because the build and runtime environments have separate sets of env variables.



## Zerops GUI

In Zerops GUI, go to the service detail page and choose **Service containers & resources overview** and scroll down to the list of containers.

<p align="center">
  <img
    src="/img/screenshots/nodejs_containers_list.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Then click on the file browser icon and the file browser opens:

<p align="center">
  <img
    src="/img/screenshots/nodejs_file_browser.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

If your service is in the [HA mode], you can switch between containers in the top left corner.

## zCLI & SSH

You can connect to the container via SSH with the Zerops CLI and browse its files.
How to [connect to your service via SSH](/references/ssh).



Zerops provides 3 different logs:

- [build log](#build-log)
- [prepare runtime log](#prepare-runtime-log)
- [runtime log](#runtime-log)

## How to access logs

### Build log

#### Zerops GUI

To access a build log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Build log**. The build log button is available only if the [build pipeline](/nodejs/how-to/trigger-pipeline) was triggered for the selected deploy.

#### zCLI

To access a build log in Zerops CLI use

```sh
zcli service log --showBuildLogs
```

Read more about the [zcli service log](/references/cli/access-logs) command.

### Prepare runtime log

#### Zerops GUI

To access a prepare runtime log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Prepare runtime log**. The prepare runtime log button is available only if the [prepare runtime pipeline](/nodejs/how-to/build-pipeline#preparecommands-1) was triggered for the selected deploy.

#### zCLI

_Prepare runtime log is currently not supported in zCLI._

### Runtime log

#### Zerops GUI

To access a runtime log in Zerops GUI, go to the service detail and choose **Runtime log** in the left menu.

<p align="center">
  <img
    src="/img/screenshots/nodejs_runtime_log.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Each runtime container has its own log. If your service has multiple containers, select the container in the log header.

You can filter log records by minimum severity or by time.

#### zCLI

To access the log of the runtime containers in Zerops CLI use

```sh
zcli service log
```

Read more about the [zcli service log](/references/cli/access-logs) command.

## Node.js logging configuration

Zerops logs all messages sent

- to the standard error (`stderr`)
- to the standard output (`stdout`)
- via the Node.js `console.log` method

### Severity level

By default the `console.log` creates a message with the `Informational (6)` severity.

Add a severity number in the `<N>` format as a prefix to set a custom severity as shown below:

```js
console.log('A message with the informational severity ...');
console.log('<0>Emergency (0) severity > system is unusable.');
console.log('<1>Alert (1) severity > action must be taken immediately.');
console.log('<2>Critical (2) severity > critical conditions.');
console.log('<3>Error (3) severity > error conditions.');
console.log('<4>Warning (4) severity > warning conditions.');
console.log('<5>Notice (5) severity > normal, but significant, condition.');
console.log('<6>Informational (6) severity > informational message.');
console.log('<7>Debug (7) severity > debug-level message.');
```

:::info

`console.info`, `console.warn`, `console.debug`
, and `console.error` are just aliases to the `
  console.log
` method. They don't set the appropriate severity number. Use the `
  &lt;N&gt;
` prefix instead. :::




Zerops performs an automated scaling of hardware resources required to run your runtime application based on its usage. If the current use of your application does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your application is under heavy load or needs to store more data, then auto scaling increases the resources to make sure it runs smoothly.

## Vertical and horizontal auto scaling

Each application you deploy starts with the minimum hardware resources: **CPU** cores, **RAM** and **Disk**. Zerops monitors the usage of these 3 resources and if the usage exceeds a set threshold, more CPU cores, RAM or Disk is allocated to the service. This is called **vertical scaling**.

<p align="center">
  <Image
    lightImage="/img/gui/resources.webp"
    darkImage="/img/gui/resources.webp"
    alt="Resources of a Zerops service"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

**Horizontal scaling** adds or removes whole containers.

Zerops has a preference for vertical scaling because it's faster and more precise. If the vertical auto scaling hits the defined maximum a new container is started automatically. When your application doesn't need so much power and all containers are vertically scaled down, Zerops will gradually remove whole containers.

<p align="center">
  <img
    src="/img/screenshots/scaling2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Configure auto scaling

To change the auto scaling settings go to the Node.js service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### CPU mode

#### Shared

Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

#### Dedicated

The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

Node.js service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Node.js service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Node.js performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Node.js service. When your Node.js service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Node.js service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your application starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your application.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your application doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

By default Zerops keeps a minimum free RAM in each container. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your application need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 0.125 GB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the application is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each Node.js service. Zerops will never scale above the entered values. If your application is in [highly available mode], maximal resources are identical for all containers of the Node.js service.

### Not enough resources to scale up

If one of the Node.js containers needs more resources but there are not enough of them on the underlying machine, a new container with the required hardware resources will be started on another machine. When the new container is ready, it will be added to the service balancer. The old container will be removed from the balancer and deleted.

### Automatic scale down

When the application no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the application from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal autoscaling

Zerops prefers vertical scaling over horizontal scaling because vertical scaling is faster and allows finer adjustment to the required performance. Horizontal scaling can be disabled by setting the same number for the minimum and maximum container count. Zerops will then scale the Node.js service only vertically.

Your application is created with the defined minimum number of containers. Zerops will add a new container when any of the service's containers reaches the maximum limit for vertical scaling for CPU cores or RAM. Zerops doesn't start a new container when the maximum disk space is reached. No more containers are added when the defined maximum container limit is reached.

The new container is started with a minimum disk size and with an average CPU cores and RAM of the existing containers.

By customising the vertical auto scaling limits, you can cause the horizontal scaling to start earlier. For example if you lower the vertical auto scaling maximum to 1 CPU core, Zerops will start a new container if some of the running containers are using the whole CPU core for more than 20 seconds.

If the application no longer needs as much power, Zerops will gradually remove containers to the defined minimum count. The container is removed after its CPU cores are scaled down to the defined minimum and the free CPU is safely above the minimum threshold for vertical scaling. Zerops only **removes containers** with a minimum **15 minute lifetime**.

## Monitor Node.js resources

Zerops provides information about how much hardware resources the Node.js service is currently using. Go to the service detail in Zerops GUI and select **Service dashboard & runtime containers** in the left menu. Zerops also provides the history of resource usage.



Zerops provides [shared storage service](/shared-storage/overview) that can be connected to runtime services. Shared storage enables your runtime service to share files between all containers of the same service or even among containers of different runtime services.

## Connect a shared storage in Zerops GUI

Connect your Node.js service directly when creating a new shared storage service. Just select your Node.js service in the **Share with Services** block on the **Add new shared storage service** page.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_1.png)

To connect the existing shared storage to the Node.js service, go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Select a runtime service and the shared storage will be connected to the selected runtime.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_2.png)

Zerops will create a new folder `/mnt/[shared storage name]`` in the runtime root folder. E.g. `/mnt/teststorage`for a`teststorage` shared storage. The content of this folder is shared among all containers of the runtime service you've selected. If you select multiple runtimes, the content of the folder will be shared among all containers of selected services.

## Disconnect a shared storage in Zerops GUI

Go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Switch off the toggle to disconnect the shared storage from the selected runtime.

:::note
Your runtime service will be automatically restarted when a shared storage is disconnected.
:::

## Create Node.js service with a shared storage using zCLI

zCLI is the Zerops command-line tool. To create a new Node.js service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/nodejs/how-to/shared-storage#create-a-project-description-file)
3. [Create a project with a Node.js service and a shared storage](/nodejs/how-to/shared-storage#create-a-project-with-a-nodejs-service-and-a-shared-storage)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### description.yaml format

[Read the basics](/nodejs/how-to/create#create-a-project-description-file) how to define the Node.js service using the description.yaml.

#### Example with a shared storage

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project

  # optional: project description
  description: A project with a Node.js and a shared storage

  # optional: project tags
  tags:
    - DEMO
    - ZEROPS

# array of project services
services:
  - # service name
    hostname: teststorage

    # shared storage service has no version
    type: shared-storage

    # mode: HA / NON_HA
    mode: NON_HA

  - # service name
    hostname: app

    # service type and version number in nodejs@{version} format
    type: nodejs@latest

    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2

    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4

    # Mount the shared storage to the Node.js service
    mount:
      - teststorage
```

The mount attribute accepts an array of shared storage names you want to mount to your runtime service.

### Create a project with a Node.js service and a shared storage

Follow the article [How to create a project based on the description.yaml](/nodejs/how-to/create#create-a-project-based-on-the-descriptionyaml).




<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-1.webp"
    darkImage="/img/mind-maps/build-deploy/step-1-dark.webp"
    alt="build deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Automatic builds and deploys from GitHub or GitLab

Integrate Zerops to your GitHub or GitLab repository and configure the automatic builds and deploys.

Follow these steps:

1. Add [zerops.yaml](/nodejs/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository.
2. Connect your GitHub repository or connect your GitLab repository

Then each time you create a new tag or push to a specific branch, depending on the configuration, GitHub or GitLab will initiate a new build & deploy pipeline.

<p align="center">
  <Image
    lightImage="/img/gui/github-integration.webp"
    darkImage="/img/gui/github-integration.webp"
    alt="github integration"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

### Skip the automatic pipeline once

To ensure that a pipeline is not triggered by your next push, add `[ci skip]` or `[skip ci]` to the commit message. It is case insensitive.

:::note
You will still see a successful delivery of a webhook in your Github/Gitlab repository as a webhook is actually triggered, but with no action.
:::

## Manual builds and deploys using Zerops CLI

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    darkImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    alt="Manual Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

To start a new build & deploy pipeline manually, use the Zerops CLI.

Follow these steps:

1. Add <a href="/nodejs/how-to/build-pipeline#add-zeropsyaml-to-your-repository">`zerops.yaml`</a> to your repository.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli push` command.

The `zcli push` command uploads your application code, builds and deploys your application in Zerops.

The command triggers the [build pipeline](/nodejs/how-to/trigger-pipeline) defined in `zerops.yaml`. `zerops.yaml` must be in the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

zCLI uploads all files and subdirectories of the working directory to Zerops and starts the build pipeline. If the `.gitignore` file is found, it is interpreted and the defined files and folders will be ignored.

If you just want to deploy your application to Zerops, use the [zcli deploy](#manual-deploy-using-zerops-cli) command instead.

#### Push command parameters

```sh
Usage:
  zcli push [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.
  -h, --help                     the service push command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

zCLI commands are interactive, when you press enter after `zcli push`, you will be given a list of your projects to choose from.

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

## Manual deploy using Zerops CLI

To start only a deploy pipeline, use the Zerops CLI.

Follow these steps:

1. Add [zerops.yaml](/nodejs/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository. Omit the build section.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli service deploy` command.

The `zcli service deploy` command uploads your application and deploys it in Zerops. Use this tool if you have your own build process. If you want to build your application in Zerops, use an [automatic](#automatic-builds-and-deploys-from-github-or-gitlab) or [manual](#manual-builds-and-deploys-using-zerops-cli) build process.

#### Deploy command parameters

```sh
Usage:
  zcli service deploy pathToFileOrDir [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
  -h, --help                     the service deploy command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

`pathToFileOrDir` defines a path to one or more directories and/or files relative to the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

`zerops.yaml` must be placed in the working directory.

:::info
You can change the deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your working directory.
:::



You can upgrade or downgrade your Node.js service to a different major Node.js version by setting the <a href="/nodejs/how-to/build-pipeline#base-1">`run.base`</a> parameter in your `zerops.yaml`. When you [trigger a new pipeline](/nodejs/how-to/trigger-pipeline), Zerops will start new runtime container(s) with the required Node.js version. If you don't specify the `run.base` attribute in your `zerops.yaml`, Zerops keeps the current Node.js version for your runtime.

If you want to build your application with a different major Node.js version, change the <a href="/nodejs/how-to/build-pipeline#base">`build.base`</a> parameter in your `zerops.yaml`. The `build.base` is the required attribute.





[Node.js ↗](https://nodejs.org/en) is an asynchronous event-driven JavaScript runtime, which is designed to build scalable network applications.

As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-nodejs), a **_recipe_**, containing the most simple Node.js web application. The repo will be used as a source from which the app will be built.

<CustomCard title="Feel free to deploy the recipe yourself" emoji="🚀">
  This is the most bare-bones example of Node.js app running on Zerops — as few libraries as possible,
  just a simple endpoint with connect, read and write to a Zerops PostgreSQL database.

  <DeployButton link="nodejs" badgeWidth="200" />
</CustomCard>

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)


2. In the **Projects** box click on **Import a project** and paste in the following YAML config ([source ↗](https://github.com/zeropsio/recipe-nodejs/blob/main/zerops-project-import.yaml)):

```yaml
project:
  name: recipe-nodejs
  tags:
    - zerops-recipe

services:
  - hostname: api
    type: nodejs@20
    enableSubdomainAccess: true
    buildFromGit: https://github.com/zeropsio/recipe-nodejs

  - hostname: db
    type: postgresql@16
    mode: NON_HA
    priority: 1
```

3. Click on **Import project** and wait until all pipelines have finished.

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://helloworld-24-8080.prg1.zerops.app`.
2. Click or the `subdomain` URL to open it in a browser and you should see

```
Hello, World!
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::


## How to start

It doesn't matter whether it's your first curious introduction to Zerops, you have already mastered the basics and are looking for a tiny detail or inspiration. Below, choose a section that fits your needs:

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/nodejs/getting-started',
      label: 'New to Zerops?',
      customProps: {
        icon: Icons['rocket-launch'],
        description: 'There is no better way to start than to try it yourself.',
      },
    },
    {
      type: 'link',
      href: '/nodejs/how-to/create',
      label: 'Care for details?',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description:
          'Dive in all Zerops has to offer for your Node.js application.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=nodejs&type=all&language=&sort=',
      label: 'Node.js recipes',
      customProps: {
        icon: Icons['github'],
        description:
          'Get inspired by already existing repositories, ready to be imported to Zerops.',
      },
    },
  ]}
/>

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/nodejs/how-to/create',
      label: 'Create Node.js service',
      customProps: {
        icon: Icons['nodejs'],
        description: 'Start with creating a Node.js service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: '/nodejs/how-to/build-pipeline#add-zeropsyaml-to-your-repository',
      label: 'zerops.yaml',
      customProps: {
        icon: Icons['puzzle'],
        description:
          'See a full example of zerops.yaml file to create your own app.',
      },
    },
    {
      type: 'link',
      href: '/nodejs/how-to/scaling',
      label: 'Scaling configuration',
      customProps: {
        icon: Icons['adjustments'],
        description:
          'Set up scaling of your Node.js application so that it runs smoothly while using only necessary resources.',
      },
    },
  ]}
/>

{" "}

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/nodejs/how-to/build-process#customize-nodejs-build-environment',
      label: 'Customize build environment',
      customProps: {
        icon: Icons['sparkles'],
      },
    },
    {
      type: 'link',
      href: '/nodejs/how-to/customize-runtime',
      label: 'Customize runtime environment',
      customProps: {
        icon: Icons['sparkles-solid'],
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/nodejs/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>



Zerops Object storage is powered by [MinIO](https://min,io), a high-performance, S3 compatible object store. Object storage services are operated on an independent infrastructure separated from your other project services. You can access the object storage from any service hosted in Zerops or remotely over the internet.

## Object storage bucket

Zerops creates one bucket automatically for each new Object storage service.

:::note
Each Object storage service can only contain one bucket. If your application needs multiple buckets, add more Object storage services.
:::

#### Name

Bucket is created with a name based on the selected service name and a random prefix. The name of the bucket cannot be changed later.

#### Access policy

The bucket's access policy was defined when the Object storage service was created. You can [change it] later in Zerops GUI.

#### Quota

The bucket quota size was defined when the Object storage service was created. You can [change it] later in Zerops GUI.

## Copy access details from Zerops GUI

You will find the Object storage access details under the **Access details** button in the project dashboard page.

The same information is available in the service detail page under the **Access & bucket details** menu.

<p align="center">
  <img
    src="/img/screenshots/object_storage_access_details.png"
    alt="image"
    width="80%"
    height="auto"
  />
</p>

### Object storage access parameters

| Parameter         | Description                                                                                                                                        |
| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |
| **API URL**       | URL of the Object storage service                                                                                                                  |
| **Bucket Name**   | Bucket is created with a name based on the selected service name and a random prefix. The name of the bucket is fixed and cannot be changed later. |
| **Access Key ID** | The S3 Access Key ID                                                                                                                               |
| **Secret Key**    | The S3 Secret Key                                                                                                                                  |

## Use Object storage environment variables

Zerops creates default environment variables for each Object storage service to help you with connection from any runtime services in the same project. To avoid the need to copy Object storage access parameters manually, use environment variables in your runtime service.

### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service name and underscore.

#### Example

To access the `bucketName` env variable of the `upload` service, use `upload_bucketName` as the env variable key. To access the `secretAccessKey` env variable of the `storage` service, use `storage_secretAccessKey` as the env variable key.

### Object storage environment variables

List of service environment variables is available in Zerops GUI. Go to an Object storage service detail and choose **Environment variables** in the left menu.

<p align="center">
  <img
    src="/img/screenshots/object_storage_generated_env.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Zerops creates following environment variables when the Object storage service is created:

| Variable            | Description                                                                                                                                        |
| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |
| **apiUrl**          | URL of the Object storage service                                                                                                                  |
| **accessKeyId**     | The S3 Access Key ID                                                                                                                               |
| **secretAccessKey** | The S3 Secret Key                                                                                                                                  |
| **bucketName**      | Bucket is created with a name based on the selected service name and a random prefix. The name of the bucket is fixed and cannot be changed later. |
| **quotaGBytes**     | The bucket quota in GB.                                                                                                                            |
| **projectId**       | ID of the project. Generated by Zerops.                                                                                                            |
| **serviceId**       | ID of the Object storage service. Generated by Zerops.                                                                                             |
| **hostname**        | The name of the Object storage service.                                                                                                            |




Zerops provides a S3 compatible Object storage service to store your files. Zerops Object storage is powered by [MinIO](https://min.io), a high-performance, S3 compatible object store. MinIO is built for large scale AI/ML, data lake and database workloads.

## Create Object storage service using Zerops GUI

First, set up a project in Zerops GUI and add a runtime service. Then go to the project dashboard page and choose **Add new service** in the left menu in the **Services** block. Then add a new Object storage service:

<Video
  src="/vids/services/object-storage.webm"
  type="video/webm"
/>

### Set a name

Enter a unique service identifier like `storage`,`s3` etc. Duplicate services with the same name in the same project are forbidden.

#### Limitations:

maximum 25 characters
must contain only lowercase ASCII letters (a-z) or numbers (0-9)

:::note
The name is fixed after the service is created. It can't be changed later.
:::

### Object storage bucket

Zerops creates one bucket automatically for each new Object storage service.

:::note
Each Object storage service can only contain one bucket. If your application needs multiple buckets, add more Object storage services.
:::

#### Name

Bucket will be created with a name based on the given service name and a random prefix. The name of the bucket cannot be changed later.

#### Access policy

Select one of the basic policy templates:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Template</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>Public read</strong></td>
      <td className="w-fit">
        Allows anyone:
        <ul>
          <li>to read the bucket's location `(s3:GetBucketLocation)`</li>
          <li>to list all bucket's objects `(s3:ListBucket)`</li>
          <li>to get any object of the bucket `(s3:GetObject)`</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>Public objects read</strong></td>
      <td className="w-fit">
        Allows anyone:
        <ul>
          <li>to read the bucket's location `(s3:GetBucketLocation)`</li>
          <li>to get any object of the bucket `(s3:GetObject)`</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>Public read write</strong></td>
      <td className="w-fit">
        Allows anyone:
        <ul>
          <li>to read the bucket's location `(s3:GetBucketLocation)`</li>
          <li>to list all bucket's objects `(s3:ListBucket)`</li>
          <li>to get any object of the bucket `(s3:GetObject)`</li>
          <li>to create a new object in the bucket `(s3:PutObject,s3:ListMultipartUploadParts, s3:AbortMultipartUpload, s3:ListBucketMultipartUploads)`</li>
          <li>to delete any object of the bucket `(s3:DeleteObject)`</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>Public write</strong></td>
      <td className="w-fit">Allows anyone to create objects in the bucket `(PutObject action)`</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>Private</strong></td>
      <td className="w-fit">Denies the access to unauthenticated users.</td>
    </tr>
  </tbody>
</table>

Or you can set your own access policy in the [IAM Policy JSON format](https://min.io/docs/minio/linux/administration/identity-access-management/policy-based-access-control.html#policy-document-structure).

#### Example:

```yaml
{
  'Version': '2012-10-17',
  'Statement':
    [
      {
        'Effect': 'Allow',
        'Principal': { 'AWS': ['*'] },
        'Action': ['s3:GetBucketLocation', 's3:ListBucket'],
        'Resource': ['arn:aws:s3:::{{.BucketName}}'],
      },
      {
        'Effect': 'Allow',
        'Principal': { 'AWS': ['*'] },
        'Action': ['s3:GetObject'],
        'Resource': ['arn:aws:s3:::{{.BucketName}}/*'],
      },
    ],
}
```

:::tip
The `{{ .BucketName }}` variable will be replaced by the bucket name.
:::

The bucket's policy can be changed later in Zerops GUI.

#### Quota

Set the bucket quota size in GB. The quota must be set manually. It can be changed later in Zerops GUI. Zerops doesn't support Object storage autoscaling. You can set the bucket quota from 1 to 100 GB.

<p align="center">
  <img
    src="/img/screenshots/object_storage_bucket_quota.png"
    alt="image"
    width="80%"
    height="auto"
  />
</p>

## Create Object storage using zCLI

zCLI is the Zerops command-line tool. To create a new Object storage service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](#create-a-project-description-file)
3. Create a project and an Object storage service

### Create a project description file

Zerops uses a yaml format file to describe the project infrastructure.

#### Example

Create a directory `my-project`. Create a `description.yaml` file inside the directory with the following content:

```yaml
# basic project data
project:
  # project name
  name: my-project

  # optional: project description
  description: A project with an Object storage

  # optional: project tags
  tags:
    - DEMO
    - ZEROPS

# array of project services
services:
  - # service name
    hostname: upload

    # service type
    type: objectstorage

    # Object storage size in GB
    objectStorageSize: 73

    # Choose object storage policy from a predefined list
    objectStoragePolicy: public-write

    # Or define a custom policy
    objectStorageRawPolicy:
```

The yaml file describes your future project infrastructure. The project will contain one Object storage service named `upload`. The bucket quota will be set to 73 GB and the bucket access policy will be set to `public-write`.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Limitations</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>name</strong></td>
      <td className="w-fit">The name of the new project. Duplicates are allowed.</td>
      <td className="w-fit">Maximum 255 characters</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>description</strong></td>
      <td className="w-fit"><strong>Optional.</strong> Description of the new project.</td>
      <td className="w-fit"></td>
    </tr>
    <tr>
      <td className="w-fit"><strong>tags</strong></td>
      <td className="w-fit"><strong>Optional.</strong> One or more string tags. Tags do not have a functional meaning, they only provide better orientation in projects.</td>
      <td className="w-fit"></td>
    </tr>
  </tbody>
</table>

At least one service in `services:` section is required. You can create a project with multiple services. The example above contains only Object storage service but you can create a description.yaml with different types of services.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>hostname</strong></td>
      <td className="w-fit">
        The unique service identifier.
         
        <strong>Limitations:</strong>
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>type</strong></td>
      <td className="w-fit">
        Specifies the Object storage type objectstorage and version.
        <br />
        Set type: `objectstorage`
         
        <strong>Limitations:</strong>
        <br />
        Currently `objectstorage` or `object-storage` is available.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>objectStorageSize</strong></td>
      <td className="w-fit">
        The size of the bucket quota in GB.
         
        <strong>Limitations:</strong>
        <br />
        Set a whole number between 1 and 100.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>objectStoragePolicy</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Either `objectStoragePolicy` or `objectStorageRawPolicy` is required.
         
        Set one of allowed values:
        <ul>
          <li>`public-read`</li>
          <li>`public-objects-read`</li>
          <li>`public-read-write`</li>
          <li>`public-write`</li>
          <li>`private`</li>
        </ul>
        Read more about <a href="#access-policy">the basic policy templates</a>.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>objectStorageRawPolicy</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Either `objectStoragePolicy` or `objectStorageRawPolicy` is required.
         
        Set your own access policy in the <a href="https://min.io/docs/minio/linux/administration/identity-access-management/policy-based-access-control.html#policy-document-structure">IAM Policy JSON format</a>.
         
        The `{{ .BucketName }}` variable will be replaced by the bucket name.
      </td>
    </tr>
  </tbody>
</table>

Zerops creates one bucket automatically for each new Object storage service.

:::note
Each Object storage service can only contain one bucket. If your application needs multiple buckets, add more Object storage services.
:::

Bucket will be created with a name based on the given service name and a random prefix. The name of the bucket cannot be changed later.

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>

### Add Object service to an existing project

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```yaml
# array of project services
services:
  - # service name
    hostname: upload

    # service type
    type: objectstorage

    # Object storage size in GB
    objectStorageSize: 73

    # Choose object storage policy from a predefined list
    objectStoragePolicy: public-write

    # Or define a custom policy
    objectStorageRawPolicy:
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one Object storage service named upload will be created. The bucket quota will be set to 73 GB and the bucket access policy will be set to `public-write`.

The content of the `services:` section of `import.yaml` is identical to the [project description file]. The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the `import.yaml` file is 100 kB.

#### Example

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```bash
# array of project services
services:
  -
    # service name
    hostname: storage
    # service type
    type: objectstorage
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one Object storage service in the single container mode with default auto scaling configuration will be added to your project. Hostname of the new service will be set to `storage`.

The content of the `services:` section of `import.yaml` is identical to the [project description file](#create-a-project-description-file). The `import.yaml` never contains the `project:` section because the project already exists.



This guide explains how to download a single file from a private Object Storage bucket using cURL and a bash script with Zerops object storage.

## Prerequisites

- Access to Zerops Object Storage
- Storage credentials (`ACCESS_KEY_ID` and `SECRET_ACCESS_KEY`)
- Bash environment
- OpenSSL and cURL installed

:::caution
Store your storage credentials securely and never commit them to version control.
:::

## Script

Save this script as `download-storage.sh`:

```bash
#!/bin/bash

server="${3:-storage-prg1.zerops.io}"
file_path=$2
bucket=$1
set -eu pipefail

contentType="application/octet-stream"
dateValue=`date -R`
signature_string="GET\n\n${contentType}\n${dateValue}\n/${bucket}/${file_path}"

signature_hash=`echo -en ${signature_string} | openssl sha1 -hmac ${SECRET_ACCESS_KEY} -binary | base64`

curl -sSo ${file_path} \
  -H "Date: ${dateValue}" \
  -H "Content-Type: ${contentType}" \
  -H "Authorization: AWS ${ACCESS_KEY_ID}:${signature_hash}" \
  "https://${server}/${bucket}/${file_path}"

```

## Usage

1. Make the script executable:
```bash
chmod +x download-storage.sh
```

2. Set your storage credentials as environment variables:
```bash
export ACCESS_KEY_ID=your-access-key
export SECRET_ACCESS_KEY=your-secret-key
```

3. Run the script:
```bash
./download-storage.sh my-bucket file.pdf
```

## Troubleshooting

- **Permission Denied**: Check your `ACCESS_KEY_ID` and `SECRET_ACCESS_KEY`
- **File Not Found**: Verify bucket name and file path
- **Script Error**: Ensure the script has execute permissions


## Delete Object storage service in Zerops GUI

Go to the project dashboard and select the delete service menu item in the top right corner.

<p align="center">
  <img
    src="/img/screenshots/delete_object_storage.png"
    alt="image"
    width="80%"
    height="auto"
  />
</p>

## Delete Object storage using zCLI

zCLI is the Zerops command-line tool. To delete the Object storage service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



Zerops creates one bucket automatically for each new Object storage service.

:::note
Each Object storage service can only contain one bucket. If your application needs multiple buckets, add more Object storage services.
:::

To change the bucket size or the access policy, go to the **Access & bucket details** in the Object service detail in Zerops GUI, scroll down and click on the **Configure bucket quota size and access policy** button.

<p align="center">
  <img
    src="/img/screenshots/object_storage_bucket_quota.png"
    alt="image"
    width="80%"
    height="auto"
  />
</p>

### Quota

Set the bucket quota size in GB. The quota must be set manually. It can be changed later in Zerops GUI. Zerops doesn't support Object storage autoscaling. You can set the bucket quota from 1 to 100 GB.

### Access policy

Zerops creates one bucket automatically for each new Object storage service.

:::note
Each Object storage service can only contain one bucket. If your application needs multiple buckets, add more Object storage services.
:::

#### Name

Bucket will be created with a name based on the given service name and a random prefix. The name of the bucket cannot be changed later.

#### Access policy

Select one of the basic policy templates:

| Template                   | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |
| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| <b>Public read</b>         | Allows anyone:<ul><li>to read the bucket's location `(s3:GetBucketLocation)`</li><li>to list all bucket's objects `(s3:ListBucket)`</li><li>to get any object of the bucket `(s3:GetObject)`</li></ul>                                                                                                                                                                                                                                        |
| <b>Public objects read</b> | Allows anyone:<ul><li>to read the bucket's location `(s3:GetBucketLocation)`</li><li>to get any object of the bucket `(s3:GetObject)`</li></ul>                                                                                                                                                                                                                                                                                                          |
| <b>Public read write</b>   | Allows anyone:<ul><li>to read the bucket's location `(s3:GetBucketLocation)`</li><li>to list all bucket's objects `(s3:ListBucket)`</li><li>to get any object of the bucket `(s3:GetObject)`</li><li>to create a new object in the bucket `(s3:PutObject,s3:ListMultipartUploadParts, s3:AbortMultipartUpload, s3:ListBucketMultipartUploads)`</li><li>to delete any object of the bucket `(s3:DeleteObject)`</li></ul> |
| <b>Public write</b>        | Allows anyone to create objects in the bucket `(PutObject action)`                                                                                                                                                                                                                                                                                                                                                                                                  |
| <b>Private</b>             | Denies the access to unauthenticated users.                                                                                                                                                                                                                                                                                                                                                                                                                                    |

Or you can set your own access policy in the [IAM Policy JSON format](https://min.io/docs/minio/linux/administration/identity-access-management/policy-based-access-control.html#policy-document-structure).

#### Example:

```yaml
{
  'Version': '2012-10-17',
  'Statement':
    [
      {
        'Effect': 'Allow',
        'Principal': { 'AWS': ['*'] },
        'Action': ['s3:GetBucketLocation', 's3:ListBucket'],
        'Resource': ['arn:aws:s3:::{{.BucketName}}'],
      },
      {
        'Effect': 'Allow',
        'Principal': { 'AWS': ['*'] },
        'Action': ['s3:GetObject'],
        'Resource': ['arn:aws:s3:::{{.BucketName}}/*'],
      },
    ],
}
```

:::tip
The `{{ .BucketName }}` variable will be replaced by the bucket name.
:::




Zerops Object storage is powered by [MinIO ↗](https://min.io/), a high-performance, open-source S3 compatible object store. MinIO is built for large scale AI/ML, data lake and database workloads.

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/object-storage/how-to/create',
      label: 'Create Object Storage',
      customProps: {
        icon: Icons['server'],
        description: 'Create your first storage bucket with our step-by-step guide.',
      },
    },
    {
      type: 'link',
      href: '/object-storage/how-to/update-bucket',
      label: 'Customize Object Storage buckets',
      customProps: {
        icon: Icons['puzzle'],
        description: 'Configure Object Storage to meet your application needs.',
      },
    },
    {
      type: 'link',
      href: '/object-storage/how-to/access#copy-access-details-from-zerops-gui',
      label: 'Access Object storage',
      customProps: {
        icon: Icons['sparkles'],
        description: 'Simplify configuration with environment variables.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/nodejs/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>




<FAQ>
  <FAQItem question="Sample Question">sample answer</FAQItem>
</FAQ>




This quick start allows you to get hands-on experience of Zerops, whether you only want to see it in action or want to start small and scale up the project size later. The purpose of this guide is to get an existing PHP application up and running easily.

If you are already familiar with Zerops and you are interested in more detailed guides for your own application, feel free to head straight to the [How to](/php/how-to/create) section.

## Guides

We have created a repository, a _recipe_, containing the most simple PHP web application, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics on the way.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-php',
      label: 'PHP + SQL database',
      customProps: {
        icon: Icons['github'],
        description: 'A more complex, multi-service application example.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=php&type=all&language=&sort=',
      label: 'All PHP recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspired.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



## Private internal access

Projects in Zerops represent a group of one or more services.
Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its [internal port](/php/how-to/build-pipeline#ports).

To connect to your application with `app` hostname running on [internal port](/php/how-to/build-pipeline#ports) `80`, simply use `http://app:80`

:::info
Do not use `https://` when communicating with PHP from other runtime services in the same project. The internal communication is done over a private network and is isolated from other projects.
:::

### Use PHP environment variables

Zerops creates default environment variables for each PHP service to help you with connection within the same project. To avoid the need to copy the access parameters manually, use [generated environment variables](/php/how-to/env-variables#generated-env-variables) of the PHP service.

#### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Example:

To access the `API_TOKEN` env variable of the `app` service, use `app_API_TOKEN` as the env variable key.

Read more about [env variables](/php/how-to/env-variables).

## Private access via VPN

### Start VPN connection

You can securely connect to your PHP application from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)

### Access PHP application through VPN

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/php/how-to/env-variables) are available when connected through VPN. To connect to your PHP application in Zerops set the hostname and [internal port](/php/how-to/build-pipeline#ports) e.g. http://app:80

:::info
Do not use `https://` when communicating with PHP over the VPN. The security is assured by the VPN. The internal communication is done over a private network and is isolated from other projects.
:::

### Connect via SSH

Use the <a href="/references/ssh">`ssh` command</a> to connect to your service via SSH.

### Stop VPN connection

[Stop the Zerops VPN](/references/vpn#stop-vpn) in zCLI.

## Public access through zerops.io subdomain

By default, your PHP service is not publicly accessible. To test your application, enable the [public access through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain).

## Public access through your domain

By default, your PHP service is not publicly accessible. When your application is ready for production or if you want to test it on the production domain, [configure the public access through your domain](/features/access#public-access-through-your-domain).

## Public access from another Zerops project

All services of the same project share a dedicated private network. To connect to a service within the same project, just use the service hostname and its [internal port](/php/how-to/build-pipeline#ports). Different projects are not connected inside Zerops. To connect to a runtime service from another Zerops project, you need to use public access either [through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain) or [through your domain](/features/access#public-access-through-your-domain).





Zerops provides a customizable build and runtime environment for your PHP application.

## Add zerops.yaml to your repository

Start by adding `zerops.yaml` file to the **root of your repository** and modify it to fit your application:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: php-apache@latest

      # OPTIONAL. Set the operating system for the build environment.
      # os: ubuntu

      # OPTIONAL. Customize the build environment by installing additional packages
      # or tools to the base build environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # OPTIONAL. Build your application
      buildCommands:
        - composer install

      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles:
        - vendor
        - public

      # OPTIONAL. Which files / folders you want to cache for the next build.
      # Next builds will be faster when the cache is used.
      # cache: vendor

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base: php-apache@latest

      # OPTIONAL. Customize the runtime PHP environment by installing additional
      # dependencies to the base PHP runtime environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your PHP application is started.
      # initCommands:
      #  - rm -rf ./cache

      # OPTIONAL. Customize the folder that will be used as the root of the publicly
      # accessible web server content. Enter the path relative to the /var/www folder.
      documentRoot: public

      # OPTIONAL. Sets the custom Nginx or Apache configuration. The file must be deployed in
      # the runtime container. Enter the path to the file relative to the /var/www folder
      siteConfigPath: site_config.tmpl
```

The top-level element is always `zerops`.

### Setup

The first element `setup` contains the **hostname** of your service. A runtime service with the same hostname must exist in Zerops.
Zerops supports the definition of multiple runtime services in a single `zerops.yaml`. This is useful when you use a monorepo. Just add multiple setup elements in your `zerops.yaml`:

```yaml
zerops:
  # definition for app service
  - setup: app
    build: ...
    run: ...

  # definition for api service
  - setup: api
    build: ...
    run: ...
```

Each service configuration contains at least two sections: **build** and **run**. Both sections are required to build and deploy your PHP application in Zerops. If you'd like to use a readiness check, add an optional **deploy** section.

## Build pipeline configuration

### base

_REQUIRED._ Sets the base technology for the build environment.

Following options are available for PHP builds:

<UnorderedCodeList data={data.php.base.build} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: php-apache@latest
      ...
```

<p>
  The base build environment contains {data.alpine.default}, the selected
  major version of PHP, <a href="/references/cli">Zerops command line tool</a>, `composer`, `git` and `wget`.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the build environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base:
        - php-apache@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [build base environments](/zerops-yaml/base-list#runtime-services).

To customise your build environment use the [prepareCommands](/php/how-to/build-pipeline#preparecommands) attribute.

:::note
Modifying the base technology will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for more details about cache invalidation.
:::

### os

_OPTIONAL._ Sets the operating system for the build environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customised.
:::

:::note
Changing the OS setting will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache behavior.
:::

### prepareCommands

_OPTIONAL._ Customises the build environment by installing additional dependencies or tools to the base build environment.

The base build environment contains:

- <span>{data.alpine.default}</span>
- selected version of PHP defined in the [base](/php/how-to/build-pipeline#base) attribute
- [Zerops command line tool](/references/cli)
- `composer`, `git` and `wget`

To install additional packages or tools add one or more prepare commands:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: php-apache@latest

      # OPTIONAL. Customise the build environment by installing additional packages
      # or tools to the base build environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first build is triggered, Zerops will

1. create a build container
2. download your application code from your repository
3. run the prepare commands in the defined order

The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).

:::note
These commands are skipped when using cached environment. Modifying `prepareCommands` will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache invalidation.
:::

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/php/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all prepare commands are finished, your custom build environment is ready for the build phase.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### buildCommands

_REQUIRED._ Defines build commands.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: php-apache@latest

      # REQUIRED. Build your application
      buildCommands:
        - composer install
      ...
```

At least one command is required. Zerops triggers each command in the defined order in a dedicated build container.

Before the build commands are triggered the build container contains:

1. base environment defined by the [base](/php/how-to/build-pipeline#base) attribute
2. optional customisation of the base environment defined in the [prepareCommands](/php/how-to/build-pipeline#preparecommands) attribute
3. your application code

#### Run build commands as a single shell instance

Use following syntax to run all commands in the same environment context. For example, if one command changes the current directory, the next command continues in that directory. When one command creates an environment variable, the next command can access it.

```yaml
buildCommands:
  - |
    composer install --optimize-autoloader --no-dev
    php artisan env
```

#### Run build commands as a separate shell instances

When the following syntax is used, each command is triggered in a separate environment context. For example, each shell instance starts in the home directory again. When one command creates an environment variable, it won't be available for the next command.

```yaml
buildCommands:
  - composer install --optimize-autoloader --no-dev
  - php artisan env
```

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/php/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the verbose option.

```yaml
buildCommands:
  - composer install -v
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the deploy phase.

### deployFiles

_REQUIRED._ Selects which files or folders will be deployed after the build has successfully finished. To filter out specific files or folders, use <a href="#deployignore">`.deployignore`</a> file.

```yaml
# REQUIRED. Select which files / folders to deploy after
# the build has successfully finished
deployFiles:
  - vendor
  - public
```

Determines files or folders produced by your build, which should be deployed to your runtime service containers.

The path starts from the **root directory** of your project (the location of `zerops.yaml`). You must enclose the name in quotes if the folder or the file name contains a space.

The files/folders will be placed into `/var/www` folder in runtime, e.g. `./src/assets/fonts` would result in `/var/www/src/assets/fonts`.

#### Examples

Deploys a folder, and a file from the project root directory:

```yaml
deployFiles:
  - public
  - file.txt
```

Deploys the whole content of the build container:

```yaml
deployFiles: .
```

Deploys a folder, and a file in a defined path:

```yaml
deployFiles:
  - ./path/to/file.txt
  - ./path/to/dir/
```

#### How to use a wildcard in the path

Zerops supports the `~` character as a wildcard for one or more folders in the path.

Deploys all `file.txt` files that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/file.txt
```

Deploys all folders that are located in any path that begins with `/path/to/`

```yaml
deployFiles: ./path/to/~/
```

Deploys all folders that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/
```

:::note Example
By default, `./src/assets/fonts` deploys to `/var/www/src/assets/fonts`, keeping the full path. Adding `~`, like `./src/assets/~fonts`, shortens it to `/var/www/fonts`
:::
#### .deployignore

Add a `.deployignore` file to the root of your project to specify which files and folders Zerops should ignore during deploy. The syntax follows the same pattern format as <a href="https://git-scm.com/docs/gitignore#_pattern_format">`.gitignore`</a>.

To ignore a specific file or directory path, start the pattern with a forward slash (`/`). Without the leading slash, the pattern will match files with that name in any directory.

:::tip
For consistency, it's recommended to configure both your `.gitignore` and `.deployignore` files with the same patterns.
:::

Examples:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      deployFiles: ./
```

```text title=".deployignore"
/src/file.txt
```
The example above ignores `file.txt` only in the root src directory.
```text title=".deployignore"
src/file.txt
```
This example above ignores `file.txt` in ANY directory named `src`, such as:
- `/src/file.txt`
- `/folder2/folder3/src/file.txt`
- `/src/src/file.txt`

:::note
`.deployignore` file also works with <a href="/references/cli/commands#deploy">`zcli service deploy`</a> command.
:::

### cache

_OPTIONAL._ Defines which files or folders will be cached for the next build.

```yaml
# OPTIONAL. Which files / folders you want to cache for the next build.
# Next builds will be faster when the cache is used.
cache: file.txt
```

The cache attribute helps optimize build times by preserving specified files between builds.

The cache attribute supports the [~ wildcard character](#how-to-use-a-wildcard-in-the-path).

Learn more about the [build cache system](/features/build-cache) in Zerops.

### envVariables

_OPTIONAL._ Defines the environment variables for the build environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      base: php-apache@latest
        …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        PHP_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/php/how-to/env-variables) in Zerops.

## Runtime configuration

### base

_OPTIONAL._ Sets the base technology for the runtime environment.
If you don't specify the `run.base` attribute, Zerops keeps the current PHP version for your runtime.

Following options are available for PHP builds:

<UnorderedCodeList data={data.php.base.runtime.apache} />
<UnorderedCodeList data={data.php.base.runtime.nginx} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: php-apache@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
        base: php-apache@latest
      ...
```

<p>
  The base runtime environment contains {data.alpine.default}, the
  selected major version of PHP, <a href="/references/cli">Zerops command line tool</a> and `composer`, `git` and `wget`.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the runtime environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: php-apache@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base:
        - php-apache@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [run base environments](/zerops-yaml/base-list).

To customise your build environment use the `prepareCommands` attribute.

### os

_OPTIONAL._ Sets the operating system for the runtime environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customised.
:::

### ports

_OPTIONAL._ Specifies one or more internal ports on which your application will listen.

:::info
If no ports are specified, Zerops adds the port TCP 80 automatically.
:::

:::caution
If you want the web server to listen on other port(s) than `:80`, you must [customize](/php/how-to/customize-web-server) your web server configuration as well.
:::

Projects in Zerops represent a group of one or more services. Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its internal port.

For example, to connect to a PHP service with hostname = "app" and port = 80 from another service of the same project, simply use `app:80`. Read more about [how to access a PHP service](/php/how-to/access).

:::info
Do not use the port **:443**. All the incoming traffic is terminated on the Zerops internal balancer where the SSL certificate is installed and the request is forwarded to your PHP+Nginx / PHP+Apache service as a **http://** on the port **:80**.
:::

Each port has following attributes:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">port</td>
      <td className="w-fit">Defines the port number. You can set any port number between <em>10</em> and <em>65435</em>. Ports outside this interval are reserved for internal Zerops systems.</td>
    </tr>
    <tr>
      <td className="w-fit">protocol</td>
      <td className="w-fit"><strong>Optional.</strong> Defines the protocol. Allowed values are <code>TCP</code> or <code>UDP</code>. Default value is <code>TCP</code>.</td>
    </tr>
    <tr>
      <td className="w-fit">httpSupport</td>
      <td className="w-fit"><strong>Optional.</strong> <code>httpSupport = true</code> is the default setting for TCP protocol. Set <code>httpSupport = false</code> if a web server isn't running on the port. Zerops uses this information for the configuration of <a href="/features/access">public access</a>. <code>httpSupport = true</code> is available only in combination with the TCP protocol.</td>
    </tr>
  </tbody>
</table>

### prepareCommands

_OPTIONAL._ Customises the PHP runtime environment by installing additional dependencies or tools to the runtime base environment.

<p>
  The base PHP environment contains {data.alpine.default}, the selected
  major version of PHP, <a href="/references/cli">Zerops command line tool</a> and `composer`, `git` and `wget`. To install
  additional packages or tools add one or more prepare commands:
</p>

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base PHP runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first deploy with a defined prepare attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/php/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `prepareCommands` commands in the defined order

#### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/php/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

#### Cache of your custom runtime environment

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the [build.addToRunPrepare](#copy-folders-or-files-from-your-build-container) and `run.prepareCommands` attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.

<p align="center">
  <img
    src="/img/screenshots/runtime_clear_build_cache.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

When the prepare cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### Copy folders or files from your build container

<p>
  The prepare runtime container contains {data.alpine.default}, the
  selected major version of PHP, <a href="/references/cli">Zerops command line tool</a> and `composer`, `git` and `wget`.
</p>

The prepare runtime container does not contain your application code nor the built application. If you need to copy some folders or files from the build container to the runtime container (e.g. a configuration file) use the `addToRunPrepare` attribute in the [build section](#build-pipeline-configuration).

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...
      addToRunPrepare: ./runtime-config.yaml

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base PHP runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

In the example above Zerops will copy the `runtime-config.yaml` file from your build container **after the build has finished** into the new **prepare runtime** container. The copied files and folders will be available in the `xxx` folder in the new prepare runtime container before the prepare commands are triggered.

### initCommands

_OPTIONAL._ Defines one or more commands to be run each time a new runtime container is started or a container is restarted.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your PHP application is started.
      initCommands:
        - rm -rf ./cache
```

These commands are triggered in the runtime container before your PHP application is started.

Use init commands to clean or initialise your application cache or similar operations.

:::caution
The init commands will delay the start of your application each time a new runtime container is started (including the [horizontal scaling](/php/how-to/scaling#horizontal-auto-scaling) or when a runtime container is restarted).

Do not use the init commands for customising your runtime environment. Use the [run:prepareCommands](/php/how-to/build-pipeline#preparecommands-1) attribute instead.
:::

#### Command exit code

If any of the `initCommands` fails, it returns an exit code other than 0, but deploy is **not** canceled. After all init commands are finished, regardless of the status code, the application is started. Read the [runtime log](/php/how-to/logs#runtime-log) to troubleshoot the error.

#### Single or separated shell instances

You can configure your `initCommands` to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### documentRoot

_OPTIONAL._ Customizes the folder that will be used as the root of the publicly accessible web server content.

:::info
By default, the document root is configured to `/var/www`.
:::

Customize the folder that will be used as the root of the publicly accessible web server content. Enter the path relative to the `/var/www` folder.
E.g. `documentRoot: public` will set the web server document root to `/var/www/public`.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the folder that will be used as the root of the publicly
      # accessible web server content. Enter the path relative to the /var/www folder.
      documentRoot: public
```

### siteConfigPath

_OPTIONAL._ Sets the custom Nginx or Apache configuration.

:::info
By default, the default [nginx](/php/how-to/customize-web-server#default-nginx-configuration) or [Apache](/php/how-to/customize-web-server#default-apache-configuration) web server configuration is set.
:::

The file must be deployed in the runtime container. Enter the path to the file relative to the `/var/www` folder.
Read more about the [web server customization](/php/how-to/customize-web-server).

### envVariables

_OPTIONAL._ Defines the environment variables for the runtime environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to run your application ====
    run:
      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        PHP_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/php/how-to/env-variables) in Zerops.

### health check

_OPTIONAL._ Defines a health check.

`healthCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the health check to request a local URL using a HTTP GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the folder that will be used as the root of the publicly
      # accessible web server content. Enter the path relative to the /var/www folder.
      documentRoot: public

      # OPTIONAL. Define a health check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      healthCheck:
        httpGet:
          port: 80
          path: /status
```

Read more about how the [health check works] in Zerops.

#### exec

Configures the health check to run a local command.
Following attributes are available:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/php/how-to/create#set-secret-environment-variables">environment variables</a> as your PHP application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the folder that will be used as the root of the publicly
      # accessible web server content. Enter the path relative to the /var/www folder.
      documentRoot: public

      # OPTIONAL. Define a health check with a shell command.
      healthCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [health check works] in Zerops.

### crontab

_OPTIONAL._ Defines cron jobs.

Setup cron jobs in the following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app

    # ==== how to run your application ====
    run:
      crontab:
        # REQUIRED. Sets the command to execute:
        - command: ""
        # REQUIRED. Sets the interval time to execute:
          timing: "0 * * * *"
```

Read more about setting up [cron](/references/cron) in Zerops.

## Deploy configuration

### readiness check

_OPTIONAL._ Defines a readiness check. Read more about how the [readiness check works](/php/how-to/deploy-process#readiness-checks) in Zerops.

`readinessCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the readiness check to request a local URL using a http GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        httpGet:
          port: 80
          path: /status

    # ==== how to run your application ====
    run: ...
```

Read more about how the [readiness check works](/php/how-to/deploy-process#readiness-checks) in Zerops.

#### exec

Configures the readiness check to run a local command.
Following attributes are available:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/php/how-to/create#set-secret-environment-variables">environment variables</a> as your PHP application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [readiness check works](/php/how-to/deploy-process#readiness-checks) in Zerops.




<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

The build container is automatically deleted after the build has finished or failed.

:::info
The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).
:::

## Cancel running build
To cancel an ongoing build:
1. Go to service detail
2. Select "Service dashboard & runtime containers"
3. Click "Open pipeline detail"
4. Click "Cancel build"

{/* TODO screenshot of a running build pipeline */}

The build cancellation is available before the build pipeline is finished. When the build is finished, the deployment cannot be cancelled.

## Customize PHP build environment

The default PHP build environment contains:
- <span>{data.alpine.default}</span>
- selected version of PHP defined in `zerops.yaml` [build.base](/php/how-to/build-pipeline#base) parameter
- Git and Composer
- [zCLI](/references/cli)

:::note
To use Ubuntu instead of the default Alpine, set the [build.os](/zerops-yaml/specification#os-) attribute.

Additional packages and tools can be installed using [build.prepareCommands](/zerops-yaml/specification#preparecommands-).
:::

## PHP build hardware resources

Build of your PHP application is run in a separate build container with following resource configuration:

| HW resource   | Minimum | Maximum |
| ------------- | ------- | ------- |
| **CPU cores** | 6       | 20      |
| **RAM**       | 8 GB    | 8 GB    |
| **Disk**      | 1 GB    | 100 GB  |

The build container is always started with the minimum hardware resources and scales vertically up to the maximum resources.

:::info
Hardware resources of the build containers are not charged. The build costs are covered by the standard Zerops [project fee](https://zerops.io/#pricing).
:::

## Build time limit

The time limit for the whole build pipeline is **1 hour**. After 1 hour, Zerops will terminate the build pipeline and delete the build container.

## Troubleshooting build-related problems

### Failure of a build prepare command

If any [prepare command](/php/how-to/build-pipeline#preparecommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/php/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom build environment is ready for the build phase.

### Invalidate the build cache
If you encounter unexpected build behavior or dependency issues, the problem might be related to [cached build data](/features/build-cache). While Zerops maintains the build cache to speed up deployments, sometimes you may need to start fresh.
To invalidate the build cache:

1. Go to your service detail in Zerops GUI
2. Choose **Pipelines & CI/CD Settings** from the left menu
3. Click on the **Invalidate build cache** button

This will force Zerops to run the next build clean, including all prepare commands, which can help resolve cache-related issues. After invalidation, your next build will also create a fresh cache.

### Failure of a build command

If any [build command](/php/how-to/build-pipeline#buildcommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/php/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the `-v` verbose option.

```yaml
buildCommands:
  - composer install -v
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the [deploy](/php/how-to/deploy-process) phase.



Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart PHP service in Zerops GUI

To stop the PHP service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)*/}

To start the stopped PHP service choose the **Start** item from the same menu.

To restart the PHP service choose the **Restart** item from the same menu.

## Stop and start PHP using zCLI

zCLI is the Zerops command-line tool. To stop and start the PHP service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and services to choose from.
:::




Zerops provides 2 PHP services with an included web server: **PHP+Nginx** and **PHP+Apache**. PHP runtime is highly scalable and customisable to suit both development and production.

## Create PHP service using Zerops GUI

First, set up a project in Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu in the **Services** block. Then add a new PHP service:

{/*TODO screenshot (add a new service page)*/}

### Choose PHP version

Following PHP versions are currently supported:

<UnorderedList data={data.php.readable} />

:::info
You can [change](/php/how-to/upgrade) the major version at any time later.
:::

### Set a hostname

Enter a unique service identifier like "app","cache", "gui" etc. Duplicate services with the same name in the same project are forbidden.

#### Limitations:

- maximum 25 characters
- must contain only lowercase ASCII letters (a-z) or numbers (0-9)

:::caution
The hostname is fixed after the service is created. It can't be changed later.
:::

### Set secret environment variables

Add environment variables with sensitive data, such as password, tokens, salts, certificates etc. These will be securely saved inside Zerops and added to your runtime service upon start.

Setting the secret environment variables is optional. You can set them later in Zerops GUI.

Read more about [different types of env variables](/php/how-to/env-variables#types-of-env-variables-in-zerops) in Zerops.

### Set auto scaling configuration

Zerops scales the PHP services automatically both vertically and horizontally. Vertical scaling means increasing or decreasing the hardware resources (CPU, RAM and disk) of a PHP container. Horizontal scaling adds or removes whole containers.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

**Dedicated**
The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

Choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

PHP service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the PHP service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient PHP performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](/php/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

:::info
You can change the vertical auto scaling parameters later.
:::

#### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your PHP service. When your PHP service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Value</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>minimum containers</strong></td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>maximum containers</strong></td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

PHP service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

[Learn more](/php/how-to/scaling) about PHP auto scaling.

#### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Create PHP service using zCLI

zCLI is the Zerops command-line tool. To create a new PHP service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/php/how-to/create#create-a-project-description-file)
3. [Create a project with a PHP and PostgreSQL service](#full-example)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### Basic example:

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in php-apache@{version} or php-nginx@{version} format
    type: php-nginx@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes your future project infrastructure. The project will contain one PHP version 8.1 service with default [auto scaling](/php/how-to/scaling) configuration. Hostname will be set to "app", the internal port(s) the service listens on will be defined later in the [zerops.yaml](/php/how-to/build-pipeline#ports). Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

#### Full example:

Create a directory my-project. Create an description.yaml file inside the my-project directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a PHP and PostgreSQL database
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in php-apache@{version} or php-nginx@{version} format
    type: php-nginx@latest
    # optional: vertical auto scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4
    # optional: create secret env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
  - # second service hostname
    hostname: db
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"non_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain a PHP service and a [PostgreSQL](/postgresql/overview) service.

PHP service with "app" hostname, the internal port(s) the service listens on will be defined later in the [zerops.yaml](/php/how-to/build-pipeline#ports). PHP service will run on version 8.1 with a custom vertical and horizontal scaling. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The hostname of the PostgreSQL service will be set to "db". The [single container](/postgresql/how-to/create#single-container) mode will be chosen and the default [auto scaling configuration](/postgresql/how-to/create#set-auto-scaling-configuration) will be set.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Limitations</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>name</strong></td>
      <td className="w-fit">The name of the new project. Duplicates are allowed.</td>
      <td className="w-fit"></td>
    </tr>
    <tr>
      <td className="w-fit"><strong>description</strong></td>
      <td className="w-fit"><strong>Optional.</strong> Description of the new project.</td>
      <td className="w-fit">Maximum 255 characters.</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>tags</strong></td>
      <td className="w-fit"><strong>Optional.</strong> One or more string tags. Tags do not have a functional meaning, they only provide better orientation in projects.</td>
      <td className="w-fit"></td>
    </tr>
  </tbody>
</table>


At least one service in `services:` section is required. You can create a project with multiple services. The example above contains PHP and PostgreSQL services but you can create a `description.yaml` with your own combination of [services](/features/infrastructure).

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>hostname</strong></td>
      <td className="w-fit">
        The unique service identifier.
         
        The hostname of the new service will be set to the `hostname` value.
         
        <strong>Limitations:</strong>
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>type</strong></td>
      <td className="w-fit">
        Specifies the service type and version.
        <br />
        See what [PHP service types](/references/import-yaml/type-list#runtime-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>verticalAutoscaling</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Defines <a href="/php/how-to/create#set-auto-scaling-configuration">custom vertical auto scaling parameters</a>.
        <br />
        All verticalAutoscaling attributes are optional. Not specified attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- cpuMode</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minCpu/maxCpu</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minCpu or maxCpu in CPU cores (integer).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minRam/maxRam</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minRam or maxRam in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minDisk/maxDisk</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minDisk or maxDisk in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>minContainers</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Default = 1. Defines the minimum number of containers for <a href="/php/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.
         
        <strong>Limitations:</strong>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>maxContainers</strong></td>
      <td className="w-fit">
        Defines the maximum number of containers for <a href="/php/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.
         
        <strong>Limitations:</strong>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>envSecrets</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Defines one or more secret env variables as a key value map. See env variable <a href="/php/how-to/env-variables#env-variable-restrictions">restrictions</a>.
      </td>
    </tr>
  </tbody>
</table>

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>

### Add PHP service to an existing project

#### Example:

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in php-apache@{version} or php-nginx@{version} format
    type: php-nginx@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one PHP service version 8.1 with default [auto scaling](/php/how-to/scaling) configuration will be added to your project. Hostname of the new service will be set to `app`. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The content of the `services:` section of `import.yaml` is identical to the project description file. The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the import.yaml file is 100 kB.




The default PHP runtime environment contains:

- <span>{data.alpine.default}</span>
- Selected version of PHP when the runtime service was created
- [zCLI](/references/cli)
- Git and Composer

:::note
To use Ubuntu instead of the default Alpine, set the [run.os](/zerops-yaml/specification#os--1) attribute.

Additional packages and tools can be installed using [run.prepareCommands](/zerops-yaml/specification#preparecommands--1).
:::

## Runtime Flow

<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline_custom_runtime.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

When the first deploy with a defined `prepareCommands` attribute is triggered, Zerops will

1. Create a prepare runtime container
2. Optionally: [copy selected folders or files from your build container](/php/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. Run the [run.prepareCommands](/zerops-yaml/specification#preparecommands--1) commands in the defined order

## Command exit code

Failed commands return non-zero exit codes and cancel deployment. Check [prepare runtime logs](/php/how-to/logs#prepare-runtime-log) for errors.

Successful commands return exit code 0, triggering the next command. After all prepareCommands complete, the runtime environment is ready for deployment.

The prepare runtime container is deleted once the phase completes or fails.

## Custom runtime environment cache

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the <a href="/php/how-to/build-pipeline#copy-folders-or-files-from-your-build-container">build.addToRunPrepare</a> and <a href="/php/how-to/build-pipeline#preparecommands-1">run.prepareCommands</a> attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

### Clearing Zerops runtime cache

1. Go to service detail
2. Select "Service dashboard & runtime containers"
3. Click "Open pipeline detail"
4. Click "Clear runtime prepare cache"

{/* **TODO screenshot** */}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.

### Overwrite php.ini files

You can override PHP configuration directives by setting environment variables in your `zerops.yaml` file.

Here's an example of how to adjust PHP's `post_max_size` directive:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    run:
      # REQUIRED. Sets the base technology for the build environment:
      base: php-nginx@8.3

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        PHP_INI_post_max_size: 10M
```



## PHP + Nginx

### Default Nginx configuration

The default PHP+Nginx service has following Nginx configuration:

```
server {
    listen 80;
    listen [::]:80;

    server_name _;

    # Be sure that you set up the correct document root!
    root {{.DocumentRoot}};

    location ~ \.php {
        try_files _ @backend;
    }

    location / {
        # use this for pretty url
        try_files $uri /$uri /index.html /index.php$is_args$args;
    }

    location @backend {
        fastcgi_pass unix:{{.PhpSocket}};
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;

        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        internal;
    }

    access_log syslog:server=unix:/dev/log,facility=local1,tag=nginx,severity=info default_short;
    error_log syslog:server=unix:/dev/log,facility=local1,tag=nginx,severity=error;
}
```

The configuration contains 2 variables:

- **`{{.DocumentRoot}}`** is replaced by the <a href="/php/how-to/build-pipeline#documentroot">`run.documentRoot`</a> attribute from the `zerops.yaml`. If the attribute is not specified, the default value `/var/www` is used.

- **`{{.PhpSocket}}`** is replaced by a path to the PHP socket based on the PHP version.

### Customize Nginx configuration

Follow these steps to customize the Nginx configuration in PHP+Nginx service:

1. Create a **.tmpl** file with the Apache configuration in your repository.

2. Optionally use following variables:

- **`{{.DocumentRoot}}`** is replaced by the <a href="/php/how-to/build-pipeline#documentroot">`run.documentRoot`</a> attribute from the `zerops.yaml`. If the attribute is not specified, the default value `/var/www` is used.

Example:

```
root {{.DocumentRoot}};
```

- **`{{.PhpSocket}}`** is replaced by a path to the PHP socket based on the PHP version.

Example:

```
fastcgi_pass unix:{{.PhpSocket}};
```

- **`{{.Environment.ENV_NAME}}`** is replaced by the [env variable](/php/how-to/env-variables) value. The env variable must be either defined in [run.envVariables](/php/how-to/build-pipeline#envvariables-1) in `zerops.yaml` or set as a [secret](/php/how-to/env-variables#set-secret-env-variables-in-zerops-gui) or [generated](/php/how-to/env-variables#generated-env-variables) env variable in Zerops GUI.

:::caution
Use the **.tmpl** file extension to make Zerops interpret the file as a template. Zerops will replace the supported variables listed above.
:::

3. Check that your Nginx configuration is consistent with Zerops requirements:

- Do not use IP addresses in the `listen` directive
- If you use other ports than `:80` in the `listen` directive, add them to the <a href="/php/how-to/build-pipeline#ports">`run.ports`</a> in your `zerops.yaml` as well.
- Do not use the port **:443**. All the incoming `https://` traffic is terminated on the Zerops internal balancer where the SSL certificate is installed and the request is forwarded to your PHP+Nginx service as a **http://** on the port **:80**.

4. Add the <a href="/php/how-to/build-pipeline#siteconfigpath">`siteConfigPath`</a> to the run section of your `zerops.yaml`

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: php-nginx@latest

      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles:
        - vendor
        - public

    # ==== how to run your application ====
    run:
      documentRoot: public

      # OPTIONAL. Sets the custom Nginx or Apache configuration. The file must be deployed in the runtime container. Enter the path to the file relative to the /var/www folder
      siteConfigPath: site_config.tmpl
```

5. Ensure that the <a href="/php/how-to/build-pipeline#deployfiles">`build.deployFiles`</a> contains the folder with the `siteConfigPath` or add the path to the Nginx config file to the `deployFiles` list. Zerops will deploy the file to the runtime container(s).

6. [Trigger](<(/php/how-to/trigger-pipeline)>) the build & deploy pipeline.

## PHP + Apache

### Default Apache configuration

The default PHP+Apache service has following Apache configuration:

```
<VirtualHost *:80>
    ServerName localhost
    DocumentRoot {{.DocumentRoot}}
    DirectoryIndex index.htm index.html index.shtml index.php index.phtml

    <Directory {{.DocumentRoot}}>
        Options -Indexes
        Options FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    <FilesMatch ".php$">
        <If "-f %{REQUEST_FILENAME}">
            SetHandler "proxy:unix:{{.PhpSocket}}|fcgi://localhost/"
        </If>
    </FilesMatch>

    ErrorLog  "| /usr/bin/logger -tapache -plocal1.err"
    CustomLog "| /usr/bin/logger -tapache -plocal1.notice" combined
</VirtualHost>
```

The configuration contains 2 variables:

- **`{{.DocumentRoot}}`** is replaced by the <a href="/php/how-to/build-pipeline#documentroot">`run.documentRoot`</a> attribute from the `zerops.yaml`. If the attribute is not specified, the default value `/var/www` is used.

- **`{{.PhpSocket}}`** is replaced by a path to the PHP socket based on the PHP version.

### Customize Apache configuration

Follow these steps to customize the Apache configuration in PHP+Apache service:

1. Create a **.tmpl** file with the Nginx configuration in your repository.

2. Optionally use following variables:

- **`{{.DocumentRoot}}`** is replaced by the <a href="/php/how-to/build-pipeline#documentroot">`run.documentRoot`</a> attribute from the `zerops.yaml`. If the attribute is not specified, the default value `/var/www` is used.

Example:

```
DocumentRoot {{.DocumentRoot}};
```

- **`{{.PhpSocket}}`** is replaced by a path to the PHP socket based on the PHP version.

Example:

```
<FilesMatch ".php$">
    SetHandler "proxy:unix:{{.PhpSocket}}|fcgi://localhost/"
</FilesMatch>
```

- **`{{.Environment.ENV_NAME}}`** is replaced by the [env variable](/php/how-to/env-variables) value. The env variable must be either defined in [run.envVariables](<(/php/how-to/build-pipeline#envvariables-1)>) in `zerops.yaml` or set as a [secret](/php/how-to/env-variables#set-secret-env-variables-in-zerops-gui) or [generated](/php/how-to/env-variables#generated-env-variables) env variable in Zerops GUI.

:::caution
Use the **.tmpl** file extension to make Zerops interpret the file as a template. Zerops will replace the supported variables listed above.
:::

3. Check that your Apache configuration is consistent with Zerops requirements:

- Do not use IP addresses in the `<VirtualHost>` directive
- If you use other ports than `:80` in the `<VirtualHost>` directive, add them to the <a href="/php/how-to/build-pipeline#ports">`run.ports`</a> in your `zerops.yaml` as well.
  Do not use the port **:443**. All the incoming `https://` traffic is terminated on the Zerops internal balancer where the SSL certificate is installed and the request is forwarded to your PHP+Apache service as a **http://** on the port **:80**.

4. Add the <a href="/php/how-to/build-pipeline#siteconfigpath">`siteConfigPath`</a> to the run section of your `zerops.yaml`.

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: php-apache@latest

      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles:
        - vendor
        - public

    # ==== how to run your application ====
    run:
      documentRoot: public

      # OPTIONAL. Sets the custom Nginx or Apache configuration. The file must be deployed in the runtime container. Enter the path to the file relative to the /var/www folder
      siteConfigPath: site_config.tmpl
```

5. Ensure that the <a href="/php/how-to/build-pipeline#deployfiles">`build.deployFiles`</a> contains the folder with the `siteConfigPath` or add the path to the Apache config file to the `deployFiles` list. Zerops will deploy the file to the runtime container(s).

6. [Trigger](/php/how-to/trigger-pipeline) the build & deploy pipeline.



## Delete PHP service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete PHP using zCLI

zCLI is the Zerops command-line tool. To delete the PHP service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step3.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Application artefact

When the [build phase](/php/how-to/build-process) is finished, the application artefact is stored in the internal Zerops storage and the build container is deleted.

If you triggered the deploy pipeline [manually](/php/how-to/trigger-pipeline#manual-deploy-using-zerops-cli) using Zerops CLI, the application artefact is also uploaded to the internal Zerops storage.

Zerops uses the stored artefact to deploy the identical version of your application each time a new container is started:

- when a new application version is deployed
- when the application [scales horizontally](/php/how-to/create#horizontal-auto-scaling)
- when a runtime container fails and a new container is started automatically

## First deploy

When your application is deployed for the first time, Zerops will start one or more runtime containers based on the service [auto scaling settings](/php/how-to/scaling).

Zerops performs following actions for each new container:

1. Installs the runtime environment
2. Downloads the application artefact from the internal storage
3. Optionally runs the [init commands](/php/how-to/build-pipeline#initcommands)
4. Starts your application
5. Optionally waits until the [readiness check](/php/how-to/build-pipeline#readiness-check) succeeds
6. The container is now active and receives incoming requests.

Services with multiple containers are deployed in parallel.

:::info
If your application needs to be initialized in each runtime container, add [init commands](/php/how-to/build-pipeline#initcommands) to `zerops.yaml`.
:::

:::caution
Do not use the `initCommands` for customising your runtime environment. See [how to customize the runtime environment](/php/how-to/customize-runtime).
:::

## Further deploys

When a previous version of your application is already running, Zerops will start new containers. The count of new containers will be the same as the count of existing containers.

Zerops performs the identical actions for each new container as the first deployment.
When all new containers are started your service contains both new and old versions for a short period of time.

The old containers are then removed from the project balancer so they don't receive new requests. The PHP process inside each of the old containers is terminated and all old containers are gradually deleted.

## Readiness checks

If your application isn't ready as soon as it starts, configure a [readiness check](/php/how-to/build-pipeline#readiness-check) in your `zerops.yaml`.

If the readiness check is defined, Zerops will:

1. Start your application
2. Perform a readiness check
3. If the readiness check fails, wait 5 seconds and repeat step 2.
4. If the readiness check succeeds, set the container as active.

Application in the runtime container with a pending readiness check won't receive any incoming requests. Only active containers receive incoming requests to your PHP service.

If the readiness check is still failing after 5 minutes, the specific runtime container is marked as failed and Zerops will delete it, create a new runtime container and perform the deploy.

The <a href="/php/how-to/build-pipeline#httpget">`httpGet`</a> readiness check is successful when the URL returns HTTP status code `2xx`. The timeout is 5 seconds. When the URL returns a `3xx` HTTP status, the readiness check HTTP client will follow the redirect.

The <a href="/php/how-to/build-pipeline#exec">`exec.command`</a> readiness check is successful when the command returns status code 0. The timeout is 5 seconds.

Read the [runtime log](/php/how-to/logs#runtime-log) to troubleshoot failed readiness checks.

## Application versions

Zerops keeps 10 last versions of your application in the internal storage.

The list of application versions is available in Zerops GUI. Go to the service detail and choose **Service dashboard & runtime containers** from the left menu. The active version is highlighted, show all archived version by clicking on the button below.

<p align="center">
  <img
    src="/img/screenshots/pipeline_history.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

The pipeline detail is accessible from the additional menu. The pipeline detail contains

- The pipeline config (`zerops.yaml`) that was used for the selected version
- The build log (if available)
- The prepare runtime log (if available)

You can download the build artefact of the selected version or delete an inactive version manually.

## Restore an archived version

You can restore an archived version by choosing the **Activate** item from the additional menu.
Zerops will deploy the selected version and the active version will be archived.

The environment variables will be restored to the latest moment when the selected version was active.



Environment variables help you run your application in different environments. They allow you to isolate all specific environment aspects from your application code and keep your app encapsulated. You can create several projects in Zerops that represent different environments (development, stage, production) or even each developer can have a project with its own environment.

In Zerops you do not have to create a `.env` file manually. Zerops handles the environment variables for you.

## Types of env variables in Zerops

There are 3 different sets of env variables in Zerops:

<table className="w-fit my-1.5">
  <thead>
    <tr className="text-center  rounded-lg">
      <th className="w-fit"><strong>Type</strong></th>
      <th className="w-fit"><strong>Environment</strong></th>
      <th className="w-fit"><strong>Defined in</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">build</td>
      <td className="w-fit"><a href="/php/how-to/build-pipeline#envvariables">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/php/how-to/build-pipeline#envvariables-1">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">secret</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/php/how-to/env-variables#set-secret-env-variables-in-zerops-gui">Zerops GUI</a></td>
    </tr>
  </tbody>
</table>


Use the [secret env variables](/php/how-to/create#set-secret-environment-variables) for all sensitive data you don't want to store in your application code. Secret env variables are also useful if you need for testing where you need to change the value of some env variables frequently. Secret variables are managed in Zerops GUI and you don't have to redeploy your application.

The basic build and runtime env variables are listed in your [zerops.yaml](/zerops-yaml/specification) and deployed together with your application code. When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your zerops.yaml and redeploy your application to Zerops.

You can [reference](/php/how-to/env-variables#reference-a-local-variable-in-another-variable-value) another variable of the same service or even a variable of [another service](/php/how-to/env-variables#reference-a-variable-of-another-project-service) within the same project.

## Set secret env variables in Zerops GUI

Use secret variables to store passwords, tokens and other sensitive information that shouldn't be part of your repository and listed in zerops.yaml.

<p align="center">
  <img
    src="/img/screenshots/secret_env.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

You can set env variables when you [create](/php/how-to/create) a new PHP service or you can set them later.

To configure env variables for an existing service, go to the service detail and choose **Environment variables** in the left menu. Scroll to the **Secret variables** section and click on the **Add secret variable** button and set variable key and value.

You can edit or delete env variables that you've created by clicking on the menu on the right side of each row.

The changes you've made to environment variables will be automatically applied to all containers of your project's services.

:::caution
You need to **restart** the runtime service after you update environment variables. The PHP process running in the container receives the list env variables only when it starts. Update of the env variables while the PHP process is running does not affect your application.
:::

## Set basic build env variables in zerops.yaml

To set basic env variables for the build environment, add the `envVariables` attribute to the build section in your `zerops.yaml`

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
       …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Set basic runtime env variables in zerops.yaml

To set basic env variables for the runtime environment, add the `envVariables` attribute to the runtime section in your `zerops.yaml`.

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    run:
       …

      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Env variable restrictions

**key**

- must satisfy the following regular expression: `[a-zA-Z_]+[a-zA-Z0-9_]*`
- all variable keys in the same service must be unique regardless of case
- keys are case sensitive

**value**

- must contain only ASCII characters
- the _End of Line_ character is forbidden

These restrictions apply to all [types of env variables](/php/how-to/env-variables#types-of-env-variables-in-zerops).

## Referencing other env variables

You can reference another variable of the same service using `${key}` in your variable value. You can even reference a variable from a different service using `${hostname_key}`. The referenced variable doesn't need to exist when you are entering your variable.

### Reference a local variable in another variable value

| Variable key | Variable value      | Computed variable value |
| ------------ | ------------------- | ----------------------- |
| id           | 12345               | 12345                   |
| hostname     | app                 | app                     |
| name         | `${id}-${hostname}` | 12345-app               |

### Reference a variable of another project service

Let's say your project contains two PostgreSQL services `dbtest` and `dbprod`. Both services have a `connectionString` variable. Then you can create a `dbConnectionString` env variable in your PHP runtime and set `${dbtest_connectionString}` as the variable value. Zerops will fill in the value of the `connectionString` variable of the `dbtest` service.

When you change the `dbConnectionString` value to `${dbprod_connectionString}`, Zerops will fill in the value of the `connectionString` variable of the `dbprod` service.

:::caution
When you change the value of the `connectionString` variable in the service `dbtest` you need to **restart** the PHP service. The PHP process running in the container receives the list env variables only when it starts. Update of the env variables while the PHP process is running does not affect your application.
:::

## Generated env variables

Zerops creates several helper variables when a PHP service is created, e.g. `hostname`, `PATH`. Some helper variables are read-only (`hostname`), others are editable (`PATH`). Generated variables cannot be deleted.

Generated env variables are listed on the **Environment variables** page. Scroll to the **Generated variables** section.

<p align="center">
  <img
    src="/img/screenshots/nodejs_generated_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## How to read env variables from your PHP app

To access the local environment variable i.e. the variable set to this PHP service in your app, use:

```sh
getenv('YOUR_VARIABLE_KEY_HERE');
```

## How to read env variables of another service

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Examples:

To access the `connectionString` env variable of the `mariadb1` service, use `mariadb1_connectionString` as the env variable key.
To access the `password` env variable of the `mariadb2` service, use `mariadb2_password` as the env variable key.

## How to read runtime env variables in the build environment

You can use runtime env variables in the build environment using the `RUNTIME_` prefix. For example if you have a runtime variable with the `connectionString` key, use the `RUNTIME_connectionString` to read the variable in the build environment. This rule applies both for basic and secret runtime variables.

## Basic and secret env variable with the same key

If you create a secret env variable and a basic runtime env variable with the same key, Zerops saves the basic runtime env variable from your zerops.yaml and ignores the secret env variable.

If you create a basic build env variable and a runtime env variable with the same key, Zerops saves both because the build and runtime environments have separate sets of env variables.



## Zerops GUI

In Zerops GUI, go to the service detail page and choose **Service containers & resources overview** and scroll down to the list of containers.

<p align="center">
  <img
    src="/img/screenshots/nodejs_containers_list.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Then click on the file browser icon and the file browser opens:

<p align="center">
  <img
    src="/img/screenshots/nodejs_file_browser.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

If your service is in the [HA mode], you can switch between containers in the top left corner.

## zCLI & SSH

You can connect to the container via SSH with the Zerops CLI and browse its files.
How to [connect to your service via SSH](/references/ssh).



Zerops provides 3 different logs:

- [build log](#build-log)
- [prepare runtime log](#prepare-runtime-log)
- [runtime log](#runtime-log)

## How to access logs

### Build log

#### Zerops GUI

To access a build log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Build log**. The build log button is available only if the [build pipeline](/php/how-to/trigger-pipeline) was triggered for the selected deploy.

#### zCLI

To access a build log in Zerops CLI use

```sh
zcli service log --showBuildLogs
```

Read more about the [zcli service log](/references/cli/access-logs) command.

### Prepare runtime log

#### Zerops GUI

To access a prepare runtime log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Prepare runtime log**. The prepare runtime log button is available only if the [prepare runtime pipeline](/php/how-to/build-pipeline#preparecommands-1) was triggered for the selected deploy.

#### zCLI

_Prepare runtime log is currently not supported in zCLI._

### Runtime log

#### Zerops GUI

To access a runtime log in Zerops GUI, go to the service detail and choose **Runtime log** in the left menu.

{/* TODO screenshot** */}

Each runtime container has its own log. If your service has multiple containers, select the container in the log header.

You can filter log records by minimum severity or by time.

#### zCLI

To access the log of the runtime containers in Zerops CLI use

```sh
zcli service log
```

Read more about the [zcli service log](/references/cli/access-logs) command.

## PHP logging configuration

Zerops logs all messages sent

- to the standard error (`stderr`)
- to the standard output (`stdout`)
- via the PHP `var_dump` method

### Severity level

By default the `console.log` creates a message with the `Informational (6)` severity.

Add a severity number in the `<N>` format as a prefix to set a custom severity as shown below:

// FIXME

```php
console.log('A message with the informational severity ...');
console.log('<0>Emergency (0) severity > system is unusable.');
console.log('<1>Alert (1) severity > action must be taken immediately.');
console.log('<2>Critical (2) severity > critical conditions.');
console.log('<3>Error (3) severity > error conditions.');
console.log('<4>Warning (4) severity > warning conditions.');
console.log('<5>Notice (5) severity > normal, but significant, condition.');
console.log('<6>Informational (6) severity > informational message.');
console.log('<7>Debug (7) severity > debug-level message.');
```

:::info

`console.info`, `console.warn`, `console.debug`
, and `console.error` are just aliases to the `
  console.log
` method. They don't set the appropriate severity number. Use the `
  &lt;N&gt;
` prefix instead. :::




Zerops performs an automated scaling of hardware resources required to run your runtime application based on its usage. If the current use of your application does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your application is under heavy load or needs to store more data, then auto scaling increases the resources to make sure it runs smoothly.

## Vertical and horizontal auto scaling

Each application you deploy starts with the minimum hardware resources: **CPU** cores, **RAM** and **Disk**. Zerops monitors the usage of these 3 resources and if the usage exceeds a set threshold, more CPU cores, RAM or Disk is allocated to the service. This is called **vertical scaling**.

<p align="center">
  <Image
    lightImage="/img/gui/resources.webp"
    darkImage="/img/gui/resources.webp"
    alt="Resources of a Zerops service"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

**Horizontal scaling** adds or removes whole containers.

Zerops has a preference for vertical scaling because it's faster and more precise. If the vertical auto scaling hits the defined maximum a new container is started automatically. When your application doesn't need so much power and all containers are vertically scaled down, Zerops will gradually remove whole containers.

<p align="center">
  <img
    src="/img/screenshots/scaling2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Configure auto scaling

To change the auto scaling settings go to the PHP service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### CPU mode

#### Shared

Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

#### Dedicated

The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

PHP service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the PHP service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient PHP performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your PHP service. When your PHP service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

PHP service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your application starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your application.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your application doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

By default Zerops keeps a minimum free RAM in each container. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your application need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 0.125 GB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the application is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each PHP service. Zerops will never scale above the entered values. If your application is in [highly available mode], maximal resources are identical for all containers of the PHP service.

### Not enough resources to scale up

If one of the PHP containers needs more resources but there are not enough of them on the underlying machine, a new container with the required hardware resources will be started on another machine. When the new container is ready, it will be added to the service balancer. The old container will be removed from the balancer and deleted.

### Automatic scale down

When the application no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the application from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal autoscaling

Zerops prefers vertical scaling over horizontal scaling because vertical scaling is faster and allows finer adjustment to the required performance. Horizontal scaling can be disabled by setting the same number for the minimum and maximum container count. Zerops will then scale the PHP service only vertically.

Your application is created with the defined minimum number of containers. Zerops will add a new container when any of the service's containers reaches the maximum limit for vertical scaling for CPU cores or RAM. Zerops doesn't start a new container when the maximum disk space is reached. No more containers are added when the defined maximum container limit is reached.

The new container is started with a minimum disk size and with an average CPU cores and RAM of the existing containers.

By customising the vertical auto scaling limits, you can cause the horizontal scaling to start earlier. For example if you lower the vertical auto scaling maximum to 1 CPU core, Zerops will start a new container if some of the running containers are using the whole CPU core for more than 20 seconds.

If the application no longer needs as much power, Zerops will gradually remove containers to the defined minimum count. The container is removed after its CPU cores are scaled down to the defined minimum and the free CPU is safely above the minimum threshold for vertical scaling. Zerops only **removes containers** with a minimum **15 minute lifetime**.

## Monitor PHP resources

Zerops provides information about how much hardware resources the PHP service is currently using. Go to the service detail in Zerops GUI and select **Service dashboard & runtime containers** in the left menu. Zerops also provides the history of resource usage.



Zerops provides [shared storage service](/shared-storage/overview) that can be connected to runtime services. Shared storage enables your runtime service to share files between all containers of the same service or even among containers of different runtime services.

## Connect a shared storage in Zerops GUI

Connect your PHP service directly when creating a new shared storage service. Just select your PHP service in the **Share with Services** block on the **Add new shared storage service** page.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_1.png)

To connect the existing shared storage to the PHP service, go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Select a runtime service and the shared storage will be connected to the selected runtime.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_2.png)

Zerops will create a new folder `/mnt/[shared storage name]`` in the runtime root folder. E.g. `/mnt/teststorage`for a`teststorage` shared storage. The content of this folder is shared among all containers of the runtime service you've selected. If you select multiple runtimes, the content of the folder will be shared among all containers of selected services.

## Disconnect a shared storage in Zerops GUI

Go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Switch off the toggle to disconnect the shared storage from the selected runtime.

:::note
Your runtime service will be automatically restarted when a shared storage is disconnected.
:::

## Create PHP service with a shared storage using zCLI

zCLI is the Zerops command-line tool. To create a new PHP service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/php/how-to/shared-storage#create-a-project-description-file)
3. [Create a project with a PHP service and a shared storage](/php/how-to/shared-storage#create-a-project-with-a-php-service-and-a-shared-storage)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### description.yaml format

[Read the basics](/php/how-to/create#create-a-project-description-file) how to define the PHP service using the description.yaml.

#### Example with a shared storage

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project

  # optional: project description
  description: A project with a PHP and a shared storage

  # optional: project tags
  tags:
    - DEMO
    - ZEROPS

# array of project services
services:
  - # service name
    hostname: teststorage

    # shared storage service has no version
    type: shared-storage

    # mode: HA / NON_HA
    mode: NON_HA

  - # service name
    hostname: app

    # service type and version number in php-apache@8.1+2.4 format
    type: php-apache@8.1+2.4

    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2

    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4

    # Mount the shared storage to the PHP service
    mount:
      - teststorage
```

The mount attribute accepts an array of shared storage names you want to mount to your runtime service.

### Create a project with a PHP service and a shared storage

Follow the article [How to create a project based on the description.yaml](/php/how-to/create#create-a-project-based-on-the-descriptionyaml).




<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-1.webp"
    darkImage="/img/mind-maps/build-deploy/step-1-dark.webp"
    alt="build deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Automatic builds and deploys from GitHub or GitLab

Integrate Zerops to your GitHub or GitLab repository and configure the automatic builds and deploys.

Follow these steps:

1. Add [zerops.yaml](/php/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository.
2. Connect your GitHub repository or connect your GitLab repository

Then each time you create a new tag or push to a specific branch, depending on the configuration, GitHub or GitLab will initiate a new build & deploy pipeline.

<p align="center">
  <Image
    lightImage="/img/gui/github-integration.webp"
    darkImage="/img/gui/github-integration.webp"
    alt="github integration"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

### Skip the automatic pipeline once

To ensure that a pipeline is not triggered by your next push, add `[ci skip]` or `[skip ci]` to the commit message. It is case insensitive.

:::note
You will still see a successful delivery of a webhook in your Github/Gitlab repository as a webhook is actually triggered, but with no action.
:::

## Manual builds and deploys using Zerops CLI

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    darkImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    alt="Manual Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

To start a new build & deploy pipeline manually, use the Zerops CLI.

Follow these steps:

1. Add <a href="/php/how-to/build-pipeline#add-zeropsyaml-to-your-repository">`zerops.yaml`</a> to your repository.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli push` command.

The `zcli push` command uploads your application code, builds and deploys your application in Zerops.

The command triggers the [build pipeline](/php/how-to/trigger-pipeline) defined in `zerops.yaml`. `zerops.yaml` must be in the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

zCLI uploads all files and subdirectories of the working directory to Zerops and starts the build pipeline. If the `.gitignore` file is found, it is interpreted and the defined files and folders will be ignored.

If you just want to deploy your application to Zerops, use the [zcli deploy](#manual-deploy-using-zerops-cli) command instead.

#### Push command parameters

```sh
Usage:
  zcli push [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.
  -h, --help                     the service push command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

zCLI commands are interactive, when you press enter after `zcli push`, you will be given a list of your projects to choose from.

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

## Manual deploy using Zerops CLI

To start only a deploy pipeline, use the Zerops CLI.

Follow these steps:

1. Add [zerops.yaml](/php/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository. Omit the build section.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli service deploy` command.

The `zcli service deploy` command uploads your application and deploys it in Zerops. Use this tool if you have your own build process. If you want to build your application in Zerops, use an [automatic](#automatic-builds-and-deploys-from-github-or-gitlab) or [manual](#manual-builds-and-deploys-using-zerops-cli) build process.

#### Deploy command parameters

```sh
Usage:
  zcli service deploy pathToFileOrDir [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
  -h, --help                     the service deploy command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

`pathToFileOrDir` defines a path to one or more directories and/or files relative to the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

`zerops.yaml` must be placed in the working directory.

:::info
You can change the deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your working directory.
:::



You can upgrade or downgrade your PHP service to a different major PHP version by setting the <a href="/php/how-to/build-pipeline#base-1">`run.base`</a> parameter in your `zerops.yaml`. When you [trigger a new pipeline](/php/how-to/trigger-pipeline), Zerops will start new runtime container(s) with the required PHP version. If you don't specify the `run.base` attribute in your `zerops.yaml`, Zerops keeps the current PHP version for your runtime.

If you want to build your application with a different major PHP version, change the <a href="/php/how-to/build-pipeline#base">`build.base`</a> parameter in your `zerops.yaml`. The `build.base` is the required attribute.




[PHP ↗](https://www.php.net/), a popular general-purpose scripting language that is especially suited to web development.


As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-php-hello-world), a **_recipe_**, containing the most simple PHP web application. The repo will be used as a source from which the app will be built.

<CustomCard title="Feel free to deploy the recipe yourself" emoji="🚀">
  This is the most bare-bones example of PHP running on Zerops — as few libraries as possible,
  just a simple endpoint with connect, read and write to a Zerops PostgreSQL database.

  <DeployButton link="php" badgeWidth="200" />
</CustomCard>

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)
2. In the **Projects** box click on **Import a project** and paste in the following YAML config ([source ↗](https://github.com/zeropsio/recipe-php-hello-world/blob/main/import-project/description.yaml)):

```yaml
project:
  name: my-first-project
services:
  - hostname: helloworld
    type: php-apache@8.1+2.4
    minContainers: 1
    maxContainers: 3
    buildFromGit: https://github.com/zeropsio/recipe-php-hello-world@main
    enableSubdomainAccess: true
```

3. Click on **Import project** and wait until all pipelines have finished.

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://helloworld-24-8080.prg1.zerops.app`.
2. Click or the `subdomain` URL to open it in a browser and you should see

```
Hello, World!
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::


## How to start

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/php/getting-started',
      label: 'New to Zerops?',
      customProps: {
        icon: Icons['rocket-launch'],
        description: 'Learn the basics by following a simple example.',
      },
    },
    {
      type: 'link',
      href: '/php/how-to/create',
      label: 'Care for details?',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description:
          'Dive in all Zerops has to offer for your PHP application.',
      },
    },
  ]}
/>

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/php/how-to/create',
      label: 'Create PHP service',
      customProps: {
        icon: Icons['php'],
        description: 'Start with creating a PHP service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: '/php/how-to/build-pipeline#add-zeropsyaml-to-your-repository',
      label: 'zerops.yaml',
      customProps: {
        icon: Icons['puzzle'],
        description:
          'See a full example of zerops.yaml file to create your own app.',
      },
    },
    {
      type: 'link',
      href: '/php/how-to/scaling',
      label: 'Scaling configuration',
      customProps: {
        icon: Icons['adjustments'],
        description:
          'Set up scaling of your PHP application so that it runs smoothly while using only necessary resources.',
      },
    },
  ]}
/>

{" "}

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/php/how-to/build-process#customize-php-build-environment',
      label: 'Customize build environment',
      customProps: {
        icon: Icons['sparkles'],
      },
    },
    {
      type: 'link',
      href: '/php/how-to/customize-runtime',
      label: 'Customize runtime environment',
      customProps: {
        icon: Icons['sparkles-solid'],
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/php/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>




<FAQ>
  <FAQItem question="Why is my connection to PostgreSQL from third-party software failing?">
    *One possible cause:* <br />
    The connection string in Zerops always starts with `postgresql://`. While the official PostgreSQL documentation
    states that both `postgresql://` and `postgres://` URIs are valid, some software requires the shorter `postgres://`
    version.
    
    To resolve this, create your own environment variable with the correct URI. For example, if your PostgreSQL service is named `db`, use the following format:
    
    ```
    postgres://${db_user}:${db_password}@${db_hostname}:${db_port}
    ```
  </FAQItem>
</FAQ>





This quick start allows you to get hands-on experience of Zerops by running a predefined application consisting of a PostgreSQL service and a runtime service that handles the SQL queries.

If you are already familiar with Zerops and you are interested in more detailed guides for your own PostgreSQL service, feel free to head straight to the [How to](/postgresql/how-to/create) section.

## Guides

We have created repositories, _recipes_, containing a simple web application and a PostgreSQL service, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics with one-service app.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=postgresql&type=all&language=&sort=',
      label: 'All PostgreSQL recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspired.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



This guide covers how to connect to your PostgreSQL database in Zerops, both from services within the same project and from outside the Zerops environment.

## Connection Options Overview

Zerops provides several ways to connect to PostgreSQL:

1. **Internal connections** - Between services in the same Zerops project (via private network)
2. **Remote connections**:
   - **VPN access** - From your local machine via Zerops VPN
   - **Direct IP access** - Enables external applications to connect using TLS encryption by opening public ports on IPv6 (available by default) or IPv4 (requires add-on activation if not already enabled)

## Connection Details

You'll find internal PostgreSQL connection details in two places in the Zerops GUI:

1. Under the **Access details** button in the project dashboard
2. In the service detail page under the **Peek access details** button

### Connection Parameters

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit">Parameter</th>
      <th className="w-fit">Internal Connection</th>
      <th className="w-fit">Direct IP Access (TLS)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit font-semibold whitespace-nowrap">Hostname/IP</td>
      <td className="w-fit">Service hostname</td>
      <td className="w-full">Public IP address</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold whitespace-nowrap">Port</td>
      <td className="w-fit">5432</td>
      <td className="w-full">6432</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold whitespace-nowrap">User</td>
      <td className="w-fit">Identical to the service hostname</td>
      <td className="w-full">Same as internal</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold whitespace-nowrap">Password</td>
      <td className="w-fit">Randomly generated during service creation</td>
      <td className="w-full">Same as internal</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold whitespace-nowrap">Port env variable</td>
      <td className="w-fit">`port`</td>
      <td className="w-full">`portTls`</td>
    </tr>
    <tr>
      <td className="w-fit font-semibold whitespace-nowrap">Connection string env variable</td>
      <td className="w-fit">`connectionString`</td>
      <td className="w-full">`connectionTlsString`</td>
    </tr>
  </tbody>
</table>

:::warning
Zerops creates a system user named `zps` with full privileges for maintenance purposes. Do not delete, change the password, or remove privileges from this user, as it will disrupt Zerops' ability to maintain the database cluster.
:::

:::info
For more information about default PostgreSQL setup, users, and databases, see [Manage PostgreSQL Users and Databases](/postgresql/how-to/manage).
:::

## Connect from Services in the Same Project

All services within a Zerops project share a dedicated private network. There are two ways to implement connections between services in the same project:

### Method 1: Direct Connection Parameters

You can directly use the connection parameters from Access Details:

```
host = database1
port = 5432
user = database1
password = ********** (find under Access Details)
```

### Method 2: Environment Variables (Recommended)

For better maintainability, Zerops creates environment variables for each PostgreSQL service that you can use in your application configuration. List of service environment variables is available in Zerops GUI. Go to a PostgreSQL service detail and choose **Environment variables**.

To use variables from one service in another, prefix the variable name with the service hostname and underscore - to access the `connectionString` variable of `postgresql1`, use `postgresql1_connectionString`.

For more details on how to use environment variables, and instructions for adding your own custom variables, see the [Environment Variables](/features/env-variables) documentation.

:::caution Important notes
- When changing passwords, update both the database user password and the environment variable separately - they don't automatically synchronize.
- While both `postgresql://` and `postgres://` URI formats are valid, Zerops uses the `postgresql://` format. If your software requires `postgres://`, create a custom environment variable with this format.
- Do not use SSL/TLS protocols for internal connections. Security is assured by the project's private network.
:::

## Connect Remotely

Zerops offers two methods for connecting to your PostgreSQL database from outside the Zerops environment:

### Method 1: Connect via Zerops VPN

You can securely connect to PostgreSQL from your local workstation via Zerops VPN:

1. [Install & set up zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)
3. Use the connection details from Access Details in the PostgreSQL service detail in Zerops GUI
4. When finished, [stop the Zerops VPN](/references/vpn#stop-vpn)

:::warning Important notes
* Do not use SSL/TLS protocols when connecting over VPN. Security is provided by the VPN tunnel.
* If your connection over VPN doesn't work, try adding `.zerops` suffix to the service hostname (e.g., `database1.zerops`). For additional help, check the [VPN troubleshooting page](/references/vpn/troubleshooting).
:::

### Method 2: Connect via Direct IP Access

Direct IP Access uses [pgBouncer](https://www.pgbouncer.org/) for connection pooling and TLS termination.

Internally, port `5432` is available without SSL. Externally, connections are secured with TLS through pgBouncer (port `6432`) before being routed to your PostgreSQL service.

#### Enable external access

1. Navigate to your PostgreSQL service in the Zerops GUI and choose the **Public Access through IP Addresses** section
2. Choose either IPv6 (available by default) or IPv4 (requires the [unique IPv4](/features/access#dedicated-ipv4-address-330-days) add-on)
3. Open one or more ports and point them to your PostgreSQL service (the system will direct them through pgBouncer)
   - Choose any port from 10-65435 (except 80 and 443)
   - Select destination service and internal port
   - Each public port can be mapped to any internal service port
   - Multiple public ports can point to the same internal port if needed
   - Port configurations can be set independently for IPv4 and IPv6
4. Optionally enable firewall protection for additional security
5. Click the **Publish X IP access change(s)** button to apply your settings

For database management tools and how to manage users and databases, see [Manage PostgreSQL Users and Databases](/postgresql/how-to/manage).


Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart PostgreSQL service in Zerops GUI

To stop the PostgreSQL service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)*/}

To start the stopped PostgreSQL service choose the **Start** item from the same menu.

To restart the PostgreSQL service choose the **Restart** item from the same menu.

## Stop and start PostgreSQL using zCLI

zCLI is the Zerops command-line tool. To stop and start the PostgreSQL service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and services to choose from.
:::




## Create PostgreSQL using Zerops GUI

First, set up a project in Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu in the **Services** block. Then add a new PostgreSQL service:

<Video
  src="/vids/services/postgres.webm"
  type="video/webm"
/>

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Limitations</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>hostname</strong></td>
      <td className="w-fit">A unique service identifier like `postgresql`,`sql`, `db` etc.</td>
      <td className="w-fit">
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
  </tbody>
</table>

:::caution
The hostname is fixed after the service is created. It can't be changed later.
:::

### Choose PostgreSQL service mode

Zerops provides PostgreSQL service in two modes: **Highly available** and **Single container**.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling7.png"
    darkImage="/img/screenshots/scaling7.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

#### Highly available

Creates a PostgreSQL cluster with **3 database containers** and **2 free database proxies**.
This mode is suited for production.

Zerops always keeps the 3 database containers on different physical machines. All your data is stored redundantly in 3 identical copies. In case of a container or the underlying physical machine failure, Zerops automatically disconnects the failed container from the cluster, creates a new container, and syncs all data from the remaining 2 copies. Finally, the broken container is automatically deleted.

[Learn more](/postgresql/tech-details/cluster) about specific behaviour and technical limitations of the PostgreSQL cluster.

#### Single container

A PostgreSQL database installed in a single container is created. Useful for non-essential data or dev environments.

:::caution
Your data is stored only in a single container. If the container or the underlying physical machine fails, your data since the last backup is lost. Zerops doesn't provide any automatic repairs of single-node PostgreSQL services.
:::

:::info
The PostgreSQL service mode is fixed after the service is created. It can't be changed later.
:::

### Choose PostgreSQL version

Following PostgreSQL versions are currently supported:

<UnorderedList data={data.postgresql.readable} />

### Set auto-scaling configuration

Zerops scales the PostgreSQL services automatically by raising or lowering the hardware resources of each database container.

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode, the power your application gets is dependent on other applications running on the same CPU core. In best case scenario your application gets 10/10 of CPU core power and 1/10 in the worst-case scenario.

**Dedicated**
The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

Choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto-scaling

Vertical auto-scaling has the following default configuration:

<ResourceTable resources={{
  ram: {
    min: '0.25 GB',
  }
}} />

For most cases, the default parameters will work without issues. If you need to limit the cost of the PostgreSQL service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient PostgreSQL performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](/postgresql/how-to/scaling#fine-tune-the-auto-scaling) the auto-scaling to fit your application needs.
:::

:::info
You can change the auto-scaling parameters later.
:::

:::tip
[Learn more](/postgresql/how-to/scale) about PostgreSQL auto-scaling.
:::

## Create PostgreSQL using zCLI

zCLI is the Zerops command-line tool. To create a new PostgreSQL service via the command line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](#create-a-project-description-file)
3. Create a project and a PostgreSQL service

### Create a project description file

Zerops uses a YAML format file to describe the project infrastructure.

#### Basic example

Create a directory `my-project`. Create a `description.yaml` file inside the directory with the following content:

```yaml
# Basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: postgresql1
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"NON_HA"
    mode: NON_HA
```

The YAML file describes your future project infrastructure. The project will contain one PostgreSQL service in the [single container](#single-container) mode with default [auto scaling](/postgresql/how-to/scale) configuration. The hostname will be set to `postgresql1`.

#### Full example

Create a directory `my-project`. Create a `description.yaml` file inside the directory with the following content:

```yaml
# Basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a PostgreSQL database
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # first service hostname
    hostname: postgresql1
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"NON_HA"
    mode: HA
    # optional: vertical auto-scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
  - # second service hostname
    hostname: postgresql2
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"non_HA"
    mode: NON_HA
```

The YAML file describes your future project infrastructure. The project will contain two PostgreSQL services.

The hostname of the first service will be set to `postgresql1`. The [high availability](#highly-available) mode will be chosen and the custom [auto scaling configuration](/postgresql/how-to/scale) will be set.

The hostname of the second service will be set to `postgresql2`. The [single container](#single-container) mode will be chosen and the default [auto scaling configuration](/postgresql/how-to/scale) will be set.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Limitations</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>name</strong></td>
      <td className="w-fit">The name of the new project. Duplicates are allowed.</td>
      <td className="w-fit"></td>
    </tr>
    <tr>
      <td className="w-fit"><strong>description</strong></td>
      <td className="w-fit"><strong>Optional.</strong> Description of the new project.</td>
      <td className="w-fit">Maximum 255 characters.</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>tags</strong></td>
      <td className="w-fit"><strong>Optional.</strong> One or more string tags. Tags do not have a functional meaning, they only provide better orientation in projects.</td>
      <td className="w-fit"></td>
    </tr>
  </tbody>
</table>


At least one service in the `services:` section is required. You can create a project with multiple services. The example above contains only PostgreSQL services but you can create a `description.yaml` with [different types] of services.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit">Parameter</th>
      <th className="w-fit">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">
        <b>hostname</b>
      </td>
      <td className="w-fit">
        The unique service identifier.
        <br />
        <br />
        The hostname of the new database will be set to the `hostname` value. <br />
        <br />
        <b>Limitations:</b>
        <br />- duplicate services with the same name in the same project are
        forbidden
        <br />
        - maximum 25 characters
        <br />- must contain only lowercase ASCII letters (a-z) or numbers (0-9)
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>type</b>
      </td>
      <td className="w-fit">
        Specifies the service type and version.
        <br />
        See what [PostgreSQL service types](/references/import-yaml/type-list#database-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>mode</b>
      </td>
      <td className="w-fit">
        Defines the operation mode of the PostgreSQL service.
        <br />
        <br />
        <b>HA</b>
        <br />
        Creates a PostgreSQL cluster with 3 database containers and 2 free
        database proxies. This mode is suited for production.
        <br />
        <br />
        Zerops always keeps the 3 database containers on different physical
        machines. All your data is stored redundantly in 3 identical copies. In
        case of a failure of a container or the underlying physical machine,
        Zerops automatically disconnects the failed container from the cluster,
        creates a new container and syncs all data from the remaining 2 copies.
        Finally, the broken container is automatically deleted.
        <br />
        <br />
        <b>NON_HA</b>
        <br />
        Zerops will create a PostgreSQL database installed in a single
        container. Useful for non-essential data or dev environments.
        <br />
        <br />
        Your data is stored only in a single container. If the container or the
        the underlying physical machine fails, your data since the last backup are
        lost. Zerops doesn't provide any automatic repairs of a single node
        PostgreSQL services.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>verticalAutoscaling</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Defines <a href="/postgresql/how-to/create#set-auto-scaling-configuration">custom vertical auto-scaling parameters</a>.<br />
        All verticalAutoscaling attributes are optional. Not specified
        attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - cpuMode</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minCpu/maxCpu</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minCpu or maxCpu in CPU cores (integer).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minRam/maxRam</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minRam or maxRam in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minDisk/maxDisk</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minDisk or maxDisk in GB (float).
      </td>
    </tr>
  </tbody>
</table>

:::caution
The PostgreSQL service **hostname** and **mode** are fixed after the service is created. They can't be changed later.
:::

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project will be created.
      --workingDie string   Sets a custom working directory. The default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

The maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>
### Add PostgreSQL service to an existing project

#### Example

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```bash
# array of project services
services:
  -
    # service name
    hostname: postgresql1
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"NON_HA"
    mode: NON_HA
```

The YAML file describes the list of one or more services that you want to add to your existing project. In the example above, one PostgreSQL service in the [single container mode](#single-container) with default [auto scaling](/postgresql/how-to/scale) configuration will be added to your project. The hostname of the new service will be set to `postgresql1`.

The content of the `services:` section of `import.yaml` is identical to the [project description file](#create-a-project-description-file). The `import.yaml` never contains the `project:` section because the project already exists.

When your `import.yaml` is ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command will be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

The maximum size of the `import.yaml` file is 100 kB.



## Delete PostgreSQL service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete PostgreSQL using zCLI

zCLI is the Zerops command-line tool. To delete the PostgreSQL service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



## Use Adminer or phpMyAdmin to export or import data
* [Adminer ↗](https://www.adminer.org) - an open source full-featured database management tool written in PHP
* [phpMyAdmin ↗](https://www.phpmyadmin.net) - a free software tool written in PHP, intended to handle the administration of PostgreSQL over the Web

1. [Install the tools to Zerops](/postgresql/how-to/manage#installing-management-tools)
2. Use their standard export or import functions

## Use a database management tool on your workstation to export or import data

Do you already use a database management tool that supports PostgreSQL on your workstation? Connect it securely to PostgreSQL from your local workspace via Zerops VPN.

Zerops VPN client is included into zCLI, the Zerops command-line tool. To start the VPN connection, read [how to connect to PostgreSQL remotely](/postgresql/how-to/connect#connect-remotely).
:::caution
Do not use SSL/TLS protocols when connecting to PostgreSQL over VPN. Zerops PostgreSQL is not configured to support these protocols. The security is assured by the VPN.
:::

Once the connection to PostgreSQL is established, use the standard export or import functions of your favourite management tool.

## Use psql CLI to export or import data

If you are using the [psql ↗](https://www.postgresql.org/docs/current/app-psql.html) command-line client to manage your PostgreSQL on your local workspace, you can connect it securely to PostgreSQL via Zerops VPN.

Zerops VPN client is included into zCLI, the Zerops command-line tool. To start the VPN connection, read [how to connect to PostgreSQL remotely](/postgresql/how-to/connect#connect-remotely).

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/postgresql/how-to/connect#method-2-environment-variables-recommended) are available when connected through VPN. To connect to PostgreSQL in Zerops you have to copy the [access details](/postgresql/how-to/connect#connection-details) manually from Zerops GUI.

Use [psql ↗](https://www.postgresql.org/docs/current/app-psql.html) command to connect to PostgreSQL in Zerops:

```sh
psql -h [hostname] -U [user] -p [password] -d [database_name]
```

:::caution
Do not use SSL/TLS protocols when connecting to PostgreSQL over VPN. Zerops PostgreSQL is not configured to support these protocols. The security is assured by the VPN.
:::

To export your database data and structure, use the [pg_dump ↗](https://www.postgresql.org/docs/current/backup-dump.html) command.

```sh
pg_dump [database_name] > dumpfilename.sql
```

To import your database data and structure, use the `mysql` command.

```sh
mysql [database_name] < dumpfilename.sql
```




This guide covers how to manage your PostgreSQL databases in Zerops, including default setup, database management tools, plugins, and best practices.

## Default Database and User

Zerops creates a default database and user automatically when a new PostgreSQL service is [created](/postgresql/how-to/create).

### Database

- **Name**: Identical to the service hostname
- **Encoding**: `utf8mb4`

### DB User

- **Username**: Identical to the service hostname
- **Password**: Generated randomly

:::info
For connection methods and environment variables, see the [Connect to PostgreSQL in Zerops](/postgresql/how-to/connect) page.
:::

:::caution Important notes
- When changing passwords, update both the database user password and the environment variable separately - they don't automatically synchronize.
- While both `postgresql://` and `postgres://` URI formats are valid, Zerops uses the `postgresql://` format. If your software requires `postgres://`, create a custom environment variable with this format.
- Do not use SSL/TLS protocols for internal connections. Security is assured by the project's private network.
:::

## Database Management Tools

You can use any PostgreSQL management tool of your choice to administer your databases in Zerops. For convenience, Zerops provides ready-to-use recipes for two popular web-based database management tools:

* [AdminerEvo](https://github.com/adminerevo/adminerevo) - developed by the AdminerEvo community and is a continuation of the [Adminer](https://www.adminer.org) project by Jakub Vrána
* [phpMyAdmin](https://www.phpmyadmin.net) - a popular free database administration tool that works with both MySQL and PostgreSQL databases

### Installing Management Tools

You can install these tools with a simple one-click import in Zerops:

1. In Zerops GUI, open your project and select **Import services** from the left menu
2. Copy and paste one of the following YAML configurations:

<TabbedCodeBlocks
  tabs={[
    {
      label: 'AdminerEvo',
      language: 'yaml',
      code: `services:
  - hostname: adminerevo
    type: php-apache@8.3
    enableSubdomainAccess: true
    buildFromGit: https://github.com/zeropsio/recipe-adminerevo`
    },
    {
      label: 'phpMyAdmin',
      language: 'yaml',
      code: `services:
  - hostname: phpmyadmin
    type: php-apache@8.1+2.4
    minContainers: 1
    maxContainers: 1
    documentRoot: public
    buildFromGit: https://github.com/zeropsio/recipe-phpmyadmin@main`
    }
  ]}
  defaultTab="AdminerEvo"
/>

### Accessing Management Tools

After installation, you can access these tools via VPN:

1. [Start the Zerops VPN](/references/vpn)
2. Type `http://adminerevo` or `http://phpmyadmin` in your browser

:::tip
Try `http://adminerevo.zerops` or `http://phpmyadmin.zerops` if you encounter any connection issues.
:::

:::caution
Do not use https when connecting to management tools via VPN.
:::

## Database Tools on Your Workstation

You can use various database management tools from your local workstation to connect to your PostgreSQL database in Zerops:

1. **Establish a secure tunnel** using the [Zerops VPN](/references/vpn) to create an encrypted connection to your Zerops project
2. **Obtain the [connection details](/postgresql/how-to/connect#connection-details)** from Zerops GUI
    - Environment variables are not available through VPN connections
3. Connect with your **preferred database tool**
    - Do not use SSL/TLS (security is provided by the VPN)
    - **Desktop Database Tools** - popular GUI tools like pgAdmin, DBeaver, DataGrip, or any other PostgreSQL-compatible client will work with Zerops
    - **Command Line with psql** - connect using the standard PostgreSQL command-line client with the credential obtained above:
        ```sh
        psql -h [hostname] -U [user] -d [database_name]
        ```

:::tip
    Try `{hostname}.zerops` instead of just `{hostname}` if you encounter any connection issues.
:::

## How to install and manage PostgreSQL plugins

### Viewing available plugins
You can list all available PostgreSQL plugins by running the following query *(superuser privileges not required)*:

```sql
SELECT * FROM pg_available_extensions ORDER BY name;
```

### Installing plugins (requires superuser)

1. **Connect with superuser credentials**:
   - Use the `superUser` (user `postgres`) and `superUserPassword` environment variables from your PostgreSQL service

2. **Switch to your service database**:
   When logging in as the superuser, you're initially in the `postgres` database, not your service database.

3. **Install required extensions**:
   ```sql
   CREATE EXTENSION pg_stat_statements;
   CREATE EXTENSION vector;
   CREATE EXTENSION postgis;
   ```

:::warning
Currently, it is not possible to add new plugins that are not already listed in `pg_available_extensions`.
:::

When working with text search functionality, you'll need to reference the correct `stop`, `dict`, and `affix` files when creating dictionaries in your database. These files are essential for proper text search configuration.

Zerops PostgreSQL includes the following dictionary files:

<Dropdown>
<DropdownItem title="Available dictionary files">
**Stop word files** - used to remove common words that don't add significant meaning:
```
czech.stop
danish.stop
dutch.stop
english.stop
finnish.stop
french.stop
german.stop
hungarian.stop
italian.stop
nepali.stop
norwegian.stop
polish.stop
portuguese.stop
russian.stop
slovak.stop
spanish.stop
swedish.stop
turkish.stop
```
**Dictionary and affix files** - used for stemming and word normalization:
```
cs_CZ.affix
cs_CZ.dict
en_US.affix
en_US.dict
pl_PL.affix
pl_PL.dict
sk_SK.affix
sk_SK.dict
```
**Special rules file:**
```
unaccent.rules
```
</DropdownItem>
</Dropdown>
For more information on text search dictionaries, refer to the [PostgreSQL documentation](https://www.postgresql.org/docs/16/textsearch-dictionaries.html).



Zerops performs an automated scaling of hardware resources required to run your database based on its usage. If the current use of your database does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your database is under heavy load or needs to store more data, then auto scaling increases the resources for the database to make sure it runs smoothly.

## Configure auto scaling

To change the auto scaling settings go to the PostgreSQL service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling7.png"
    darkImage="/img/screenshots/scaling7.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### CPU Mode

**Shared**
Your database gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your database gets is depended on other applications running on the same CPU core. At best case scenario your database gets 10/10 of CPU core power and 1/10 at worst case scenario.

**Dedicated**
The CPU core is dedicated to your database.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

Choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable resources={{
  ram: {
    min: '0.25 GB',
  }
}} />

For most cases, the default parameters will work without issues. If you need to limit the cost of the PostgreSQL service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient PostgreSQL performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](/postgresql/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your database needs.
:::

:::tip
[Learn more](/postgresql/how-to/scale) about PostgreSQL auto scaling.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your database starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your database.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your database doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

The default minimum free RAM is preset according to the database type and version. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your database need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 0.125 GB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the database is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each PostgreSQL service. Zerops will never scale above the entered values. If your database is in [highly available mode], maximal resources are identical for all containers of the PostgreSQL service.

### Not enough resources to scale up

Zerops moves a container between physical machines only if there are not enough resources on the current physical machine to scale the container up. When this happens the behaviour is different for [highly available](/postgresql/how-to/create#highly-available) and [single container](/postgresql/how-to/create#single-container) mode.

### Automatic scale down

When the database no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the database from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal scaling

Zerops provides PostgreSQL service in two modes: [Highly available](/postgresql/how-to/create#highly-available) and [Single container](/postgresql/how-to/create#single-container). The PostgreSQL service mode is chosen when creating a new service and cannot be changed later.

Zerops doesn't scale PostgreSQL service horizontally, it means no containers are added or removed from the database cluster. Only in case of a failure of a container or the underlying physical machine, Zerops automatically replaces the broken container with a new one.

## Monitor database resources

Zerops provides information about how much hardware resources the PostgreSQL service is currently using. Go to PostgreSQL service detail in Zerops GUI and select **Service dashboard & database containers** in the left menu. Zerops also provides the history of resource usage.




[PostgreSQL ↗](https://www.postgresql.org/) is a powerful, open source object-relational database system with over 35 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/postgresql/how-to/create',
      label: 'Create PostgreSQL service',
      customProps: {
        icon: Icons['computer-desktop'],
        description:
          'Start with creating a PostgreSQL service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: '/postgresql/how-to/create#highly-available',
      label: 'HA mode',
      customProps: {
        icon: Icons['squares-plus'],
        description: 'Learn how to setup your database to be production-ready.',
      },
    },
    {
      type: 'link',
      href: '/postgresql/how-to/create#full-example',
      label: 'Import config file',
      customProps: {
        icon: Icons['puzzle'],
        description: 'Use an example config file to import your own app.',
      },
    },
  ]}
/>

### Connect to PostgreSQL service

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/postgresql/how-to/manage',
      label: 'Manage users and databases',
      customProps: {
        icon: Icons['circle-stack'],
      },
    },
    {
      type: 'link',
      href: '/postgresql/how-to/connect#connect-from-services-in-the-same-project',
      label: 'Connect from the same project',
      customProps: {
        icon: Icons['link'],
      },
    },
    {
      type: 'link',
      href: '/postgresql/how-to/connect#connect-remotely',
      label: 'Connect remotely',
      customProps: {
        icon: Icons['globe-europe'],
      },
    },
  ]}
/>

### Others

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/postgresql/how-to/scale',
      label: 'Scale postgresql service',
      customProps: {
        icon: Icons['adjustments'],
      },
    },
    {
      type: 'link',
      href: '/postgresql/how-to/export-import-data',
      label: 'Export and import data',
      customProps: {
        icon: Icons['arrow-down-tray'],
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/postgresql/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>




<FAQ>
  <FAQItem question="Sample Question">sample answer</FAQItem>
</FAQ>




This quick start allows you to get hands-on experience of Zerops, whether you only want to see it in action or want to start small and scale up the project size later. The purpose of this guide is to get an existing Python application up and running easily.

If you are already familiar with Zerops and you are interested in more detailed guides for your own application, feel free to head straight to the [How to](/python/how-to/create) section.

## Guides

We have created a repository, a _recipe_, containing the most simple Python web application, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics on the way.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-python',
      label: 'Python + SQL database',
      customProps: {
        icon: Icons['github'],
        description: 'A more complex, multi-service application example.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=python&type=all&language=&sort=',
      label: 'All Python recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspired.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



## Private internal access

Projects in Zerops represent a group of one or more services.
Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its [internal port](/python/how-to/build-pipeline#ports).

To connect to your application with `app` hostname running on [internal port](/python/how-to/build-pipeline#ports) `8000`, simply use `http://app:8000`

:::info
Do not use `https://` when communicating with Python from other runtime services in the same project. The internal communication is done over a private network and is isolated from other projects.
:::

### Use Python environment variables

Zerops creates default environment variables for each Python service to help you with connection within the same project. To avoid the need to copy the access parameters manually, use [generated environment variables](/python/how-to/env-variables#generated-env-variables) of the Python service.

#### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Example:

To access the `API_TOKEN` env variable of the `app` service, use `app_API_TOKEN` as the env variable key.

Read more about [env variables](/python/how-to/env-variables).

## Private access via VPN

### Start VPN connection

You can securely connect to your Python application from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)

### Access Python application through VPN

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/python/how-to/env-variables) are available when connected through VPN. To connect to your Python application in Zerops set the hostname and [internal port](/python/how-to/build-pipeline#ports) e.g. http://app:8000

:::info
Do not use `https://` when communicating with Python over the VPN. The security is assured by the VPN. The internal communication is done over a private network and is isolated from other projects.
:::

### Connect via SSH

Use the <a href="/references/ssh">`ssh` command</a> to connect to your service via SSH.

### Stop VPN connection

[Stop the Zerops VPN](/references/vpn#stop-vpn) in zCLI.

## Public access through zerops.io subdomain

By default, your Python service is not publicly accessible. To test your application, enable the [public access through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain).

## Public access through your domain

By default, your Python service is not publicly accessible. When your application is ready for production or if you want to test it on the production domain, [configure the public access through your domain](/features/access#public-access-through-your-domain).

## Public access from another Zerops project

All services of the same project share a dedicated private network. To connect to a service within the same project, just use the service hostname and its [internal port](/python/how-to/build-pipeline#ports). Different projects are not connected inside Zerops. To connect to a runtime service from another Zerops project, you need to use public access either [through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain) or [through your domain](/features/access#public-access-through-your-domain).





Zerops provides a customizable build and runtime environment for your Python application.

## Add zerops.yaml to your repository

Start by adding `zerops.yaml` file to the **root of your repository** and modify it to fit your application:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: python@latest

      # OPTIONAL. Set the operating system for the build environment.
      # os: ubuntu

      # OPTIONAL. Customize the build environment by installing additional packages
      # or tools to the base build environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles:
        - app.py

      # OPTIONAL. Copy files from build container to runtime container.
      addToRunPrepare:
        - requirements.txt

      # OPTIONAL. Which files / folders you want to cache for the next build.
      # Next builds will be faster when the cache is used.
      # cache: file.txt

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base: python@latest

      # OPTIONAL. Sets the internal port(s) your app listens on:
      ports:
        # port number
        - port: 8000

      # OPTIONAL. Customize the runtime Python environment by installing additional
      # dependencies to the base Python runtime environment.
      # prepareCommands:
      #   - python3 -m pip install --ignore-installed -r requirements.txt

      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Python application is started.
      # initCommands:
      #  - rm -rf ./cache

      # REQUIRED. Your Python application start command
      start: python3 app.py
```

The top-level element is always `zerops`.

### Setup

The first element `setup` contains the **hostname** of your service. A runtime service with the same hostname must exist in Zerops.
Zerops supports the definition of multiple runtime services in a single `zerops.yaml`. This is useful when you use a monorepo. Just add multiple setup elements in your `zerops.yaml`:

```yaml
zerops:
  # definition for app service
  - setup: app
    build: ...
    run: ...

  # definition for api service
  - setup: api
    build: ...
    run: ...
```

Each service configuration contains at least two sections: **build** and **run**. Both sections are required to build and deploy your Python application in Zerops. If you'd like to use a readiness check, add an optional **deploy** section.

## Build pipeline configuration

### base

_REQUIRED._ Sets the base technology for the build environment.

Following options are available for Python builds:

<UnorderedCodeList data={data.python.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: python@latest
      ...
```

<p>
  The base build environment contains {data.alpine.default}, the selected
  major version of Python, <a href="/references/cli">Zerops command line tool</a>, `pip` and `git`.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the build environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base:
        - python@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [build base environments](/zerops-yaml/base-list#runtime-services).

To customize your build environment use the [prepareCommands](/python/how-to/build-pipeline#preparecommands) attribute.

:::note
Modifying the base technology will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for more details about cache invalidation.
:::

### os

_OPTIONAL._ Sets the operating system for the build environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customized.
:::

:::note
Changing the OS setting will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache behavior.
:::

### prepareCommands

_OPTIONAL._ Customizes the build environment by installing additional dependencies or tools to the base build environment.

The base build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Python defined in the [base](/python/how-to/build-pipeline#base) attribute
- [Zerops command line tool](/references/cli)
- `pip` and `git`

To install additional packages or tools add one or more prepare commands:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: python@latest

      # OPTIONAL. Customize the build environment by installing additional packages
      # or tools to the base build environment.
      prepareCommands:
        - apt install python3-pip # already installed for Python services
      ...
```

When the first build is triggered, Zerops will

1. create a build container
2. download your application code from your repository
3. run the prepare commands in the defined order

The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).

:::note
These commands are skipped when using cached environment. Modifying `prepareCommands` will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache invalidation.
:::

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/python/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all prepare commands are finished, your custom build environment is ready for the build phase.

#### Run prepare commands as a single shell instance

Use following syntax to run all commands in the same environment context. For example, if one command changes the current directory, the next command continues in that directory. When one command creates an environment variable, the next command can access it.

```yaml
prepareCommands:
  - |
    apt update
    apt install python3-pip # already installed for Python services
```

#### Run prepare commands as a separate shell instances

When the following syntax is used, each command is triggered in a separate environment context. For example, each shell instance starts in the home directory again. When one command creates an environment variable, it won't be available for the next command.

```yaml
prepareCommands:
  - apt update
  - apt install python3-pip # already installed for Python services
```

### deployFiles

_REQUIRED._ Selects which files or folders will be deployed after the build has successfully finished. To filter out specific files or folders, use <a href="#deployignore">`.deployignore`</a> file.

```yaml
# REQUIRED. Select which files / folders to deploy after
# the build has successfully finished
deployFiles:
  - app.py
```

Determines files or folders produced by your build, which should be deployed to your runtime service containers.

The path starts from the **root directory** of your project (the location of `zerops.yaml`). You must enclose the name in quotes if the folder or the file name contains a space.

The files/folders will be placed into `/var/www` folder in runtime, e.g. `./src/assets/fonts` would result in `/var/www/src/assets/fonts`.

#### Examples

Deploys a folder, and a file from the project root directory:

```yaml
deployFiles:
  - app.py
```

Deploys the whole content of the build container:

```yaml
deployFiles: .
```

Deploys a folder, and a file in a defined path:

```yaml
deployFiles:
  - ./path/to/file.txt
  - ./path/to/dir/
```

#### How to use a wildcard in the path

Zerops supports the `~` character as a wildcard for one or more folders in the path.

Deploys all `file.txt` files that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/file.txt
```

Deploys all folders that are located in any path that begins with `/path/to/`

```yaml
deployFiles: ./path/to/~/
```

Deploys all folders that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/
```

:::note Example
By default, `./src/assets/fonts` deploys to `/var/www/src/assets/fonts`, keeping the full path. Adding `~`, like `./src/assets/~fonts`, shortens it to `/var/www/fonts`
:::

#### .deployignore

Add a `.deployignore` file to the root of your project to specify which files and folders Zerops should ignore during deploy. The syntax follows the same pattern format as <a href="https://git-scm.com/docs/gitignore#_pattern_format">`.gitignore`</a>.

To ignore a specific file or directory path, start the pattern with a forward slash (`/`). Without the leading slash, the pattern will match files with that name in any directory.

:::tip
For consistency, it's recommended to configure both your `.gitignore` and `.deployignore` files with the same patterns.
:::

Examples:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      deployFiles: ./
```

```text title=".deployignore"
/src/file.txt
```
The example above ignores `file.txt` only in the root src directory.
```text title=".deployignore"
src/file.txt
```
This example above ignores `file.txt` in ANY directory named `src`, such as:
- `/src/file.txt`
- `/folder2/folder3/src/file.txt`
- `/src/src/file.txt`

:::note
`.deployignore` file also works with <a href="/references/cli/commands#deploy">`zcli service deploy`</a> command.
:::

### cache

_OPTIONAL._ Defines which files or folders will be cached for the next build.

```yaml
# OPTIONAL. Which files / folders you want to cache for the next build.
# Next builds will be faster when the cache is used.
cache: file.txt
```

The cache attribute helps optimize build times by preserving specified files between builds.

The cache attribute supports the [~ wildcard character](#how-to-use-a-wildcard-in-the-path).

Learn more about the [build cache system](/features/build-cache) in Zerops.

### envVariables

_OPTIONAL._ Defines the environment variables for the build environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      base: python@latest
        …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        PYTHON_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/python/how-to/env-variables) in Zerops.

## Runtime configuration

### base

_OPTIONAL._ Sets the base technology for the runtime environment.
If you don't specify the `run.base` attribute, Zerops keeps the current Python version for your runtime.

Following options are available for Python builds:

<UnorderedCodeList data={data.python.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: python@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
        base: python@latest
      ...
```

<p>
  The base runtime environment contains {data.alpine.default}, the
  selected major version of Python, <a href="/references/cli">Zerops command line tool</a>, `pip` and `git`.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the runtime environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: python@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base:
        - python@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [run base environments](/zerops-yaml/base-list).

To customize your build environment use the `prepareCommands` attribute.

### os

_OPTIONAL._ Sets the operating system for the runtime environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customised.
:::

### ports

_OPTIONAL._ Specifies one or more internal ports on which your application will listen.

Projects in Zerops represent a group of one or more services. Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its internal port.

For example, to connect to a Python service with hostname = "app" and port = 8000 from another service of the same project, simply use `app:8000`. Read more about [how to access a Python service](/python/how-to/access).

Each port has following attributes:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">port</td>
      <td className="w-fit">Defines the port number. You can set any port number between <em>10</em> and <em>65435</em>. Ports outside this interval are reserved for internal Zerops systems.</td>
    </tr>
    <tr>
      <td className="w-fit">protocol</td>
      <td className="w-fit"><strong>Optional.</strong> Defines the protocol. Allowed values are <code>TCP</code> or <code>UDP</code>. Default value is <code>TCP</code>.</td>
    </tr>
    <tr>
      <td className="w-fit">httpSupport</td>
      <td className="w-fit"><strong>Optional.</strong> <code>httpSupport = true</code> is the default setting for TCP protocol. Set <code>httpSupport = false</code> if a web server isn't running on the port. Zerops uses this information for the configuration of <a href="/features/access">public access</a>. <code>httpSupport = true</code> is available only in combination with the TCP protocol.</td>
    </tr>
  </tbody>
</table>

### prepareCommands

_OPTIONAL._ Customises the Python runtime environment by installing additional dependencies or tools to the runtime base environment.

<p>
  The base Python environment contains {data.alpine.default}, the selected
  major version of Python, <a href="/references/cli">Zerops command line tool</a>, `pip` and `git`. To install additional packages or tools add one or more
  prepare commands:
</p>

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Python runtime environment.
      prepareCommands:
        - python3 -m pip install --ignore-installed -r requirements.txt
      ...
```

When the first deploy with a defined prepare attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/python/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `prepareCommands` commands in the defined order

#### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/python/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

#### Cache of your custom runtime environment

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the [build.addToRunPrepare](#copy-folders-or-files-from-your-build-container) and `run.prepareCommands` attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.

{/* TODO screenshot** */}

When the prepare cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build:prepareCommands](#preparecommands).

### Copy folders or files from your build container

<p>
  The prepare runtime container contains {data.alpine.default} the
  selected major version of Python, <a href="/references/cli">Zerops command line tool</a>, `pip` and `git`.
</p>

The prepare runtime container does not contain your application code nor the built application. If you need to copy some folders or files from the build container to the runtime container (e.g. a configuration file) use the `addToRunPrepare` attribute in the [build section](#build-pipeline-configuration).

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...
      addToRunPrepare:
        - requirements.txt

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Python runtime environment.
      prepareCommands:
        - python3 -m pip install --ignore-installed -r requirements.txt
      ...
```

In the example above Zerops will copy the `runtime-config.yaml` file from your build container **after the build has finished** into the new **prepare runtime** container. The copied files and folders will be available in the `xxx` folder in the new prepare runtime container before the prepare commands are triggered.

### initCommands

_OPTIONAL._ Defines one or more commands to be run each time a new runtime container is started or a container is restarted.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Python application is started.
      initCommands:
        - rm -rf ./cache
```

These commands are triggered in the runtime container before your Python application is started via the [start command](/python/how-to/build-pipeline#start).

Use init commands to clean or initialise your application cache or similar operations.

:::caution
The init commands will delay the start of your application each time a new runtime container is started (including the [horizontal scaling](/python/how-to/scaling#horizontal-auto-scaling) or when a runtime container is restarted).

Do not use the init commands for customising your runtime environment. Use the [run:prepareCommands](/python/how-to/build-pipeline#preparecommands-1) attribute instead.
:::

#### Command exit code

If any of the `initCommands` fails, it returns an exit code other than 0, but deploy is **not** canceled. After all init commands are finished, regardless of the status code, the application is started. Read the [runtime log](/python/how-to/logs#runtime-log) to troubleshoot the error.

#### Single or separated shell instances

You can configure your `initCommands` to be run in a single shell instance or multiple shell instances. The format is identical to [build:prepareCommands](#preparecommands).

### envVariables

_OPTIONAL._ Defines the environment variables for the runtime environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to run your application ====
    run:
      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        PYTHON_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/python/how-to/env-variables) in Zerops.

### start

_REQUIRED._ Defines the start command for your Python application.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Python application start command
      start: app.py
```

### health check

_OPTIONAL._ Defines a health check.

`healthCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the health check to request a local URL using a HTTP GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Python application start command
      start: app.py

      # OPTIONAL. Define a health check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      healthCheck:
        httpGet:
          port: 80
          path: /status
```

Read more about how the [health check works] in Zerops.

#### exec

Configures the health check to run a local command.
Following attributes are available:


<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/python/how-to/create#set-secret-environment-variables">environment variables</a> as your Python application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>


**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Python application start command
      start: app.py

      # OPTIONAL. Define a health check with a shell command.
      healthCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [health check works] in Zerops.

### crontab

_OPTIONAL._ Defines cron jobs.

Setup cron jobs in the following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app

    # ==== how to run your application ====
    run:
      crontab:
        # REQUIRED. Sets the command to execute:
        - command: ""
        # REQUIRED. Sets the interval time to execute:
          timing: "0 * * * *"
```

Read more about setting up [cron](/references/cron) in Zerops.

## Deploy configuration

### readiness check

_OPTIONAL._ Defines a readiness check. Read more about how the [readiness check works](/python/how-to/deploy-process#readiness-checks) in Zerops.

`readinessCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the readiness check to request a local URL using a http GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        httpGet:
          port: 80
          path: /status

    # ==== how to run your application ====
    run: ...
```

Read more about how the [readiness check works](/python/how-to/deploy-process#readiness-checks) in Zerops.

#### exec

Configures the readiness check to run a local command.
Following attributes are available:


<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/python/how-to/create#set-secret-environment-variables">environment variables</a> as your Python application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>


**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [readiness check works](/python/how-to/deploy-process#readiness-checks) in Zerops.




<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Description of the build process

Zerops starts a temporary build container and performs following actions:

1. Installs the build environment:
   - Sets up base system and Go runtime
   - Restores cached files if available (based on `build.cache` configuration)
   - Validates cache against current `build.os`, `build.base`, and `build.prepareCommands`
2. Downloads your application source code from [GitHub ↗](https://www.github.com), [GitLab ↗](https://www.gitlab.com) or via [Zerops CLI](/references/cli)
3. Optionally [customizes the build environment](#customize-python-build-environment)
4. Uploads the application artefact to the internal Zerops storage
5. Preserves specified files for future builds (based on `build.cache` configuration)
6. Optionally [customizes the runtime environment](/python/how-to/customize-runtime)
7. [Deploys your application](/python/how-to/deploy-process)

The build container is automatically deleted after the build has finished or failed.

## Cancel running build

When you know that the running build is not correct and you want to cancel it, you can do it in Zerops GUI. Go to the service detail, select **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Cancel build** button.

{/*TODO screenshot of a running build pipeline*/}

The build cancellation is available before the build pipeline is finished. When the build is finished, the deployment cannot be cancelled.

## Customize Python build environment

The default Python build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Python defined in `zerops.yaml` [build.base](/python/how-to/build-pipeline#base) parameter
- [zCLI](/references/cli), Zerops command line tool
- `pip` and `git`

If you prefer the Ubuntu OS instead of Alpine, set the [build.os](/python/how-to/build-pipeline#os) attribute to `ubuntu`. To install additional packages or tools add one or more [build.prepareCommands](/python/how-to/build-pipeline#preparecommands) commands to your `zerops.yaml`.

:::info
The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).
:::

## Python build hardware resources

Build of your Python application is run in a separate build container with following resource configuration:

| HW resource   | Minimum | Maximum |
| ------------- | ------- | ------- |
| **CPU cores** | 6       | 20      |
| **RAM**       | 8 GB    | 8 GB    |
| **Disk**      | 1 GB    | 100 GB  |

The build container is always started with the minimum hardware resources and scales vertically up to the maximum resources.

:::info
Hardware resources of the build containers are not charged. The build costs are covered by the standard Zerops [project fee](https://zerops.io/#pricing).
:::

## Build time limit

The time limit for the whole build pipeline is **1 hour**. After 1 hour, Zerops will terminate the build pipeline and delete the build container.

## Troubleshooting build-related problems

### Failure of a build prepare command

If any [prepare command](/python/how-to/build-pipeline#preparecommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/python/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom build environment is ready for the build phase.

### Invalidate the build cache
If you encounter unexpected build behavior or dependency issues, the problem might be related to [cached build data](/features/build-cache). While Zerops maintains the build cache to speed up deployments, sometimes you may need to start fresh.
To invalidate the build cache:

1. Go to your service detail in Zerops GUI
2. Choose **Pipelines & CI/CD Settings** from the left menu
3. Click on the **Invalidate build cache** button

This will force Zerops to run the next build clean, including all prepare commands, which can help resolve cache-related issues. After invalidation, your next build will also create a fresh cache.



Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart Python service in Zerops GUI

To stop the Python service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)*/}

To start the stopped Python service choose the **Start** item from the same menu.

To restart the Python service choose the **Restart** item from the same menu.

## Stop and start Python using zCLI

zCLI is the Zerops command-line tool. To stop and start the Python service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and services to choose from.
:::




Zerops provides a Python runtime service with extensive build support. Python runtime is highly scalable and customisable to suit both development and production.

## Create Python service using Zerops GUI

First, set up a project in Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu in the **Services** block. Then add a new Python service:

<Video
  src="/vids/services/python.webm"
  type="video/webm"
/>

### Choose Python version

Following Python versions are currently supported:

<UnorderedList data={data.python.readable} />

:::info
You can [change](/python/how-to/upgrade) the major version at any time later.
:::

### Set a hostname

Enter a unique service identifier like "app","cache", "gui" etc. Duplicate services with the same name in the same project are forbidden.

#### Limitations:

- maximum 25 characters
- must contain only lowercase ASCII letters (a-z) or numbers (0-9)

:::caution
The hostname is fixed after the service is created. It can't be changed later.
:::

### Set secret environment variables

Add environment variables with sensitive data, such as password, tokens, salts, certificates etc. These will be securely saved inside Zerops and added to your runtime service upon start.

Setting the secret environment variables is optional. You can set them later in Zerops GUI.

Read more about [different types of env variables](/python/how-to/env-variables#types-of-env-variables-in-zerops) in Zerops.

### Set auto scaling configuration

Zerops scales the Python services automatically both vertically and horizontally. Vertical scaling means increasing or decreasing the hardware resources (CPU, RAM and disk) of a Python container. Horizontal scaling adds or removes whole containers.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

**Dedicated**
The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

Choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

Python service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Python service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Python performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](/python/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

:::info
You can change the vertical auto scaling parameters later.
:::

#### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Python service. When your Python service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Value</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>minimum containers</strong></td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>maximum containers</strong></td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Python service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

[Learn more](/python/how-to/scaling) about Python auto scaling.

#### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Create Python service using zCLI

zCLI is the Zerops command-line tool. To create a new Python service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/python/how-to/create#create-a-project-description-file)
3. [Create a project with a Python and PostgreSQL service](#full-example)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### Basic example:

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in python@{version} format
    type: python@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes your future project infrastructure. The project will contain one Python version 3.12 service with default [auto scaling](/python/how-to/scaling) configuration. Hostname will be set to "app", the internal port(s) the service listens on will be defined later in the [zerops.yaml](/python/how-to/build-pipeline#ports). Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

#### Full example:

Create a directory my-project. Create an description.yaml file inside the my-project directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a Python and PostgreSQL database
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in python@{version} format
    type: python@latest
    # optional: vertical auto scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4
    # optional: create secret env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
  - # second service hostname
    hostname: db
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"non_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain a Python service and a [PostgreSQL](/postgresql/overview) service.

Python service with "app" hostname, the internal port(s) the service listens on will be defined later in the zerops.yaml. Python service will run on version 3.12 with a custom vertical and horizontal scaling. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The hostname of the PostgreSQL service will be set to "db". The [single container](/postgresql/how-to/create#single-container) mode will be chosen and the default [auto scaling configuration](/postgresql/how-to/create#set-auto-scaling-configuration) will be set.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Limitations</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>name</strong></td>
      <td className="w-fit">The name of the new project. Duplicates are allowed.</td>
      <td className="w-fit"></td>
    </tr>
    <tr>
      <td className="w-fit"><strong>description</strong></td>
      <td className="w-fit"><strong>Optional.</strong> Description of the new project.</td>
      <td className="w-fit">Maximum 255 characters.</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>tags</strong></td>
      <td className="w-fit"><strong>Optional.</strong> One or more string tags. Tags do not have a functional meaning, they only provide better orientation in projects.</td>
      <td className="w-fit"></td>
    </tr>
  </tbody>
</table>


At least one service in `services:` section is required. You can create a project with multiple services. The example above contains Python and PostgreSQL services but you can create a `description.yaml` with your own combination of [services](/features/infrastructure).

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>hostname</strong></td>
      <td className="w-fit">
        The unique service identifier.
         
        The hostname of the new service will be set to the `hostname` value.
         
        <strong>Limitations:</strong>
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>type</strong></td>
      <td className="w-fit">
        Specifies the service type and version.
        <br />
        See what [Python service types](/references/import-yaml/type-list#runtime-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>verticalAutoscaling</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Defines <a href="/python/how-to/create#set-auto-scaling-configuration">custom vertical auto scaling parameters</a>.
        <br />
        All verticalAutoscaling attributes are optional. Not specified attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- cpuMode</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minCpu/maxCpu</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minCpu or maxCpu in CPU cores (integer).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minRam/maxRam</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minRam or maxRam in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>- minDisk/maxDisk</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Set the minDisk or maxDisk in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>minContainers</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Default = 1. Defines the minimum number of containers for <a href="/python/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.
         
        <strong>Limitations:</strong>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>maxContainers</strong></td>
      <td className="w-fit">
        Defines the maximum number of containers for <a href="/python/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.
         
        <strong>Limitations:</strong>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit"><strong>envSecrets</strong></td>
      <td className="w-fit">
        <strong>Optional.</strong> Defines one or more secret env variables as a key value map. See env variable <a href="/python/how-to/env-variables#env-variable-restrictions">restrictions</a>.
      </td>
    </tr>
  </tbody>
</table>

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>
### Add Python service to an existing project

#### Example:

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in python@{version} format
    type: python@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one Python service version 3.12 with default [auto scaling](/python/how-to/scaling) configuration will be added to your project. Hostname of the new service will be set to `app`. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The content of the `services:` section of `import.yaml` is identical to the project description file. The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the import.yaml file is 100 kB.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline_custom_runtime.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>


The default Python runtime environment contains:

- <span>{data.alpine.default}</span>
- Selected version of Python when the runtime service was created.
- [zCLI](/references/cli)
- Git and PIP

:::note
To use Ubuntu instead of the default Alpine, set the [run.os](/zerops-yaml/specification#os--1) attribute.

Additional packages and tools can be installed using [run.prepareCommands](/zerops-yaml/specification#preparecommands--1).
:::

## Runtime Flow

When the first deploy with a defined `prepareCommands` attribute is triggered, Zerops will

1. Create a prepare runtime container
2. Optionally: [copy selected folders or files from your build container](/python/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. Run the run.prepareCommands in the defined order

### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/python/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

The prepare runtime container is automatically deleted after the prepare runtime phase has finished or failed.

### Custom runtime environment cache

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the <a href="/python/how-to/build-pipeline#copy-folders-or-files-from-your-build-container">build.addToRunPrepare</a> and <a href="/python/how-to/build-pipeline#preparecommands-1">run.prepareCommands</a> attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.

{/* **TODO screenshot** */}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.



## Delete Python service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete Python using zCLI

zCLI is the Zerops command-line tool. To delete the Python service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step3.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Application artefact

When the [build phase](/python/how-to/build-process) is finished, the application artefact is stored in the internal Zerops storage and the build container is deleted.

If you triggered the deploy pipeline [manually](/python/how-to/trigger-pipeline#manual-deploy-using-zerops-cli) using Zerops CLI, the application artefact is also uploaded to the internal Zerops storage.

Zerops uses the stored artefact to deploy the identical version of your application each time a new container is started:

- when a new application version is deployed
- when the application [scales horizontally](/python/how-to/create#horizontal-auto-scaling)
- when a runtime container fails and a new container is started automatically

## First deploy

When your application is deployed for the first time, Zerops will start one or more runtime containers based on the service [auto scaling settings](/python/how-to/scaling).

Zerops performs following actions for each new container:

1. Installs the runtime environment
2. Downloads the application artefact from the internal storage
3. Optionally runs the [init commands](/python/how-to/build-pipeline#initcommands)
4. Starts your application using the [start command](/python/how-to/build-pipeline#start)
5. Optionally waits until the [readiness check](/python/how-to/build-pipeline#readiness-check) succeeds
6. The container is now active and receives incoming requests.

Services with multiple containers are deployed in parallel.

:::info
If your application needs to be initialized in each runtime container, add [init commands](/python/how-to/build-pipeline#initcommands) to `zerops.yaml`.
:::

:::caution
Do not use the `initCommands` for customising your runtime environment. See [how to customize the runtime environment](/python/how-to/customize-runtime).
:::

## Further deploys

When a previous version of your application is already running, Zerops will start new containers. The count of new containers will be the same as the count of existing containers.

Zerops performs the identical actions for each new container as the first deployment.
When all new containers are started your service contains both new and old versions for a short period of time.

The old containers are then removed from the project balancer so they don't receive new requests. The Python process inside each of the old containers is terminated and all old containers are gradually deleted.

## Readiness checks

If your application isn't ready to handle requests right after it is started via the [start command](/python/how-to/build-pipeline#start), configure a [readiness check](/python/how-to/build-pipeline#readiness-check) in your `zerops.yaml`.

If the readiness check is defined, Zerops will:

1. Start your application
2. Perform a readiness check
3. If the readiness check fails, wait 5 seconds and repeat step 2.
4. If the readiness check succeeds, set the container as active.

Application in the runtime container with a pending readiness check won't receive any incoming requests. Only active containers receive incoming requests to your Python service.

If the readiness check is still failing after 5 minutes, the specific runtime container is marked as failed and Zerops will delete it, create a new runtime container and perform the deploy.

The <a href="/python/how-to/build-pipeline#httpget">`httpGet`</a> readiness check is successful when the URL returns HTTP status code `2xx`. The timeout is 5 seconds. When the URL returns a `3xx` HTTP status, the readiness check HTTP client will follow the redirect.

The <a href="/python/how-to/build-pipeline#exec">`exec.command`</a> readiness check is successful when the command returns status code 0. The timeout is 5 seconds.

Read the [runtime log](/python/how-to/logs#runtime-log) to troubleshoot failed readiness checks.

## Application versions

Zerops keeps 10 last versions of your application in the internal storage.

The list of application versions is available in Zerops GUI. Go to the service detail and choose **Service dashboard & runtime containers** from the left menu. The active version is highlighted, show all archived version by clicking on the button below.

<p align="center">
  <img
    src="/img/screenshots/pipeline_history.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

The pipeline detail is accessible from the additional menu. The pipeline detail contains

- The pipeline config (`zerops.yaml`) that was used for the selected version
- The build log (if available)
- The prepare runtime log (if available)

You can download the build artefact of the selected version or delete an inactive version manually.

## Restore an archived version

You can restore an archived version by choosing the **Activate** item from the additional menu.
Zerops will deploy the selected version and the active version will be archived.

The environment variables will be restored to the latest moment when the selected version was active.



Environment variables help you run your application in different environments. They allow you to isolate all specific environment aspects from your application code and keep your app encapsulated. You can create several projects in Zerops that represent different environments (development, stage, production) or even each developer can have a project with its own environment.

In Zerops you do not have to create a `.env` file manually. Zerops handles the environment variables for you.

## Types of env variables in Zerops

There are 3 different sets of env variables in Zerops:

<table className="w-fit my-1.5">
  <thead>
    <tr className="text-center  rounded-lg">
      <th className="w-fit"><strong>Type</strong></th>
      <th className="w-fit"><strong>Environment</strong></th>
      <th className="w-fit"><strong>Defined in</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">build</td>
      <td className="w-fit"><a href="/python/how-to/build-pipeline#envvariables">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/python/how-to/build-pipeline#envvariables-1">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">secret</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/python/how-to/env-variables#set-secret-env-variables-in-zerops-gui">Zerops GUI</a></td>
    </tr>
  </tbody>
</table>


Use the [secret env variables](/python/how-to/create#set-secret-environment-variables) for all sensitive data you don't want to store in your application code. Secret env variables are also useful if you need for testing where you need to change the value of some env variables frequently. Secret variables are managed in Zerops GUI and you don't have to redeploy your application.

The basic build and runtime env variables are listed in your [zerops.yaml](/zerops-yaml/specification) and deployed together with your application code. When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your zerops.yaml and redeploy your application to Zerops.

You can [reference](/python/how-to/env-variables#reference-a-local-variable-in-another-variable-value) another variable of the same service or even a variable of [another service](/python/how-to/env-variables#reference-a-variable-of-another-project-service) within the same project.

## Set secret env variables in Zerops GUI

Use secret variables to store passwords, tokens and other sensitive information that shouldn't be part of your repository and listed in zerops.yaml.

<p align="center">
  <img
    src="/img/screenshots/secret_env.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

You can set env variables when you [create](/python/how-to/create) a new Python service or you can set them later.

To configure env variables for an existing service, go to the service detail and choose **Environment variables** in the left menu. Scroll to the **Secret variables** section and click on the **Add secret variable** button and set variable key and value.

You can edit or delete env variables that you've created by clicking on the menu on the right side of each row.

The changes you've made to environment variables will be automatically applied to all containers of your project's services.

:::caution
You need to **restart** the runtime service after you update environment variables. The Python process running in the container receives the list env variables only when it starts. Update of the env variables while the Python process is running does not affect your application.
:::

## Set basic build env variables in zerops.yaml

To set basic env variables for the build environment, add the `envVariables` attribute to the build section in your `zerops.yaml`

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
       …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Set basic runtime env variables in zerops.yaml

To set basic env variables for the runtime environment, add the `envVariables` attribute to the runtime section in your `zerops.yaml`.

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    run:
       …

      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Env variable restrictions

**key**

- must satisfy the following regular expression: `[a-zA-Z_]+[a-zA-Z0-9_]*`
- all variable keys in the same service must be unique regardless of case
- keys are case sensitive

**value**

- must contain only ASCII characters
- the _End of Line_ character is forbidden

## Referencing other env variables

These restrictions apply to all [types of env variables](/python/how-to/env-variables#types-of-env-variables-in-zerops).

You can reference another variable of the same service using `${key}` in your variable value. You can even reference a variable from a different service using `${hostname_key}`. The referenced variable doesn't need to exist when you are entering your variable.

### Reference a local variable in another variable value

| Variable key | Variable value      | Computed variable value |
| ------------ | ------------------- | ----------------------- |
| id           | 12345               | 12345                   |
| hostname     | app                 | app                     |
| name         | `${id}-${hostname}` | 12345-app               |

### Reference a variable of another project service

Let's say your project contains two PostgreSQL services `dbtest` and `dbprod`. Both services have a `connectionString` variable. Then you can create a `dbConnectionString` env variable in your Python runtime and set `${dbtest_connectionString}` as the variable value. Zerops will fill in the value of the `connectionString` variable of the `dbtest` service.

When you change the `dbConnectionString` value to `${dbprod_connectionString}`, Zerops will fill in the value of the `connectionString` variable of the `dbprod` service.

:::caution
When you change the value of the `connectionString` variable in the service `dbtest` you need to **restart** the Python service. The Python process running in the container receives the list env variables only when it starts. Update of the env variables while the Python process is running does not affect your application.
:::

## Generated env variables

Zerops creates several helper variables when a Python service is created, e.g. `hostname`, `PATH`. Some helper variables are read-only (`hostname`), others are editable (`PATH`). Generated variables cannot be deleted.

Generated env variables are listed on the **Environment variables** page. Scroll to the **Generated variables** section.

<p align="center">
  <img
    src="/img/screenshots/nodejs_generated_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## How to read env variables from your Python app

Zerops passes all environment variables from all project services when your Python app is deployed and started.

To access the local environment variable i.e. the variable set to this Python service in your app, use:

```sh
os.environ['YOUR_VARIABLE_KEY_HERE']
```

## How to read env variables of another service

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Examples:

To access the `connectionString` env variable of the `mariadb1` service, use `mariadb1_connectionString` as the env variable key.
To access the `password` env variable of the `mariadb2` service, use `mariadb2_password` as the env variable key.

## How to read runtime env variables in the build environment

You can use runtime env variables in the build environment using the `RUNTIME_` prefix. For example if you have a runtime variable with the `connectionString` key, use the `RUNTIME_connectionString` to read the variable in the build environment. This rule applies both for basic and secret runtime variables.

## Basic and secret env variable with the same key

If you create a secret env variable and a basic runtime env variable with the same key, Zerops saves the basic runtime env variable from your zerops.yaml and ignores the secret env variable.

If you create a basic build env variable and a runtime env variable with the same key, Zerops saves both because the build and runtime environments have separate sets of env variables.



## Zerops GUI

In Zerops GUI, go to the service detail page and choose **Service containers & resources overview** and scroll down to the list of containers.

<p align="center">
  <img
    src="/img/screenshots/nodejs_containers_list.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Then click on the file browser icon and the file browser opens:

<p align="center">
  <img
    src="/img/screenshots/nodejs_file_browser.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

If your service is in the [HA mode], you can switch between containers in the top left corner.

## zCLI & SSH

You can connect to the container via SSH with the Zerops CLI and browse its files.
How to [connect to your service via SSH](/references/ssh).



Zerops provides 3 different logs:

- [build log](#build-log)
- [prepare runtime log](#prepare-runtime-log)
- [runtime log](#runtime-log)

## How to access logs

### Build log

#### Zerops GUI

To access a build log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Build log**. The build log button is available only if the [build pipeline](/python/how-to/trigger-pipeline) was triggered for the selected deploy.

#### zCLI

To access a build log in Zerops CLI use

```sh
zcli service log --showBuildLogs
```

Read more about the [zcli service log](/references/cli/access-logs) command.

### Prepare runtime log

#### Zerops GUI

To access a prepare runtime log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Prepare runtime log**. The prepare runtime log button is available only if the [prepare runtime pipeline](/python/how-to/build-pipeline#preparecommands-1) was triggered for the selected deploy.

#### zCLI

_Prepare runtime log is currently not supported in zCLI._

### Runtime log

#### Zerops GUI

To access a runtime log in Zerops GUI, go to the service detail and choose **Runtime log** in the left menu.

{/* TODO screenshot** */}

Each runtime container has its own log. If your service has multiple containers, select the container in the log header.

You can filter log records by minimum severity or by time.

#### zCLI

To access the log of the _first runtime container_ in Zerops CLI use

```sh
zcli service log
```

For an _aggregate log_ from all service's runtime containers omit the `@1`

```sh
zcli service log
```

Read more about the [zcli service log](/references/cli/access-logs) command.

## Python logging configuration

Zerops logs all messages sent

- to the standard error (`stderr`)
- to the standard output (`stdout`)
- via the Python `print` or `logger.Info` methods

### Severity level

By default the `print` or `logger.XXX` methods create a message with the `Informational (6)` severity.

Add a severity number in the `<N>` format as a prefix to set a custom severity as shown below:

```python
logger = logging.getLogger(__name__)
logger.Info('A message with the informational severity ...')
logger.Info('<0>Emergency (0) severity > system is unusable.')
logger.Info('<1>Alert (1) severity > action must be taken immediately.')
logger.Info('<2>Critical (2) severity > critical conditions.')
logger.Info('<3>Error (3) severity > error conditions.')
logger.Info('<4>Warning (4) severity > warning conditions.')
logger.Info('<5>Notice (5) severity > normal, but significant, condition.')
logger.Info('<6>Informational (6) severity > informational message.')
logger.Info('<7>Debug (7) severity > debug-level message.')
```

:::info

`logger.Info`, `logger.Warning`, `logger.Debug`
, `logger.Error` and `logger.Critical` are just aliases to
the `logger.Info` method. They don't set the appropriate severity
number. Use the `&lt;N&gt;` prefix instead. :::




Zerops performs an automated scaling of hardware resources required to run your runtime application based on its usage. If the current use of your application does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your application is under heavy load or needs to store more data, then auto scaling increases the resources to make sure it runs smoothly.

## Vertical and horizontal auto scaling

Each application you deploy starts with the minimum hardware resources: **CPU** cores, **RAM** and **Disk**. Zerops monitors the usage of these 3 resources and if the usage exceeds a set threshold, more CPU cores, RAM or Disk is allocated to the service. This is called **vertical scaling**.

<p align="center">
  <Image
    lightImage="/img/gui/resources.webp"
    darkImage="/img/gui/resources.webp"
    alt="Resources of a Zerops service"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

**Horizontal scaling** adds or removes whole containers.

Zerops has a preference for vertical scaling because it's faster and more precise. If the vertical auto scaling hits the defined maximum a new container is started automatically. When your application doesn't need so much power and all containers are vertically scaled down, Zerops will gradually remove whole containers.

<p align="center">
  <img
    src="/img/screenshots/scaling2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Configure auto scaling

To change the auto scaling settings go to the Python service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### CPU mode

#### Shared

Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

#### Dedicated

The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

Python service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Python service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Python performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](/python/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Python service. When your Python service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Python service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your application starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your application.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your application doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

By default Zerops keeps a minimum free RAM in each container. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your application need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 0.125 GB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the application is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each Python service. Zerops will never scale above the entered values. If your application is in [highly available mode], maximal resources are identical for all containers of the Python service.

### Not enough resources to scale up

If one of the Python containers needs more resources but there are not enough of them on the underlying machine, a new container with the required hardware resources will be started on another machine. When the new container is ready, it will be added to the service balancer. The old container will be removed from the balancer and deleted.

### Automatic scale down

When the application no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the application from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal autoscaling

Zerops prefers vertical scaling over horizontal scaling because vertical scaling is faster and allows finer adjustment to the required performance. Horizontal scaling can be disabled by setting the same number for the minimum and maximum container count. Zerops will then scale the Python service only vertically.

Your application is created with the defined minimum number of containers. Zerops will add a new container when any of the service's containers reaches the maximum limit for vertical scaling for CPU cores or RAM. Zerops doesn't start a new container when the maximum disk space is reached. No more containers are added when the defined maximum container limit is reached.

The new container is started with a minimum disk size and with an average CPU cores and RAM of the existing containers.

By customising the vertical auto scaling limits, you can cause the horizontal scaling to start earlier. For example if you lower the vertical auto scaling maximum to 1 CPU core, Zerops will start a new container if some of the running containers are using the whole CPU core for more than 20 seconds.

If the application no longer needs as much power, Zerops will gradually remove containers to the defined minimum count. The container is removed after its CPU cores are scaled down to the defined minimum and the free CPU is safely above the minimum threshold for vertical scaling. Zerops only **removes containers** with a minimum **15 minute lifetime**.

## Monitor Python resources

Zerops provides information about how much hardware resources the Python service is currently using. Go to the service detail in Zerops GUI and select **Service dashboard & runtime containers** in the left menu. Zerops also provides the history of resource usage.



Zerops provides [shared storage service](/shared-storage/overview) that can be connected to runtime services. Shared storage enables your runtime service to share files between all containers of the same service or even among containers of different runtime services.

## Connect a shared storage in Zerops GUI

Connect your Python service directly when creating a new shared storage service. Just select your Python service in the **Share with Services** block on the **Add new shared storage service** page.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_1.png)

To connect the existing shared storage to the Python service, go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Select a runtime service and the shared storage will be connected to the selected runtime.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_2.png)

Zerops will create a new folder `/mnt/[shared storage name]`` in the runtime root folder. E.g. `/mnt/teststorage`for a`teststorage` shared storage. The content of this folder is shared among all containers of the runtime service you've selected. If you select multiple runtimes, the content of the folder will be shared among all containers of selected services.

## Disconnect a shared storage in Zerops GUI

Go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Switch off the toggle to disconnect the shared storage from the selected runtime.

:::note
Your runtime service will be automatically restarted when a shared storage is disconnected.
:::

## Create Python service with a shared storage using zCLI

zCLI is the Zerops command-line tool. To create a new Python service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/python/how-to/shared-storage#create-a-project-description-file)
3. [Create a project with a Python service and a shared storage](/python/how-to/shared-storage#create-a-project-with-a-python-service-and-a-shared-storage)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### description.yaml format

[Read the basics](/python/how-to/create#create-a-project-description-file) how to define the Python service using the description.yaml.

#### Example with a shared storage

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project

  # optional: project description
  description: A project with a Python and a shared storage

  # optional: project tags
  tags:
    - DEMO
    - ZEROPS

# array of project services
services:
  - # service name
    hostname: teststorage

    # shared storage service has no version
    type: shared-storage

    # mode: HA / NON_HA
    mode: NON_HA

  - # service name
    hostname: app

    # service type and version number in python@{version} format
    type: python@latest

    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2

    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4

    # Mount the shared storage to the Python service
    mount:
      - teststorage
```

The mount attribute accepts an array of shared storage names you want to mount to your runtime service.

### Create a project with a Python service and a shared storage

Follow the article [How to create a project based on the description.yaml](/python/how-to/create#create-a-project-based-on-the-descriptionyaml).




<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-1.webp"
    darkImage="/img/mind-maps/build-deploy/step-1-dark.webp"
    alt="build deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Automatic builds and deploys from GitHub or GitLab

Integrate Zerops to your GitHub or GitLab repository and configure the automatic builds and deploys.

Follow these steps:

1. Add [zerops.yaml](/python/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository.
2. Connect your GitHub repository or connect your GitLab repository

Then each time you create a new tag or push to a specific branch, depending on the configuration, GitHub or GitLab will initiate a new build & deploy pipeline.

<p align="center">
  <Image
    lightImage="/img/gui/github-integration.webp"
    darkImage="/img/gui/github-integration.webp"
    alt="github integration"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

### Skip the automatic pipeline once

To ensure that a pipeline is not triggered by your next push, add `[ci skip]` or `[skip ci]` to the commit message. It is case insensitive.

:::note
You will still see a successful delivery of a webhook in your Github/Gitlab repository as a webhook is actually triggered, but with no action.
:::

## Manual builds and deploys using Zerops CLI

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    darkImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    alt="Manual Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

To start a new build & deploy pipeline manually, use the Zerops CLI.

Follow these steps:

1. Add <a href="/python/how-to/build-pipeline#add-zeropsyaml-to-your-repository">`zerops.yaml`</a> to your repository.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli push` command.

The `zcli push` command uploads your application code, builds and deploys your application in Zerops.

The command triggers the [build pipeline](/python/how-to/trigger-pipeline) defined in `zerops.yaml`. `zerops.yaml` must be in the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

zCLI uploads all files and subdirectories of the working directory to Zerops and starts the build pipeline. If the `.gitignore` file is found, it is interpreted and the defined files and folders will be ignored.

If you just want to deploy your application to Zerops, use the [zcli deploy](#manual-deploy-using-zerops-cli) command instead.

#### Push command parameters

```sh
Usage:
  zcli push [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.
  -h, --help                     the service push command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

zCLI commands are interactive, when you press enter after `zcli push`, you will be given a list of your projects to choose from.

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

## Manual deploy using Zerops CLI

To start only a deploy pipeline, use the Zerops CLI.

Follow these steps:

1. Add [zerops.yaml](/python/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository. Omit the build section.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli service deploy` command.

The `zcli service deploy` command uploads your application and deploys it in Zerops. Use this tool if you have your own build process. If you want to build your application in Zerops, use an [automatic](#automatic-builds-and-deploys-from-github-or-gitlab) or [manual](#manual-builds-and-deploys-using-zerops-cli) build process.

#### Deploy command parameters

```sh
Usage:
  zcli service deploy pathToFileOrDir [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
  -h, --help                     the service deploy command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

`pathToFileOrDir` defines a path to one or more directories and/or files relative to the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

`zerops.yaml` must be placed in the working directory.

:::info
You can change the deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your working directory.
:::



You can upgrade or downgrade your Python service to a different major Python version by setting the <a href="/python/how-to/build-pipeline#base-1">`run.base`</a> parameter in your `zerops.yaml`. When you [trigger a new pipeline](/python/how-to/trigger-pipeline), Zerops will start new runtime container(s) with the required Python version. If you don't specify the `run.base` attribute in your `zerops.yaml`, Zerops keeps the current Python version for your runtime.

If you want to build your application with a different major Python version, change the <a href="/python/how-to/build-pipeline#base">`build.base`</a> parameter in your `zerops.yaml`. The `build.base` is the required attribute.





[Python ↗](https://www.python.org/) is a programming language that lets you work quickly and integrate systems more effectively..

As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-python-hello-world), a **_recipe_**, containing the most simple Python web application. The repo will be used as a source from which the app will be built.

<CustomCard title="Feel free to deploy the recipe yourself" emoji="🚀">
  This is the most bare-bones example of Python running on Zerops — as few libraries as possible,
  just a simple endpoint with connect, read and write to a Zerops PostgreSQL database.

  <DeployButton link="python" badgeWidth="200" />
</CustomCard>

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)
2. In the **Projects** box click on **Import a project** and paste in the following YAML config ([source ↗](https://github.com/zeropsio/recipe-python-hello-world/blob/main/import-project/description.yaml)):

```yaml
project:
  name: my-first-project
services:
  - hostname: helloworld
    type: python@latest
    minContainers: 1
    maxContainers: 3
    buildFromGit: https://github.com/zeropsio/recipe-python-hello-world@main
    enableSubdomainAccess: true
```

3. Click on **Import project** and wait until all pipelines have finished.

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://helloworld-24-8080.prg1.zerops.app`.
2. Click or the `subdomain` URL to open it in a browser and you should see

```
Hello, World!
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::

## How to start

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/python/getting-started',
      label: 'New to Zerops?',
      customProps: {
        icon: Icons['rocket-launch'],
        description: 'Learn the basics by following a simple example.',
      },
    },
    {
      type: 'link',
      href: '/python/how-to/create',
      label: 'Care for details?',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description:
          'Dive in all Zerops has to offer for your Python application.',
      },
    },
  ]}
/>

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/python/how-to/create',
      label: 'Create Python service',
      customProps: {
        icon: Icons['python'],
        description: 'Start with creating a Python service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: '/python/how-to/build-pipeline#add-zeropsyaml-to-your-repository',
      label: 'zerops.yaml',
      customProps: {
        icon: Icons['puzzle'],
        description:
          'See a full example of zerops.yaml file to create your own app.',
      },
    },
    {
      type: 'link',
      href: '/python/how-to/scaling',
      label: 'Scaling configuration',
      customProps: {
        icon: Icons['adjustments'],
        description:
          'Set up scaling of your Python application so that it runs smoothly while using only necessary resources.',
      },
    },
  ]}
/>

{" "}

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/python/how-to/build-process#customize-python-build-environment',
      label: 'Customize build environment',
      customProps: {
        icon: Icons['sparkles'],
      },
    },
    {
      type: 'link',
      href: '/python/how-to/customize-runtime',
      label: 'Customize runtime environment',
      customProps: {
        icon: Icons['sparkles-solid'],
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/python/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>




As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-python-hello-world), a **_recipe_**, containing the most simple Python web application. The repo will be used as a source from which the app will be built.

<CustomCard title="Feel free to deploy the recipe yourself" emoji="🚀">
  This is the most bare-bones example of Python running on Zerops — as few libraries as possible,
  just a simple endpoint with connect, read and write to a Zerops PostgreSQL database.

  <DeployButton link="python" badgeWidth="200" />
</CustomCard>

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)
2. In the **Projects** box click on **Import a project** and paste in the following YAML config ([source ↗](https://github.com/zeropsio/recipe-python-hello-world/blob/main/import-project/description.yaml)):

```yaml
project:
  name: my-first-project
services:
  - hostname: helloworld
    type: python@latest
    minContainers: 1
    maxContainers: 3
    buildFromGit: https://github.com/zeropsio/recipe-python-hello-world@main
    enableSubdomainAccess: true
```

3. Click on **Import project** and wait until all pipelines have finished.

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://helloworld-24-8080.prg1.zerops.app`.
2. Click or the `subdomain` URL to open it in a browser and you should see

```
Hello, World!
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::




As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-onboarding-python), a **_recipe_**, containing a PostgreSQL service with a simple Python application. The repo will be used as a source from which the app will be built.

:::tip
Follow the steps below and when everything is working as expected, fork the repo, try making various changes or be bold and connect your own.
:::

:::note
In the detail of each step, you can find a link with more information about the topic.
:::

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)

<details>
  <summary>2. Create a project.</summary>
  <p>
    Learn more about <a href="/features/infrastructure#projects">projects</a> in
    Zerops. See how to <a href="/python/how-to/create#create-a-project-description-file">import</a> a whole project into Zerops.
  </p>
</details>

<details>
  <summary>
    3. In the left menu, click on <b>Import services</b>, copy & paste the
    contents of the `import-services.yaml` config file from the recipe
    repository of your choice. Then click on <b>Import service</b>.
  </summary>
  <p>
    Learn more about <a href="/features/infrastructure#services--containers">services</a> in Zerops and how to <a href="/python/how-to/create#add-python-service-to-an-existing-project">import a service</a> to an existing project.
  </p>
  <p>
    The yaml file includes a `buildFromGit` directive, which ensures
    a one-time build from Git repository source. See how to connect a <a href="/references/github-integration">Github</a> or <a href="/references/github-integration">Gitlab</a> repository to be able to
    trigger automatic builds & deploys.
  </p>
</details>

<details>
  <summary>4. Several pipelines are created, one for project creation and the rest for the activation of the services. Wait for all to finish.</summary>
  <p>
  Learn more about how the pipelines can be <a href="/python/how-to/trigger-pipeline">triggered</a> and about <a href="/python/how-to/build-process">build</a> and <a href="/python/how-to/deploy-process">deploy</a> processes of a Python application in Zerops.

Learn more about how to access <a href="/python/how-to/logs#build-log">build log</a> of your Python service in Zerops.

  </p>
</details>

<details>
  <summary>
    5. In the service detail, open the <b>Public access & internal ports</b> section, and <b>Enable Zerops Subdomain</b>.
  </summary>
  <p>
    Learn more about how to <a href="/python/how-to/access">access</a> your
    Python service in Zerops.
  </p>
</details>

<details>
  <summary>6. Once the pipeline has finished, click on the activated <i>subdomain</i> URL. You should see a simple page with <br/><br/>`Entry added successfully with random data: f47ac10b-58cc-0372-8567-0e02b2c3d479. Total count: 1`</summary>
  <p>
  Congratulations! You have created your first application in Zerops, and we hope to see your own projects soon.

For now, check out other features, such as <a href="/python/how-to/env-variables">environment variables</a>, <a href="/python/how-to/logs#runtime-log">runtime log</a> and <a href="/python/how-to/scaling">scaling</a>.

  </p>
</details>

<details>
  <summary>
    7. One of the services is `adminer`, a database management tool.
    See how to <a href="/postgresql/how-to/manage#how-to-access-adminer">access it</a>.
  </summary>
  <p>
    Learn more about how to <a href="/postgresql/how-to/manage#how-to-use-psql-cli-on-your-workstation">use <code>psql</code></a> command-line tool instead or how to <a href="/postgresql/how-to/export-import-data">import and export data</a> from your database.
  </p>
</details>
8. Feel free to make any changes to your project, fork the repo or connect your
own. Also see other <a href="https://github.com/zeropsio?q=python&type=all&language=&sort=">
  Python
</a> and <a href="https://github.com/zeropsio?q=postgresql&type=all&language=&sort=">
  PostgreSQL
</a> recipes on our Github page.

<p>&nbsp;</p>

:::tip
Have you got any additional question? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::




As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-python-hello-world), a **_recipe_**, containing the most simple Python web application. The repo will be used as a source from which the app will be built.

:::tip
Follow the steps below and when everything is working as expected, fork the repo, try making various changes or be bold and connect your own.
:::

:::note
In the detail of each step, you can find a link with more information about the topic.
:::

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)

<details>
  <summary>2. Create a project.</summary>
  <p>
    Learn more about <a href="/features/infrastructure#projects">projects</a> in
    Zerops. See how to <a href="/python/how-to/create#create-a-project-description-file">import</a> a whole project into Zerops.
  </p>
</details>

<details>
  <summary>
    3. In the left menu, click on <b>Import services</b>, copy & paste the
    contents of this <a href="https://github.com/zeropsio/recipe-python-hello-world/blob/main/import-service/description.yaml">yaml file</a> and click on <b>Import service</b>.
  </summary>
  <p>
    Learn more about <a href="/features/infrastructure#services--containers">services</a> in
    Zerops and how to <a href="/python/how-to/create#add-python-service-to-an-existing-project">import a service</a> to an existing project.
  </p>
  <p>
    The yaml file includes a `buildFromGit` directive, which ensures
    a one-time build from Git repository source. See how to connect a <a href="/references/github-integration">Github</a> or <a href="/references/github-integration">Gitlab</a> repository to be able to
    trigger automatic builds & deploys.
  </p>
</details>

<details>
  <summary>4. Two pipelines are created, one for project creation and one for the service activation. Wait for both to finish.</summary>
  <p>
  Learn more about how the pipelines can be <a href="/python/how-to/trigger-pipeline">triggered</a> and about <a href="/python/how-to/build-process">build</a> and <a href="/python/how-to/deploy-process">deploy</a> processes of a Python application in Zerops.

Learn more about how to access <a href="/python/how-to/logs#build-log">build log</a> of your Python service in Zerops.

  </p>
</details>

<details>
  <summary>
    5. In the service detail, open the <b>Public access & internal ports</b> section, and <b>Enable Zerops Subdomain</b>.
  </summary>
  <p>
    Learn more about how to <a href="/python/how-to/access">access</a> your
    Python service in Zerops.
  </p>
</details>

<details>
  <summary>6. Once the pipeline has finished, click on the activated <i>subdomain</i> URL:<br/><br/> You should see a simple page with `Hello World!` printed.</summary>
  <p>
  Congratulations! You have created your first application in Zerops, and we hope to see your own projects soon.

For now, check out other features, such as <a href="/python/how-to/env-variables">environment variables</a>, <a href="/python/how-to/logs#runtime-log">runtime log</a> and <a href="/python/how-to/scaling">scaling</a>.

  </p>
</details>

7. Feel free to make any changes to your project, fork the repo or connect your own. Also see other <a href="https://github.com/zeropsio?q=python&type=all&language=&sort=">Python recipes</a> on our Github page.

<p>&nbsp;</p>

:::tip
Have you got any additional question? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::




[Qdrant](https://qdrant.tech/) on Zerops provides a fully managed vector database solution designed for AI applications. Focus on building vector search features while we handle infrastructure maintenance, high availability, and data protection.

## Supported Versions

Currently supported Qdrant versions:
<UnorderedList data={data.qdrant.readable}/>

Import configuration version:
<UnorderedCodeList data={data.qdrant.import}/>

## Deployment Modes

#### Non-HA Mode
- Single node setup ideal for development and non-production projects
- Simple deployment and management

#### HA Cluster
- Automatically configured with 3 nodes
- Recommended for production environments
- Built-in data replication across nodes
- By default (`automaticClusterReplication=true`), automatically creates replicas of all shards across all three nodes
  - Can be disabled by setting `automaticClusterReplication` to `false`
- Automatic cluster recovery and node replacement in case of failures

## Data Backup

Backups are performed in `snapshot` format. For HA Cluster, backups are created on the primary container (leader) and saved to the local disk before being compressed and streamed to backup storage. The local file is then deleted.

For general information about backup frequency and storage limits, see our [Backup documentation](/features/backup).

## Network Architecture & Access

Qdrant can be accessed only from services within the same project, public access is not available.

### API Keys
API key authentication is required for both HTTP and gRPC API calls. Include the key in your request headers. The keys can be found in generated environment variables of the service:

- **API Key:** Full access API key for administrative operations (creating collections, indexing)
- **Read-only API Key:** Restricted API key for search operations

#### HTTP API
- **Port:** `6333`
- **Connection String:** `http://${hostname}:${port}`

#### gRPC API
- **Port:** `6334`
- **gRPC Connection String:** `tcp://${hostname}:${grpcPort}`

## Support

For advanced configurations or custom requirements:
- Join our [Discord community](https://discord.gg/zeropsio)
- Contact support via [email](mailto:support@zerops.io)



<FAQ>
  <FAQItem question="Sample Question">sample answer</FAQItem>
</FAQ>




This quick start allows you to get hands-on experience of Zerops, whether you only want to see it in action or want to start small and scale up the project size later. The purpose of this guide is to get an existing Rust application up and running easily.

If you are already familiar with Zerops and you are interested in more detailed guides for your own application, feel free to head straight to the [How to](/rust/how-to/create) section.

## Guides

We have created a repository, a _recipe_, containing the most simple Rust web application, so you don't need to write any code yet. Choose from the options below which suits you best:

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'tutorial/quickstart',
      label: 'No-Fuss one click guide (well, almost)',
      customProps: {
        icon: Icons['cursor-arrow-rays'],
        description:
          'Get the application running in no time. Best if you only want to see how Zerops works.',
      },
    },
    {
      type: 'link',
      href: 'tutorial/step-by-step',
      label: 'Simple tutorial in few easy steps',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description: 'Learn the basics on the way.',
      },
    },
  ]}
/>

### Other recipes

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: 'https://github.com/zeropsio/recipe-onboarding-rust',
      label: 'Rust + SQL database',
      customProps: {
        icon: Icons['github'],
        description: 'A more complex, multi-service application example.',
      },
    },
    {
      type: 'link',
      href: 'https://github.com/zeropsio?q=rust&type=all&language=&sort=',
      label: 'All Rust recipes',
      customProps: {
        icon: Icons['github'],
        description: 'Browse our Github repositories to get inspiration.',
      },
    },
  ]}
/>

:::tip
Did none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::



## Private internal access

Projects in Zerops represent a group of one or more services.
Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its [internal port](/rust/how-to/build-pipeline#ports).

To connect to your application with `app` hostname running on [internal port](/rust/how-to/build-pipeline#ports) `8080`, simply use `http://app:8080`

:::info
Do not use `https://` when communicating with Rust from other runtime services in the same project. The internal communication is done over a private network and is isolated from other projects.
:::

### Use Rust environment variables

Zerops creates default environment variables for each Rust service to help you with connection within the same project. To avoid the need to copy the access parameters manually, use [generated environment variables](/rust/how-to/env-variables#generated-env-variables) of the Rust service.

#### Prefix the environment variable key

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Example:

To access the `API_TOKEN` env variable of the `app` service, use `app_API_TOKEN` as the env variable key.

Read more about [env variables](/rust/how-to/env-variables).

## Private access via VPN

### Start VPN connection

You can securely connect to your Rust application from your local workspace via Zerops VPN. Zerops VPN client is included into zCLI, the Zerops command-line tool. To start a VPN connection to the selected Zerops project, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Start the Zerops VPN](/references/vpn#start-vpn)

### Access Rust application through VPN

Once the VPN session is established, you have the secured connection to the project's private network in Zerops. You can access all project services locally by using their hostname. The only difference is that no [environment variables](/rust/how-to/env-variables) are available when connected through VPN. To connect to your Rust application in Zerops set the hostname and [internal port](/rust/how-to/build-pipeline#ports) e.g. http://app:8080

:::info
Do not use `https://` when communicating with Rust over the VPN. The security is assured by the VPN. The internal communication is done over a private network and is isolated from other projects.
:::

### Connect via SSH

Use the <a href="/references/ssh">`ssh` command</a> to connect to your service via SSH.

### Stop VPN connection

[Stop the Zerops VPN](/references/vpn#stop-vpn) in zCLI.

## Public access through zerops.io subdomain

By default, your Rust service is not publicly accessible. To test your application, enable the [public access through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain).

## Public access through your domain

By default, your Rust service is not publicly accessible. When your application is ready for production or if you want to test it on the production domain, [configure the public access through your domain](/features/access#public-access-through-your-domain).

## Public access from another Zerops project

All services of the same project share a dedicated private network. To connect to a service within the same project, just use the service hostname and its [internal port](/rust/how-to/build-pipeline#ports). Different projects are not connected inside Zerops. To connect to a runtime service from another Zerops project, you need to use public access either [through zerops.io subdomain](/features/access#public-access-through-zerops-subdomain) or [through your domain](/features/access#public-access-through-your-domain).





Zerops provides a customizable build and runtime environment for your Rust application.

## Add zerops.yaml to your repository

Start by adding `zerops.yaml` file to the **root of your repository** and modify it to fit your application:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: rust@latest

      # OPTIONAL. Set the operating system for the build environment.
      # os: ubuntu

      # OPTIONAL. Customize the build environment by installing additional packages
      # or tools to the base build environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # REQUIRED. Build your application
      buildCommands:
        - cargo b --release

      # REQUIRED. Select which files / folders to deploy after
      # the build has successfully finished
      deployFiles:
        - target/release/~app

      # OPTIONAL. Which files / folders you want to cache for the next build.
      # Next builds will be faster when the cache is used.
      # cache: file.txt

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base: rust@latest

      # OPTIONAL. Sets the internal port(s) your app listens on:
      ports:
        # port number
        - port: 8080

      # OPTIONAL. Customize the runtime Rust environment by installing additional
      # dependencies to the base Rust runtime environment.
      # prepareCommands:
      #   - apt-get something
      #   - curl something else

      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Rust application is started.
      # initCommands:
      #  - rm -rf ./cache

      # REQUIRED. Your Rust application start command
      start: ./app
```

The top-level element is always `zerops`.

### Setup

The first element `setup` contains the **hostname** of your service. A runtime service with the same hostname must exist in Zerops.
Zerops supports the definition of multiple runtime services in a single `zerops.yaml`. This is useful when you use a monorepo. Just add multiple setup elements in your `zerops.yaml`:

```yaml
zerops:
  # definition for app service
  - setup: app
    build: ...
    run: ...

  # definition for api service
  - setup: api
    build: ...
    run: ...
```

Each service configuration contains at least two sections: **build** and **run**. Both sections are required to build and deploy your Rust application in Zerops. If you'd like to use a readiness check, add an optional **deploy** section.

## Build pipeline configuration

### base

_REQUIRED._ Sets the base technology for the build environment.

Following options are available for Rust builds:

<UnorderedCodeList data={data.rust.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: rust@latest
      ...
```

<p>
  The base build environment contains {data.alpine.default}, the selected
  major version of Rust, <a href="/references/cli">Zerops command line tool</a>, `npm` , `yarn`, `git` and `npx` tools.
</p>

:::info
You can change the base environment when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

If you need to install more technologies to the build environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base:
        - rust@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [build base environments](/zerops-yaml/base-list#runtime-services).

To customize your build environment use the [prepareCommands](/rust/how-to/build-pipeline#preparecommands) attribute.

:::note
Modifying the base technology will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for more details about cache invalidation.
:::

### os

_OPTIONAL._ Sets the operating system for the build environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customized.
:::

:::note
Modifying the OS will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for more details about cache invalidation.
:::

### prepareCommands

_OPTIONAL._ Customizes the build environment by installing additional dependencies or tools to the base build environment.

The base build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Rust defined in the [base](/rust/how-to/build-pipeline#base) attribute
- [Zerops command line tool](/references/cli)
- `npm`, `yarn`, `git` and `npx` tools

To install additional packages or tools add one or more prepare commands:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: rust@latest

      # OPTIONAL. Customize the build environment by installing additional packages
      # or tools to the base build environment.
      prepareCommands:
        - cargo b --release
      ...
```

When the first build is triggered, Zerops will

1. create a build container
2. download your application code from your repository
3. run the prepare commands in the defined order

The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).

:::note
These commands are skipped when using cached environment. Modifying `prepareCommands` will invalidate your build cache. See our [Build Cache Documentation](/features/build-cache) for details about cache invalidation.
:::

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/rust/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all prepare commands are finished, your custom build environment is ready for the build phase.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### buildCommands

_REQUIRED._ Defines build commands.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Set the base technology for the build environment:
      base: rust@latest

      # REQUIRED. Build your application
      buildCommands:
        - cargo b --release
      ...
```

At least one command is required. Zerops triggers each command in the defined order in a dedicated build container.

Before the build commands are triggered the build container contains:

1. base environment defined by the [base](/rust/how-to/build-pipeline#base) attribute
2. optional customisation of the base environment defined in the [prepareCommands](/rust/how-to/build-pipeline#preparecommands) attribute
3. your application code

#### Run build commands as a single shell instance

Use following syntax to run all commands in the same environment context. For example, if one command changes the current directory, the next command continues in that directory. When one command creates an environment variable, the next command can access it.

```yaml
buildCommands:
  - |
    cargo b --release
```

#### Run build commands as a separate shell instances

When the following syntax is used, each command is triggered in a separate environment context. For example, each shell instance starts in the home directory again. When one command creates an environment variable, it won't be available for the next command.

```yaml
buildCommands:
  - cargo b --release
```

#### Command exit code

If any command fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/rust/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the --verbose option.

```yaml
buildCommands:
  - cargo b --release
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the deploy phase.

### deployFiles

_REQUIRED._ Selects which files or folders will be deployed after the build has successfully finished. To filter out specific files or folders, use <a href="#deployignore">`.deployignore`</a> file.

```yaml
# REQUIRED. Select which files / folders to deploy after
# the build has successfully finished
deployFiles:
  - target/release/~app
```

Determines files or folders produced by your build, which should be deployed to your runtime service containers.

The path starts from the **root directory** of your project (the location of `zerops.yaml`). You must enclose the name in quotes if the folder or the file name contains a space.

The files/folders will be placed into `/var/www` folder in runtime, e.g. `./src/assets/fonts` would result in `/var/www/src/assets/fonts`.

#### Examples

Deploys a folder, and a file from the project root directory:

```yaml
deployFiles:
  - target/release/~app
```

Deploys the whole content of the build container:

```yaml
deployFiles: .
```

Deploys a folder, and a file in a defined path:

```yaml
deployFiles:
  - ./path/to/file.txt
  - ./path/to/dir/
```

#### How to use a wildcard in the path

Zerops supports the `~` character as a wildcard for one or more folders in the path.

Deploys all `file.txt` files that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/file.txt
```

Deploys all folders that are located in any path that begins with `/path/to/`

```yaml
deployFiles: ./path/to/~/
```

Deploys all folders that are located in any path that begins with `/path/` and ends with `/to/`

```yaml
deployFiles: ./path/~/to/
```
:::note Example
By default, `./src/assets/fonts` deploys to `/var/www/src/assets/fonts`, keeping the full path. Adding `~`, like `./src/assets/~fonts`, shortens it to `/var/www/fonts`
:::

#### .deployignore

Add a `.deployignore` file to the root of your project to specify which files and folders Zerops should ignore during deploy. The syntax follows the same pattern format as <a href="https://git-scm.com/docs/gitignore#_pattern_format">`.gitignore`</a>.

To ignore a specific file or directory path, start the pattern with a forward slash (`/`). Without the leading slash, the pattern will match files with that name in any directory.

:::tip
For consistency, it's recommended to configure both your `.gitignore` and `.deployignore` files with the same patterns.
:::

Examples:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      deployFiles: ./
```

```text title=".deployignore"
/src/file.txt
```
The example above ignores `file.txt` only in the root src directory.
```text title=".deployignore"
src/file.txt
```
This example above ignores `file.txt` in ANY directory named `src`, such as:
- `/src/file.txt`
- `/folder2/folder3/src/file.txt`
- `/src/src/file.txt`

:::note
`.deployignore` file also works with <a href="/references/cli/commands#deploy">`zcli service deploy`</a> command.
:::

### cache

_OPTIONAL._ Defines which files or folders will be cached for the next build.

```yaml
# OPTIONAL. Which files / folders you want to cache for the next build.
# Next builds will be faster when the cache is used.
cache: file.txt
```

The cache attribute helps optimize build times by preserving specified files between builds.

The cache attribute supports the [~ wildcard character](#how-to-use-a-wildcard-in-the-path).

Learn more about the [build cache system](/features/build-cache) in Zerops.

### envVariables

_OPTIONAL._ Defines the environment variables for the build environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      base: rust@latest
        …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        RUST_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/rust/how-to/env-variables) in Zerops.

## Runtime configuration

### base

_OPTIONAL._ Sets the base technology for the runtime environment.
If you don't specify the `run.base` attribute, Zerops keeps the current Rust version for your runtime.

Following options are available for Rust builds:

<UnorderedCodeList data={data.rust.base} />

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: rust@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
        base: rust@latest
      ...
```

<p>
  The base runtime environment contains {data.alpine.default}, the
  selected major version of Rust, Zerops command line tool, npm, yarn, git and
  npx tools.
</p>

:::info
You can change the base environment when you need to. Just simply modify the zerops.yaml in your repository.
:::

If you need to install more technologies to the runtime environment, set multiple values as a yaml array. For example:

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      # REQUIRED. Sets the base technology for the build environment:
      base: rust@latest
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Sets the base technology for the runtime environment:
      base:
        - rust@latest
      prepareCommands:
        - zsc add go@latest
      ...
```

See the full list of supported [run base environments](/zerops-yaml/base-list).

To customize your build environment use the `prepareCommands` attribute.

### os

_OPTIONAL._ Sets the operating system for the runtime environment.

Following options are available:

- `alpine`
- `ubuntu`

Default value is `alpine`.

We are currently using following os version:

- <span>{data.alpine.default}</span>
- <span>{data.ubuntu.default}</span>

:::caution
The os version is fixed and cannot be customised.
:::

### ports

_OPTIONAL._ Specifies one or more internal ports on which your application will listen.

Projects in Zerops represent a group of one or more services. Services can be of different types (runtime services, databases, message brokers, object storage, etc.). All services of the same project share a **dedicated private network**. To connect to a service within the same project, just use the service hostname and its internal port.

For example, to connect to a Rust service with hostname = "app" and port = 8080 from another service of the same project, simply use `app:8080`. Read more about [how to access a Rust service](/rust/how-to/access).

Each port has following attributes:


<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">port</td>
      <td className="w-fit">Defines the port number. You can set any port number between <em>10</em> and <em>65435</em>. Ports outside this interval are reserved for internal Zerops systems.</td>
    </tr>
    <tr>
      <td className="w-fit">protocol</td>
      <td className="w-fit"><strong>Optional.</strong> Defines the protocol. Allowed values are <code>TCP</code> or <code>UDP</code>. Default value is <code>TCP</code>.</td>
    </tr>
    <tr>
      <td className="w-fit">httpSupport</td>
      <td className="w-fit"><strong>Optional.</strong> <code>httpSupport = true</code> is the default setting for TCP protocol. Set <code>httpSupport = false</code> if a web server isn't running on the port. Zerops uses this information for the configuration of <a href="/features/access">public access</a>. <code>httpSupport = true</code> is available only in combination with the TCP protocol.</td>
    </tr>
  </tbody>
</table>


### prepareCommands

_OPTIONAL._ Customises the Rust runtime environment by installing additional dependencies or tools to the runtime base environment.

<p>
  The base Rust environment contains {data.alpine.default}, the selected
  major version of Rust, <a href="/references/cli">Zerops command line tool</a> and `npm` , `yarn`, `git` and `npx` tools. To install additional packages or tools add one or
  more prepare commands:
</p>

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Rust runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

When the first deploy with a defined prepare attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/rust/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the `prepareCommands` commands in the defined order

#### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/rust/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

#### Cache of your custom runtime environment

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the [build.addToRunPrepare](#copy-folders-or-files-from-your-build-container) and `run.prepareCommands` attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.

<p align="center">
  <img
    src="/img/screenshots/runtime_clear_build_cache.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

When the prepare cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.

#### Single or separated shell instances

You can configure your prepare commands to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### Copy folders or files from your build container

<p>
  The prepare runtime container contains {data.alpine.default}, the
  selected major version of Rust, <a href="/references/cli">Zerops command line tool</a> and `npm`, `yarn`, `git` and `npx` tools.
</p>

The prepare runtime container does not contain your application code nor the built application. If you need to copy some folders or files from the build container to the runtime container (e.g. a configuration file) use the `addToRunPrepare` attribute in the [build section](#build-pipeline-configuration).

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
      ...
      addToRunPrepare: ./runtime-config.yaml

    # ==== how to run your application ====
    run:
      # OPTIONAL. Customise the runtime environment by installing additional packages
      # or tools to the base Rust runtime environment.
      prepareCommands:
        - apt-get something
        - curl something else
      ...
```

In the example above Zerops will copy the `runtime-config.yaml` file from your build container **after the build has finished** into the new **prepare runtime** container. The copied files and folders will be available in the `xxx` folder in the new prepare runtime container before the prepare commands are triggered.

### initCommands

_OPTIONAL._ Defines one or more commands to be run each time a new runtime container is started or a container is restarted.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # OPTIONAL. Run one or more commands each time a new runtime container
      # is started or restarted. These commands are triggered before
      # your Rust application is started.
      initCommands:
        - rm -rf ./cache
```

These commands are triggered in the runtime container before your Rust application is started via the [start command](/rust/how-to/build-pipeline#start).

Use init commands to clean or initialise your application cache or similar operations.

:::caution
The init commands will delay the start of your application each time a new runtime container is started (including the [horizontal scaling](/rust/how-to/scaling#horizontal-auto-scaling) or when a runtime container is restarted).

Do not use the init commands for customising your runtime environment. Use the [run:prepareCommands](/rust/how-to/build-pipeline#preparecommands-1) attribute instead.
:::

#### Command exit code

If any of the `initCommands` fails, it returns an exit code other than 0, but deploy is **not** canceled. After all init commands are finished, regardless of the status code, the application is started. Read the [runtime log](/rust/how-to/logs#runtime-log) to troubleshoot the error.

#### Single or separated shell instances

You can configure your `initCommands` to be run in a single shell instance or multiple shell instances. The format is identical to [build commands](#buildcommands).

### envVariables

_OPTIONAL._ Defines the environment variables for the runtime environment.

Enter one or more env variables in following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to run your application ====
    run:
      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        RUST_ENV: production
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

Read more about [environment variables](/rust/how-to/env-variables) in Zerops.

### start

_REQUIRED._ Defines the start command for your Rust application.

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Rust application start command
      start: ./app
```

### health check

_OPTIONAL._ Defines a health check.

`healthCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the health check to request a local URL using a HTTP GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Rust application start command
      start: ./app

      # OPTIONAL. Define a health check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      healthCheck:
        httpGet:
          port: 80
          path: /status
```

Read more about how the [health check works] in Zerops.

#### exec

Configures the health check to run a local command.
Following attributes are available:


<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/rust/how-to/create#set-secret-environment-variables">environment variables</a> as your Rust application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>


**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to run your application ====
    run:
      # REQUIRED. Your Rust application start command
      start: ./app

      # OPTIONAL. Define a health check with a shell command.
      healthCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [health check works] in Zerops.

### crontab

_OPTIONAL._ Defines cron jobs.

Setup cron jobs in the following format:

```yaml
zerops:
  # define hostname of your service
  - setup: app

    # ==== how to run your application ====
    run:
      crontab:
        # REQUIRED. Sets the command to execute:
        - command: ""
        # REQUIRED. Sets the interval time to execute:
          timing: "0 * * * *"
```

Read more about setting up [cron](/references/cron) in Zerops.

## Deploy configuration

### readiness check

_OPTIONAL._ Defines a readiness check. Read more about how the [readiness check works](/rust/how-to/deploy-process#readiness-checks) in Zerops.

`readinessCheck` requires either one `httpGet` object or one `exec` object.

#### httpGet

Configures the readiness check to request a local URL using a http GET method.

Following attributes are available:

| Parameter  | Description                                                                                                                                                                                                                |
| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **port**   | Defines the port of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                           |
| **path**   | Defines the URL path of the HTTP GET request.<br/>The readiness check will trigger a GET request on `http://127.0.0.1:{port}/{path}`                                                                                       |
| **host**   | **Optional.** The readiness check is triggered from inside of your runtime container so it always uses the localhost (`127.0.0.1`). If you need to add a `host` to the request header, specify it in the `host` attribute. |
| **scheme** | **Optional.** The readiness check is triggered from inside of your runtime container so no https is required.<br/>If your application requires a https request, set `scheme: https`                                        |

**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        httpGet:
          port: 80
          path: /status

    # ==== how to run your application ====
    run: ...
```

Read more about how the [readiness check works](/rust/how-to/deploy-process#readiness-checks) in Zerops.

#### exec

Configures the readiness check to run a local command.
Following attributes are available:


<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>command</strong></td>
      <td className="w-fit">
        Defines a local command to be run.<br/>
        The command has access to the same <a href="/rust/how-to/create#set-secret-environment-variables">environment variables</a> as your Rust application.<br/>
        A single string is required. If you need to run multiple commands create a shell script or, use a multiline format as in the example below.
      </td>
    </tr>
  </tbody>
</table>


**Example:**

```yaml
zerops:
  # hostname of your service
  - setup: app
    # ==== how to build your application ====
    build: ...

    # ==== how to deploy your application ====
    deploy:
      # OPTIONAL. Define a readiness check with a HTTP GET request option.
      # Configures the check on http://127.0.0.1:80/status
      readinessCheck:
        exec:
          command: |
            touch grass
            rm -rf life
            mv /outside/user /home/user
```

Read more about how the [readiness check works](/rust/how-to/deploy-process#readiness-checks) in Zerops.




<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Description of the build process

Zerops starts a temporary build container and performs following actions:

1. Installs the build environment:
   - Sets up base system and Go runtime
   - Restores cached files if available (based on `build.cache` configuration)
   - Validates cache against current `build.os`, `build.base`, and `build.prepareCommands`
2. Downloads your application source code from [GitHub ↗](https://www.github.com), [GitLab ↗](https://www.gitlab.com) or via [Zerops CLI](/references/cli)
3. Optionally [customizes the build environment](#customize-rust-build-environment)
4. Runs the build commands
5. Uploads the application artefact to the internal Zerops storage
6. Preserves specified files for future builds (based on `build.cache` configuration)
7. Optionally [customizes the runtime environment](/rust/how-to/customize-runtime)
8. [Deploys your application](/rust/how-to/deploy-process)

The build container is automatically deleted after the build has finished or failed.

## Cancel running build

When you know that the running build is not correct and you want to cancel it, you can do it in Zerops GUI. Go to the service detail, select **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Cancel build** button.

{/*TODO screenshot of a running build pipeline*/}

The build cancellation is available before the build pipeline is finished. When the build is finished, the deployment cannot be cancelled.

## Customize Rust build environment

The default Rust build environment contains:

- <span>{data.alpine.default}</span>
- selected version of Rust defined in `zerops.yaml` [build.base](/rust/how-to/build-pipeline#base) parameter
- [zCLI](/references/cli), Zerops command line tool
- `npm`, `yarn`, `git` and `npx` tools

If you prefer the Ubuntu OS instead of Alpine, set the [build.os](/rust/how-to/build-pipeline#os) attribute to `ubuntu`. To install additional packages or tools add one or more [build.prepareCommands](/rust/how-to/build-pipeline#preparecommands) commands to your `zerops.yaml`.

:::info
The application code is available in the `/var/www` folder in your build container before the prepare commands are triggered. This allows you to use any file from your application code in your prepare commands (e.g. a configuration file).
:::

## Rust build hardware resources

Build of your Rust application is run in a separate build container with following resource configuration:

| HW resource   | Minimum | Maximum |
| ------------- | ------- | ------- |
| **CPU cores** | 6       | 20      |
| **RAM**       | 8 GB    | 8 GB    |
| **Disk**      | 1 GB    | 100 GB  |

The build container is always started with the minimum hardware resources and scales vertically up to the maximum resources.

:::info
Hardware resources of the build containers are not charged. The build costs are covered by the standard Zerops [project fee](https://zerops.io/#pricing).
:::

## Build time limit

The time limit for the whole build pipeline is **1 hour**. After 1 hour, Zerops will terminate the build pipeline and delete the build container.

## Troubleshooting build-related problems

### Failure of a build prepare command

If any [prepare command](/rust/how-to/build-pipeline#preparecommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/rust/how-to/logs#build-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom build environment is ready for the build phase.

### Invalidate the build cache
If you encounter unexpected build behavior or dependency issues, the problem might be related to [cached build data](/features/build-cache). While Zerops maintains the build cache to speed up deployments, sometimes you may need to start fresh.
To invalidate the build cache:

1. Go to your service detail in Zerops GUI
2. Choose **Pipelines & CI/CD Settings** from the left menu
3. Click on the **Invalidate build cache** button

This will force Zerops to run the next build clean, including all prepare commands, which can help resolve cache-related issues. After invalidation, your next build will also create a fresh cache.

### Failure of a build command

If any [build command](/rust/how-to/build-pipeline#buildcommands) fails, it returns an exit code other than 0 and the build is canceled. Read the [build log](/rust/how-to/logs#build-log) to troubleshoot the error. If the error log doesn't contain any specific error message, try to run your build with the `--verbose` option.

```yaml
buildCommands:
  - cargo build --release -v
```

If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `buildCommands` are finished, the application build is completed and ready for the [deploy](/rust/how-to/deploy-process) phase.



Zerops allows you to stop any service. Stopped services only consume disk.

## Stop, start and restart Rust service in Zerops GUI

To stop the Rust service in Zerops GUI go to the project dashboard and select the **Stop** menu item in the top right corner.

{/*TODO screenshot (show menu with the start and stop items on a service)*/}

To start the stopped Rust service choose the **Start** item from the same menu.

To restart the Rust service choose the **Restart** item from the same menu.

## Stop and start Rust using zCLI

zCLI is the Zerops command-line tool. To stop and start the Rust service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service stop` command

```sh
Usage:
  zcli service stop [serviceIdOrName] [flags]

Flags:
  -h, --help               the enable Zerops subdomain command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service stop`, you will be given a list of your projects and services to choose from.
:::

3. Run the `zcli service start` command

```sh
Usage:
  zcli service start [{serviceName | serviceId}] [flags]

Flags:
  -h, --help               the service start command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

:::info
zCLI commands are interactive, when you press enter after `zcli service start`, you will be given a list of your projects and services to choose from.
:::




Zerops provides a Rust runtime service with extensive build support. Rust runtime is highly scalable and customisable to suit both development and production.

## Create Rust service using Zerops GUI

First, set up a project in Zerops GUI. Then go to the project dashboard page and choose **Add new service** in the left menu in the **Services** block. Then add a new Rust service:

<Video
  src="/vids/services/rust.webm"
  type="video/webm"
/>

### Choose Rust version

Following Rust versions are currently supported:

<UnorderedList data={data.rust.readable} />

:::info
You can [change](/rust/how-to/upgrade) the major version at any time later.
:::

### Set a hostname

Enter a unique service identifier like "app","cache", "gui" etc. Duplicate services with the same name in the same project are forbidden.

#### Limitations:

- maximum 25 characters
- must contain only lowercase ASCII letters (a-z) or numbers (0-9)

:::caution
The hostname is fixed after the service is created. It can't be changed later.
:::

### Set secret environment variables

Add environment variables with sensitive data, such as password, tokens, salts, certificates etc. These will be securely saved inside Zerops and added to your runtime service upon start.

Setting the secret environment variables is optional. You can set them later in Zerops GUI.

Read more about [different types of env variables](/rust/how-to/env-variables#types-of-env-variables-in-zerops) in Zerops.

### Set auto scaling configuration

Zerops scales the Rust services automatically both vertically and horizontally. Vertical scaling means increasing or decreasing the hardware resources (CPU, RAM and disk) of a Rust container. Horizontal scaling adds or removes whole containers.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

#### CPU Mode

**Shared**
Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

**Dedicated**
The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

Choose the CPU mode when starting a new service or change it later. The CPU mode doesn't change automatically.

#### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

Rust service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Rust service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Rust performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](/rust/how-to/scaling#fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

:::info
You can change the vertical auto scaling parameters later.
:::

#### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Rust service. When your Rust service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Value</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>minimum containers</strong></td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>maximum containers</strong></td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Rust service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

[Learn more](/rust/how-to/scaling) about Rust auto scaling.

#### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Create Rust service using zCLI

zCLI is the Zerops command-line tool. To create a new Rust service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/rust/how-to/create#create-a-project-description-file)
3. [Create a project with a Rust and PostgreSQL service](#full-example)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### Basic example:

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in rust@{version} format
    type: rust@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes your future project infrastructure. The project will contain one Rust version 18 service with default [auto scaling](/rust/how-to/scaling) configuration. Hostname will be set to "app", the internal port(s) the service listens on will be defined later in the [zerops.yaml](/rust/how-to/build-pipeline#ports). Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

#### Full example:

Create a directory my-project. Create an description.yaml file inside the my-project directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
  # optional: project description
  description: A project with a Rust and PostgreSQL database
  # optional: project tags
  tags:
    - DEMO
    - ZEROPS
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in rust@{version} format
    type: rust@latest
    # optional: vertical auto scaling customization
    verticalAutoscaling:
      cpuMode: DEDICATED
      minCpu: 2
      maxCpu: 5
      minRam: 2
      maxRam: 24
      minDisk: 6
      maxDisk: 50
      startCpuCoreCount: 3
      minFreeRamGB: 0.5
      minFreeRamPercent: 20
    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4
    # optional: create secret env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
  - # second service hostname
    hostname: db
    # service type and version number in postgresql@{version} format
    type: postgresql@12
    # mode of operation "HA"/"non_HA"
    mode: NON_HA
```

The yaml file describes your future project infrastructure. The project will contain a Rust service and a [PostgreSQL](/postgresql/overview) service.

Rust service with "app" hostname, the internal port(s) the service listens on will be defined later in the [zerops.yaml](/rust/how-to/build-pipeline#ports). Rust service will run on version 18 with a custom vertical and horizontal scaling. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The hostname of the PostgreSQL service will be set to "db". The [single container](/postgresql/how-to/create#single-container) mode will be chosen and the default [auto scaling configuration](/postgresql/how-to/create#set-auto-scaling-configuration) will be set.

#### Description of description.yaml parameters

The `project:` section is required. Only one project can be defined.

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit"><strong>Parameter</strong></th>
      <th className="w-fit"><strong>Description</strong></th>
      <th className="w-fit"><strong>Limitations</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit"><strong>name</strong></td>
      <td className="w-fit">The name of the new project. Duplicates are allowed.</td>
      <td className="w-fit"></td>
    </tr>
    <tr>
      <td className="w-fit"><strong>description</strong></td>
      <td className="w-fit"><strong>Optional.</strong> Description of the new project.</td>
      <td className="w-fit">Maximum 255 characters.</td>
    </tr>
    <tr>
      <td className="w-fit"><strong>tags</strong></td>
      <td className="w-fit"><strong>Optional.</strong> One or more string tags. Tags do not have a functional meaning, they only provide better orientation in projects.</td>
      <td className="w-fit"></td>
    </tr>
  </tbody>
</table>


At least one service in `services:` section is required. You can create a project with multiple services. The example above contains Rust and PostgreSQL services but you can create a `description.yaml` with your own combination of [services](/features/infrastructure).

<table className="w-full my-1.5">
  <thead>
    <tr>
      <th className="w-fit">Parameter</th>
      <th className="w-fit">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">
        <b>hostname</b>
      </td>
      <td className="w-fit">
        The unique service identifier.
        <ul>
        <li>duplicate services with the same name in the same project are forbidden</li>
        <li>maximum 25 characters</li>
        <li>must contain only lowercase ASCII letters (a-z) or numbers (0-9)</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>type</b>
      </td>
      <td className="w-fit">
        Specifies the service type and version.
        <br />
        See what [Rust service types](/references/import-yaml/type-list#runtime-services) are currently supported.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>verticalAutoscaling</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Defines <a href="/rust/how-to/create#set-auto-scaling-configuration">custom vertical auto scaling parameters</a>.<br />
        All verticalAutoscaling attributes are optional. Not specified
        attributes will be set to their default values.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - cpuMode</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Accepts `SHARED`, `DEDICATED` values. Default is `SHARED`
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minCpu/maxCpu</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minCpu or maxCpu in CPU cores (integer).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minRam/maxRam</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minRam or maxRam in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b> - minDisk/maxDisk</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Set the minDisk or maxDisk in GB (float).
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>minContainers</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Default = 1. Defines the minimum number of containers
        for <a href="/rust/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.<br />
        <br />
        <b>Limitations:</b>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maxContainers</b>
      </td>
      <td className="w-fit">
        Defines the maximum number of containers for <a href="/rust/how-to/create#horizontal-auto-scaling">horizontal autoscaling</a>.<br />
        <br />
        <b>Limitations:</b>
        <br />
        Current maximum value = 6.
      </td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>envSecrets</b>
      </td>
      <td className="w-fit">
        <b>Optional.</b> Defines one or more secret env variables as a key value
        map. See env variable <a href="/rust/how-to/env-variables#env-variable-restrictions">restrictions</a>.
      </td>
    </tr>
  </tbody>
</table>

### Create a project based on the description.yaml

When you have your `description.yaml` ready, use the `zcli project project-import` command to create a new project and the service infrastructure.

```sh
Usage:
  zcli project project-import importYamlPath [flags]

Flags:
  -h, --help                the project import command.
      --orgId string        If you have access to more than one organization, you must specify the org ID for which the
                            project is to be created.
      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default "./")
```

Zerops will create a project and one or more services based on the `description.yaml` content.

Maximum size of the `description.yaml` file is 100 kB.

You don't specify the project name in the `zcli project project-import` command, because the project name is defined in the `description.yaml`.

If you have access to more than one client, you must specify the client ID for which the project is to be created. The `clientID` is located in the Zerops GUI under the client name on the project dashboard page.

<p align="center">
  <img
    src="/img/screenshots/client_id.png"
    alt="image"
    width="70%"
    height="auto"
  />
</p>
### Add Rust service to an existing project

#### Example:

Create a directory `my-project` if it doesn't exist. Create an `import.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project
# array of project services
services:
  - # service name
    hostname: app
    # service type and version number in rust@{version} format
    type: rust@latest
    # defines the minimum number of containers for horizontal autoscaling
    minContainers: 1
    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 6
    # optional: create env variables
    envSecrets:
      S3_ACCESS_KEY_ID: 'P8cX1vVVb'
      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'
```

The yaml file describes the list of one or more services that you want to add to your existing project. In the example above, one Rust service version 18 with default [auto scaling](/rust/how-to/scaling) configuration will be added to your project. Hostname of the new service will be set to `app`. Following secret env variables will be configured:

```env
S3_ACCESS_KEY_ID="P8cX1vVVb"
S3_ACCESS_SECRET="ogFthuiLYki8XoL73opSCQ"
```

The content of the `services:` section of `import.yaml` is identical to the project description file. The `import.yaml` never contains the `project:` section because the project already exists.

When you have your `import.yaml` ready, use the `zcli project service-import` command to add one or more services to your existing Zerops project.

```sh
Usage:
  zcli project service-import importYamlPath [flags]

Flags:
  -h, --help               the project service import command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli project service-import importYamlPath`, you will be given a list of your projects to choose from.

Maximum size of the import.yaml file is 100 kB.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline_custom_runtime.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>


The default Rust runtime environment contains:

- <span>{data.alpine.default}</span>
- Selected version of Rust when the runtime service was created.
- [zCLI](/references/cli)
- Git

:::note
To use Ubuntu instead of the default Alpine, set the [run.os](/zerops-yaml/specification#os--1) attribute.

Additional packages and tools can be installed using [run.prepareCommands](/zerops-yaml/specification#preparecommands--1).
:::

### Runtime Flow

When the first deploy with a defined `prepareCommands` attribute is triggered, Zerops will

1. create a prepare runtime container
2. optionally: [copy selected folders or files from your build container](/rust/how-to/build-pipeline#copy-folders-or-files-from-your-build-container)
3. run the run.prepareCommands commands in the defined order

### Command exit code

If any command fails, it returns an exit code other than 0 and the deploy is canceled. Read the [prepare runtime log](/rust/how-to/logs#prepare-runtime-log) to troubleshoot the error. If the command ends successfully, it returns the exit code 0 and Zerops triggers the following command. When all `prepareCommands` commands are finished, your custom runtime environment is ready for the deploy phase.

The prepare runtime container is automatically deleted after the prepare runtime phase has finished or failed.

### Custom runtime environment cache

Some packages or tools can take a long time to install. Therefore, Zerops caches your custom runtime environment after the installation of your custom packages or tools is completed. When the second or following deploy is triggered, Zerops will use the custom runtime cache from the previous deploy if following conditions are met:

1. Content of the <a href="/rust/how-to/build-pipeline#copy-folders-or-files-from-your-build-container">build.addToRunPrepare</a> and <a href="/rust/how-to/build-pipeline#preparecommands-1">run.prepareCommands</a> attributes didn't change from the previous deploy
2. The custom runtime cache wasn't invalidated in the Zerops GUI.

To invalidate the Zerops runtime cache go to your service detail in Zerops GUI, choose **Service dashboard & runtime containers** from the left menu and click on the **Open pipeline detail** button. Then click on the **Clear runtime prepare cache** button.

{/* ** TODO screenshot** */}

When the custom runtime cache is used, Zerops doesn't create a prepare runtime container and executes the deployment of your application directly.



## Delete Rust service in Zerops GUI

Go to the project dashboard and select the **delete service** menu item in the top right corner.

{/*TODO screenshot (show menu with the delete service item)*/}

## Delete Rust using zCLI

zCLI is the Zerops command-line tool. To delete the Rust service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Run the `zcli service delete` command

```sh
Usage:
  zcli service delete [serviceIdOrName] [flags]

Flags:
      --confirm            If set, zCLI will not ask for confirmation of destructive operations.
  -h, --help               the service delete command.
      --projectId string   If you have access to more than one project, you must specify the project ID for which the
                           command is to be executed.
      --serviceId string   If you have access to more than one service, you must specify the service ID for which the
                           command is to be executed.
```

zCLI commands are interactive, when you press enter after `zcli service delete`, you will be given a list of your projects and its services to choose from.



<p align="center">
  <img
    src="/img/screenshots/build_deploy_pipeline-step3.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Application artefact

When the [build phase](/rust/how-to/build-process) is finished, the application artefact is stored in the internal Zerops storage and the build container is deleted.

If you triggered the deploy pipeline [manually](/rust/how-to/trigger-pipeline#manual-deploy-using-zerops-cli) using Zerops CLI, the application artefact is also uploaded to the internal Zerops storage.

Zerops uses the stored artefact to deploy the identical version of your application each time a new container is started:

- when a new application version is deployed
- when the application [scales horizontally](/rust/how-to/create#horizontal-auto-scaling)
- when a runtime container fails and a new container is started automatically

## First deploy

When your application is deployed for the first time, Zerops will start one or more runtime containers based on the service [auto scaling settings](/rust/how-to/scaling).

Zerops performs following actions for each new container:

1. Installs the runtime environment
2. Downloads the application artefact from the internal storage
3. Optionally runs the [init commands](/rust/how-to/build-pipeline#initcommands)
4. Starts your application using the [start command](/rust/how-to/build-pipeline#start)
5. Optionally waits until the [readiness check](/rust/how-to/build-pipeline#readiness-check) succeeds
6. The container is now active and receives incoming requests.

Services with multiple containers are deployed in parallel.

:::info
If your application needs to be initialized in each runtime container, add [init commands](/rust/how-to/build-pipeline#initcommands) to `zerops.yaml`.
:::

:::caution
Do not use the `initCommands` for customising your runtime environment. See [how to customize the runtime environment](/rust/how-to/customize-runtime).
:::

## Further deploys

When a previous version of your application is already running, Zerops will start new containers. The count of new containers will be the same as the count of existing containers.

Zerops performs the identical actions for each new container as the first deployment.
When all new containers are started your service contains both new and old versions for a short period of time.

The old containers are then removed from the project balancer so they don't receive new requests. The Rust process inside each of the old containers is terminated and all old containers are gradually deleted.

## Readiness checks

If your application isn't ready to handle requests right after it is started via the [start command](/rust/how-to/build-pipeline#start), configure a [readiness check](/rust/how-to/build-pipeline#readiness-check) in your `zerops.yaml`.

If the readiness check is defined, Zerops will:

1. Start your application
2. Perform a readiness check
3. If the readiness check fails, wait 5 seconds and repeat step 2.
4. If the readiness check succeeds, set the container as active.

Application in the runtime container with a pending readiness check won't receive any incoming requests. Only active containers receive incoming requests to your Rust service.

If the readiness check is still failing after 5 minutes, the specific runtime container is marked as failed and Zerops will delete it, create a new runtime container and perform the deploy.

The <a href="/rust/how-to/build-pipeline#httpget">`httpGet`</a> readiness check is successful when the URL returns HTTP status code `2xx`. The timeout is 5 seconds. When the URL returns a `3xx` HTTP status, the readiness check HTTP client will follow the redirect.

The <a href="/rust/how-to/build-pipeline#exec">`exec.command`</a> readiness check is successful when the command returns status code 0. The timeout is 5 seconds.

Read the [runtime log](/rust/how-to/logs#runtime-log) to troubleshoot failed readiness checks.

## Application versions

Zerops keeps 10 last versions of your application in the internal storage.

The list of application versions is available in Zerops GUI. Go to the service detail and choose **Service dashboard & runtime containers** from the left menu. The active version is highlighted, show all archived version by clicking on the button below.

<p align="center">
  <img
    src="/img/screenshots/pipeline_history.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

The pipeline detail is accessible from the additional menu. The pipeline detail contains

- The pipeline config (`zerops.yaml`) that was used for the selected version
- The build log (if available)
- The prepare runtime log (if available)

You can download the build artefact of the selected version or delete an inactive version manually.

## Restore an archived version

You can restore an archived version by choosing the **Activate** item from the additional menu.
Zerops will deploy the selected version and the active version will be archived.

The environment variables will be restored to the latest moment when the selected version was active.



Environment variables help you run your application in different environments. They allow you to isolate all specific environment aspects from your application code and keep your app encapsulated. You can create several projects in Zerops that represent different environments (development, stage, production) or even each developer can have a project with its own environment.

In Zerops you do not have to create a `.env` file manually. Zerops handles the environment variables for you.

## Types of env variables in Zerops

There are 3 different sets of env variables in Zerops:

<table className="w-fit my-1.5">
  <thead>
    <tr className="text-center  rounded-lg">
      <th className="w-fit"><strong>Type</strong></th>
      <th className="w-fit"><strong>Environment</strong></th>
      <th className="w-fit"><strong>Defined in</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">build</td>
      <td className="w-fit"><a href="/rust/how-to/build-pipeline#envvariables">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">basic</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/rust/how-to/build-pipeline#envvariables-1">zerops.yaml</a></td>
    </tr>
    <tr className="text-center">
      <td className="w-fit">secret</td>
      <td className="w-fit">runtime</td>
      <td className="w-fit"><a href="/rust/how-to/env-variables#set-secret-env-variables-in-zerops-gui">Zerops GUI</a></td>
    </tr>
  </tbody>
</table>

Use the [secret env variables](/rust/how-to/create#set-secret-environment-variables) for all sensitive data you don't want to store in your application code. Secret env variables are also useful if you need for testing where you need to change the value of some env variables frequently. Secret variables are managed in Zerops GUI and you don't have to redeploy your application.

The basic build and runtime env variables are listed in your [zerops.yaml](/zerops-yaml/specification) and deployed together with your application code. When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your zerops.yaml and redeploy your application to Zerops.

You can [reference](/rust/how-to/env-variables#reference-a-local-variable-in-another-variable-value) another variable of the same service or even a variable of [another service](/rust/how-to/env-variables#reference-a-variable-of-another-project-service) within the same project.

## Set secret env variables in Zerops GUI

Use secret variables to store passwords, tokens and other sensitive information that shouldn't be part of your repository and listed in zerops.yaml.

<p align="center">
  <img
    src="/img/screenshots/secret_env.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

You can set env variables when you [create](/rust/how-to/create) a new Rust service or you can set them later.

To configure env variables for an existing service, go to the service detail and choose **Environment variables** in the left menu. Scroll to the **Secret variables** section and click on the **Add secret variable** button and set variable key and value.

You can edit or delete env variables that you've created by clicking on the menu on the right side of each row.

The changes you've made to environment variables will be automatically applied to all containers of your project's services.

:::caution
You need to **restart** the runtime service after you update environment variables. The Rust process running in the container receives the list env variables only when it starts. Update of the env variables while the Rust process is running does not affect your application.
:::

## Set basic build env variables in zerops.yaml

To set basic env variables for the build environment, add the `envVariables` attribute to the build section in your `zerops.yaml`

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    build:
       …

      # OPTIONAL. Defines the env variables for the build environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Set basic runtime env variables in zerops.yaml

To set basic env variables for the runtime environment, add the `envVariables` attribute to the runtime section in your `zerops.yaml`.

```yaml
zerops:
  # define hostname of your service
  - setup: app
    # ==== how to build your application ====
    run:
       …

      # OPTIONAL. Defines the env variables for the runtime environment:
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

When you need to update a value of an existing env variable or change the set of build or runtime env variables, update your `zerops.yaml` and redeploy your application to Zerops.

## Env variable restrictions

**key**

- must satisfy the following regular expression: `[a-zA-Z_]+[a-zA-Z0-9_]*`
- all variable keys in the same service must be unique regardless of case
- keys are case sensitive

**value**

- must contain only ASCII characters
- the _End of Line_ character is forbidden

These restrictions apply to all [types of env variables](/rust/how-to/env-variables#types-of-env-variables-in-zerops).

## Referencing other env variables

You can reference another variable of the same service using `${key}` in your variable value. You can even reference a variable from a different service using `${hostname_key}`. The referenced variable doesn't need to exist when you are entering your variable.

### Reference a local variable in another variable value

| Variable key | Variable value      | Computed variable value |
| ------------ | ------------------- | ----------------------- |
| id           | 12345               | 12345                   |
| hostname     | app                 | app                     |
| name         | `${id}-${hostname}` | 12345-app               |

### Reference a variable of another project service

Let's say your project contains two PostgreSQL services `dbtest` and `dbprod`. Both services have a `connectionString` variable. Then you can create a `dbConnectionString` env variable in your Rust runtime and set `${dbtest_connectionString}` as the variable value. Zerops will fill in the value of the `connectionString` variable of the `dbtest` service.

When you change the `dbConnectionString` value to `${dbprod_connectionString}`, Zerops will fill in the value of the `connectionString` variable of the `dbprod` service.

:::caution
When you change the value of the `connectionString` variable in the service `dbtest` you need to **restart** the Rust service. The Rust process running in the container receives the list env variables only when it starts. Update of the env variables while the Rust process is running does not affect your application.
:::

## Generated env variables

Zerops creates several helper variables when a Rust service is created, e.g. `hostname`, `PATH`. Some helper variables are read-only (`hostname`), others are editable (`PATH`). Generated variables cannot be deleted.

Generated env variables are listed on the **Environment variables** page. Scroll to the **Generated variables** section.

<p align="center">
  <img
    src="/img/screenshots/nodejs_generated_variables.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## How to read env variables from your Rust app

Zerops passes all environment variables from all project services when your Rust app is deployed and started.

To access the local environment variable i.e. the variable set to this Rust service in your app, use:

```sh
env::var("YOUR_VARIABLE_KEY_HERE")
```

## How to read env variables of another service

All services of the same project can reference environment variables from other services. To use an environment variable from one service in another service in the same project, you must prefix the environment variable key with the service hostname and underscore.

#### Examples:

To access the `connectionString` env variable of the `mariadb1` service, use `mariadb1_connectionString` as the env variable key.
To access the `password` env variable of the `mariadb2` service, use `mariadb2_password` as the env variable key.

## How to read runtime env variables in the build environment

You can use runtime env variables in the build environment using the `RUNTIME_` prefix. For example if you have a runtime variable with the `connectionString` key, use the `RUNTIME_connectionString` to read the variable in the build environment. This rule applies both for basic and secret runtime variables.

## Basic and secret env variable with the same key

If you create a secret env variable and a basic runtime env variable with the same key, Zerops saves the basic runtime env variable from your zerops.yaml and ignores the secret env variable.

If you create a basic build env variable and a runtime env variable with the same key, Zerops saves both because the build and runtime environments have separate sets of env variables.



## Zerops GUI

In Zerops GUI, go to the service detail page and choose **Service containers & resources overview** and scroll down to the list of containers.

<p align="center">
  <img
    src="/img/screenshots/nodejs_containers_list.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

Then click on the file browser icon and the file browser opens:

<p align="center">
  <img
    src="/img/screenshots/nodejs_file_browser.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

If your service is in the [HA mode], you can switch between containers in the top left corner.

## zCLI & SSH

You can connect to the container via SSH with the Zerops CLI and browse its files.
How to [connect to your service via SSH](/references/ssh).



Zerops provides 3 different logs:

- [build log](#build-log)
- [prepare runtime log](#prepare-runtime-log)
- [runtime log](#runtime-log)

## How to access logs

### Build log

#### Zerops GUI

To access a build log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Build log**. The build log button is available only if the [build pipeline](/rust/how-to/trigger-pipeline) was triggered for the selected deploy.

#### zCLI

To access a build log in Zerops CLI use

```sh
zcli service log --showBuildLogs
```

Read more about the [zcli service log](/references/cli/access-logs) command.

### Prepare runtime log

#### Zerops GUI

To access a prepare runtime log in Zerops GUI, go to the service detail and choose **Service dashboard & runtime containers** in the left menu. Then open the pipeline detail of an application version and click on **Prepare runtime log**. The prepare runtime log button is available only if the [prepare runtime pipeline](/rust/how-to/build-pipeline#preparecommands-1) was triggered for the selected deploy.

#### zCLI

_Prepare runtime log is currently not supported in zCLI._

### Runtime log

#### Zerops GUI

To access a runtime log in Zerops GUI, go to the service detail and choose **Runtime log** in the left menu.

{/* TODO screenshot** */}

Each runtime container has its own log. If your service has multiple containers, select the container in the log header.

You can filter log records by minimum severity or by time.

#### zCLI

To access the log of the _first runtime container_ in Zerops CLI use

```sh
zcli service log
```

For an _aggregate log_ from all service's runtime containers omit the `@1`

```sh
zcli service log
```

Read more about the [zcli service log](/references/cli/access-logs) command.

## Rust logging configuration

Zerops logs all messages sent

- to the standard error (`stderr`)
- to the standard output (`stdout`)
- via the Rust `console.log` method

### Severity level

By default the `console.log` creates a message with the `Informational (6)` severity.

Add a severity number in the `<N>` format as a prefix to set a custom severity as shown below:

```rust
console.log("A message with the informational severity ...");
console.log('<0>Emergency (0) severity > system is unusable.');
console.log('<1>Alert (1) severity > action must be taken immediately.');
console.log('<2>Critical (2) severity > critical conditions.');
console.log('<3>Error (3) severity > error conditions.');
console.log('<4>Warning (4) severity > warning conditions.');
console.log('<5>Notice (5) severity > normal, but significant, condition.');
console.log('<6>Informational (6) severity > informational message.');
console.log('<7>Debug (7) severity > debug-level message.');
```

:::info

`console.info`, `console.warn`, `console.debug`
, and `console.error` are just aliases to the `
  console.log
` method. They don't set the appropriate severity number. Use the `
  &lt;N&gt;
` prefix instead. :::




Zerops performs an automated scaling of hardware resources required to run your runtime application based on its usage. If the current use of your application does not require as much performance or disk space the auto scaling reduces the resources and thus reduces the costs. If your application is under heavy load or needs to store more data, then auto scaling increases the resources to make sure it runs smoothly.

## Vertical and horizontal auto scaling

Each application you deploy starts with the minimum hardware resources: **CPU** cores, **RAM** and **Disk**. Zerops monitors the usage of these 3 resources and if the usage exceeds a set threshold, more CPU cores, RAM or Disk is allocated to the service. This is called **vertical scaling**.

<p align="center">
  <Image
    lightImage="/img/gui/resources.webp"
    darkImage="/img/gui/resources.webp"
    alt="Resources of a Zerops service"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

**Horizontal scaling** adds or removes whole containers.

Zerops has a preference for vertical scaling because it's faster and more precise. If the vertical auto scaling hits the defined maximum a new container is started automatically. When your application doesn't need so much power and all containers are vertically scaled down, Zerops will gradually remove whole containers.

<p align="center">
  <img
    src="/img/screenshots/scaling2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

## Configure auto scaling

To change the auto scaling settings go to the Rust service detail and choose **Automatic scaling configuration** in the left menu.

<p align="center">
  <Image
    lightImage="/img/gui/automatic-scaling.webp"
    darkImage="/img/gui/automatic-scaling.webp"
    alt="Automatic Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

### CPU mode

#### Shared

Your application gets a full physical CPU core, but it is shared with up to 10 other applications. In this mode the power your application gets is depended on other applications running on the same CPU core. At best case scenario your application gets 10/10 of CPU core power and 1/10 at worst case scenario.

#### Dedicated

The CPU core is dedicated to your application.

:::info
See the [pricing](https://zerops.io/#pricing) for the difference between CPU modes.
:::

The CPU mode doesn't change automatically.

### Vertical auto scaling

Vertical auto scaling has following default configuration:

<ResourceTable />

Rust service always starts with the minimal resources.

For most cases, the default parameters will work without issues. If you need to limit the cost of the Rust service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Rust performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::tip
Learn more about how to [fine tune](fine-tune-the-auto-scaling) the auto scaling to fit your application needs.
:::

### Horizontal auto scaling

When a container needs more CPU or RAM but already consumes maximal resources defined for the vertical auto scaling, Zerops will add a new container to your Rust service. When your Rust service doesn't need so much power and all containers are vertically scaled down in such a way their CPU allocation is near the minimal resources, Zerops will gradually remove whole containers.

Horizontal auto scaling has following default configuration:

<table className="w-full my-1.5">
  <tbody>
    <tr>
      <td className="w-fit">
        <b>minimum containers</b>
      </td>
      <td className="w-fit">1</td>
    </tr>
    <tr>
      <td className="w-fit">
        <b>maximum containers</b>
      </td>
      <td className="w-fit">6</td>
    </tr>
  </tbody>
</table>

Rust service always starts with the minimum number of containers.

You can increase the minimum or decrease the maximum number of containers. The horizontal scaling parameters can be changed later.

### Single container vs. High Availability

When creating a new runtime service, you can choose the minimum and maximum number of containers. If you set the maximum limit to one, the service will be run in a **single container** and no horizontal scaling will occur.

:::caution
If the single container fails, Zerops will start a new container and deploy your application automatically. The application won't be available for a short period. This mode is recommended for non-critical applications or dev environments.
:::

By increasing the maximum number of containers for your service, you enable horizontal auto scaling. Zerops will then add containers depending on your application’s load. Application running on two or more containers is in **High Availability** mode, which we highly recommend for production. When the load drops, containers will be gradually removed to the defined minimum.

Each container of the same service is strictly installed on a **different server**. This prevents the temporary outage in case any of Zerops servers fail. If the connection to a container is broken, Zerops immediately redirects incoming traffic to other containers. A new container will be started automatically and the broken container will be deleted.

:::caution
Check if your application is ready to be run in multiple containers.
:::

## Fine-tune the auto scaling

### Advanced CPU settings

If you've experienced problems with not enough power when your application starts, increase the default Start CPU core count. Alternatively switch the [CPU mode](#cpu-mode) to dedicated to allocate the stable CPU power to your application.

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling5.png"
    darkImage="/img/screenshots/scaling5.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

If your application doesn't need so much power after it is started, Zerops will scale down the allocated CPU cores to the defined minimum.

You can disable the CPU vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the RAM and Disk scaling. Zerops scales each hardware resource independently.

### Advanced RAM settings

By default Zerops keeps a minimum free RAM in each container. This setting will ensure that most applications will run smoothly. Zerops monitors the minimum free RAM every 10 seconds.

But if your application need a more memory faster or if you have experienced problems with insufficient memory or even restarts due to Out Of Memory (OOM) errors, we recommend

1. Increasing the minimum RAM for the auto scaling
2. or increasing the minimum free RAM in GB
3. or setting the minimum free RAM in % of the RAM assigned to the container

<p align="center">
  <Image
    lightImage="/img/screenshots/scaling6.png"
    darkImage="/img/screenshots/scaling6.png"
    alt="Scaling"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

You can set the minimum free RAM both in GB and in percent, Zerops will apply the larger value based on the current RAM assigned to the container.

You can disable the RAM vertical auto scaling by setting the minimum and maximum to the same value. This setting doesn't affect the CPU core and Disk scaling. Zerops scales each hardware resource independently.

## Technical details

### Automatic scale up

Zerops monitors CPU, RAM and Disk usage in all running containers each 10 seconds.
The **scale up threshold** is derived from following **minimum free resources**:

- 0.1 CPU core
- 0.125 GB RAM (You can [fine tune](#fine-tune-the-auto-scaling) this setting)
- 0.5 GB disk

If the minimum free CPU, RAM or disk usage of a container is lower than the defined scale up threshold, Zerops scales the container up.

The scale up of RAM or disk is immediate. The scale up of CPU is configured to be a little less aggressive. Two consecutive measurements of free CPU with values under the scale up threshold are required to trigger the scale up. This rule prevents excessive fluctuations of scaling up and down due to sudden changes in CPU usage.

The **minimum step** for the vertical scaling is

- 1 CPU core
- 0.125 GB RAM
- 0.5 GB disk

When the application is under a heavy load and needs to scale up faster, the scaling step will increase automatically.

Maximal resources are defined for each Rust service. Zerops will never scale above the entered values. If your application is in [highly available mode], maximal resources are identical for all containers of the Rust service.

### Not enough resources to scale up

If one of the Rust containers needs more resources but there are not enough of them on the underlying machine, a new container with the required hardware resources will be started on another machine. When the new container is ready, it will be added to the service balancer. The old container will be removed from the balancer and deleted.

### Automatic scale down

When the application no longer needs as much power or disk space, each container is gradually scaled down to the defined minimum. The automatic scale down is configured to be more cautious and defensive to prevent the application from scaling up and down rapidly.

Consecutive measurements during:

- 1 minute for CPU
- 2 minutes for RAM
- 5 minutes for disk

with free resources safely above the minimum threshold are required to scale down the appropriate resource.

The minimum step for the scale down is identical to the minimum step for scale up. When several scale down events are triggered in a short period of time, the scaling step increases automatically.

### Horizontal autoscaling

Zerops prefers vertical scaling over horizontal scaling because vertical scaling is faster and allows finer adjustment to the required performance. Horizontal scaling can be disabled by setting the same number for the minimum and maximum container count. Zerops will then scale the Rust service only vertically.

Your application is created with the defined minimum number of containers. Zerops will add a new container when any of the service's containers reaches the maximum limit for vertical scaling for CPU cores or RAM. Zerops doesn't start a new container when the maximum disk space is reached. No more containers are added when the defined maximum container limit is reached.

The new container is started with a minimum disk size and with an average CPU cores and RAM of the existing containers.

By customising the vertical auto scaling limits, you can cause the horizontal scaling to start earlier. For example if you lower the vertical auto scaling maximum to 1 CPU core, Zerops will start a new container if some of the running containers are using the whole CPU core for more than 20 seconds.

If the application no longer needs as much power, Zerops will gradually remove containers to the defined minimum count. The container is removed after its CPU cores are scaled down to the defined minimum and the free CPU is safely above the minimum threshold for vertical scaling. Zerops only **removes containers** with a minimum **15 minute lifetime**.

## Monitor Rust resources

Zerops provides information about how much hardware resources the Rust service is currently using. Go to the service detail in Zerops GUI and select **Service dashboard & runtime containers** in the left menu. Zerops also provides the history of resource usage.



Zerops provides [shared storage service](/shared-storage/overview) that can be connected to runtime services. Shared storage enables your runtime service to share files between all containers of the same service or even among containers of different runtime services.

## Connect a shared storage in Zerops GUI

Connect your Rust service directly when creating a new shared storage service. Just select your Rust service in the **Share with Services** block on the **Add new shared storage service** page.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_1.png)

To connect the existing shared storage to the Rust service, go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Select a runtime service and the shared storage will be connected to the selected runtime.

![connect_shared_storage_1](/img/screenshots/connect_shared_storage_2.png)

Zerops will create a new folder `/mnt/[shared storage name]`` in the runtime root folder. E.g. `/mnt/teststorage`for a`teststorage` shared storage. The content of this folder is shared among all containers of the runtime service you've selected. If you select multiple runtimes, the content of the folder will be shared among all containers of selected services.

## Disconnect a shared storage in Zerops GUI

Go to the shared storage service detail and select **Shared storage connections**. A list of all your current runtime services will be shown. Switch off the toggle to disconnect the shared storage from the selected runtime.

:::note
Your runtime service will be automatically restarted when a shared storage is disconnected.
:::

## Create Rust service with a shared storage using zCLI

zCLI is the Zerops command-line tool. To create a new Rust service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. [Create a project description file](/rust/how-to/shared-storage#create-a-project-description-file)
3. [Create a project with a Rust service and a shared storage](/rust/how-to/shared-storage#create-a-project-with-a-rust-service-and-a-shared-storage)

### Create a project description file

Zerops uses a yaml format to describe the project infrastructure.

#### description.yaml format

[Read the basics](/rust/how-to/create#create-a-project-description-file) how to define the Rust service using the description.yaml.

#### Example with a shared storage

Create a directory `my-project`. Create an `description.yaml` file inside the `my-project` directory with following content:

```yaml
# basic project data
project:
  # project name
  name: my-project

  # optional: project description
  description: A project with a Rust and a shared storage

  # optional: project tags
  tags:
    - DEMO
    - ZEROPS

# array of project services
services:
  - # service name
    hostname: teststorage

    # shared storage service has no version
    type: shared-storage

    # mode: HA / NON_HA
    mode: NON_HA

  - # service name
    hostname: app

    # service type and version number in rust@{version} format
    type: rust@latest

    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.
    minContainers: 2

    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.
    maxContainers: 4

    # Mount the shared storage to the Rust service
    mount:
      - teststorage
```

The mount attribute accepts an array of shared storage names you want to mount to your runtime service.

### Create a project with a Rust service and a shared storage

Follow the article [How to create a project based on the description.yaml](/rust/how-to/create#create-a-project-based-on-the-descriptionyaml).




<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/step-1.webp"
    darkImage="/img/mind-maps/build-deploy/step-1-dark.webp"
    alt="build deploy pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

## Automatic builds and deploys from GitHub or GitLab

Integrate Zerops to your GitHub or GitLab repository and configure the automatic builds and deploys.

Follow these steps:

1. Add [zerops.yaml](/rust/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository.
2. Connect your GitHub repository or connect your GitLab repository

Then each time you create a new tag or push to a specific branch, depending on the configuration, GitHub or GitLab will initiate a new build & deploy pipeline.

<p align="center">
  <Image
    lightImage="/img/gui/github-integration.webp"
    darkImage="/img/gui/github-integration.webp"
    alt="github integration"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

### Skip the automatic pipeline once

To ensure that a pipeline is not triggered by your next push, add `[ci skip]` or `[skip ci]` to the commit message. It is case insensitive.

:::note
You will still see a successful delivery of a webhook in your Github/Gitlab repository as a webhook is actually triggered, but with no action.
:::

## Manual builds and deploys using Zerops CLI

<p align="center">
  <Image
    lightImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    darkImage="/img/mind-maps/build-deploy/manual-deploy.webp"
    alt="Manual Deploy Pipeline"
    style={{ width: '95%', height: 'auto' }}
  />
</p>

To start a new build & deploy pipeline manually, use the Zerops CLI.

Follow these steps:

1. Add <a href="/rust/how-to/build-pipeline#add-zeropsyaml-to-your-repository">`zerops.yaml`</a> to your repository.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli push` command.

The `zcli push` command uploads your application code, builds and deploys your application in Zerops.

The command triggers the [build pipeline](/rust/how-to/trigger-pipeline) defined in `zerops.yaml`. `zerops.yaml` must be in the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

zCLI uploads all files and subdirectories of the working directory to Zerops and starts the build pipeline. If the `.gitignore` file is found, it is interpreted and the defined files and folders will be ignored.

If you just want to deploy your application to Zerops, use the [zcli deploy](#manual-deploy-using-zerops-cli) command instead.

#### Push command parameters

```sh
Usage:
  zcli push [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.
  -h, --help                     the service push command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

zCLI commands are interactive, when you press enter after `zcli push`, you will be given a list of your projects to choose from.

:::info
You can change the build and deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your repository.
:::

## Manual deploy using Zerops CLI

To start only a deploy pipeline, use the Zerops CLI.

Follow these steps:

1. Add [zerops.yaml](/rust/how-to/build-pipeline#add-zeropsyaml-to-your-repository) to your repository. Omit the build section.
2. [Install & setup zCLI](/references/cli) the Zerops command line tool.
3. Run `zcli service deploy` command.

The `zcli service deploy` command uploads your application and deploys it in Zerops. Use this tool if you have your own build process. If you want to build your application in Zerops, use an [automatic](#automatic-builds-and-deploys-from-github-or-gitlab) or [manual](#manual-builds-and-deploys-using-zerops-cli) build process.

#### Deploy command parameters

```sh
Usage:
  zcli service deploy pathToFileOrDir [flags]

Flags:
      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative
                                 to the working directory. By default, no archive is created.
      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
  -h, --help                     the service deploy command.
      --projectId string         If you have access to more than one project, you must specify the project ID for which the
                                 command is to be executed.
      --serviceId string         If you have access to more than one service, you must specify the service ID for which the
                                 command is to be executed.
      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.
      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default "./")
      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI
                                 looks for zerops.yaml in the working directory.
```

`pathToFileOrDir` defines a path to one or more directories and/or files relative to the working directory. The working directory is by default the current directory and can be changed using the <br/>`--workingDir` flag.

`zerops.yaml` must be placed in the working directory.

:::info
You can change the deploy pipeline when you need to. Just simply modify the `zerops.yaml` in your working directory.
:::



You can upgrade or downgrade your Rust service to a different major Rust version by setting the <a href="/rust/how-to/build-pipeline#base-1">`run.base`</a> parameter in your `zerops.yaml`. When you [trigger a new pipeline](/rust/how-to/trigger-pipeline), Zerops will start new runtime container(s) with the required Rust version. If you don't specify the `run.base` attribute in your `zerops.yaml`, Zerops keeps the current Rust version for your runtime.

If you want to build your application with a different major Rust version, change the <a href="/rust/how-to/build-pipeline#base">`build.base`</a> parameter in your `zerops.yaml`. The `build.base` is the required attribute.




[Rust ↗](https://www.rust-lang.org/) - a language empowering everyone to build reliable and efficient software.


As said, there is no need for coding yet, we have created a [Github repository ↗](https://github.com/zeropsio/recipe-rust-hello-world), a **_recipe_**, containing the most simple Rust web application. The repo will be used as a source from which the app will be built.

<CustomCard title="Feel free to deploy the recipe yourself" emoji="🚀">
  This is the most bare-bones example of Rust running on Zerops — as few libraries as possible,
  just a simple endpoint with connect, read and write to a Zerops PostgreSQL database.

  <DeployButton link="rust" badgeWidth="200" />
</CustomCard>

1. Log in/sign up to [Zerops GUI ↗](https://app.zerops.io)
2. In the **Projects** box click on **Import a project** and paste in the following YAML config ([source ↗](https://github.com/zeropsio/recipe-rust-hello-world/blob/main/import-project/description.yaml)):

```yaml
project:
  name: my-first-project
services:
  - hostname: helloworld
    type: rust@latest
    minContainers: 1
    maxContainers: 3
    buildFromGit: https://github.com/zeropsio/recipe-rust-hello-world@main
    enableSubdomainAccess: true
```

3. Click on **Import project** and wait until all pipelines have finished.

**That's it, your application is now up and running! :star: Let's check it works:**

1. A _subdomain_ should have been enabled and visible in the project's **IP addressed & Public Routing Overview** box. Its format should look similar to this `https://helloworld-24-8080.prg1.zerops.app`.
2. Click or the `subdomain` URL to open it in a browser and you should see

```
Hello, World!
```

:::tip
Do you have any questions? Check the step-by-step tutorial, browse the documentation and join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.
:::


## How to start

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/rust/getting-started',
      label: 'New to Zerops?',
      customProps: {
        icon: Icons['rocket-launch'],
        description: 'Learn the basics by following a simple example.',
      },
    },
    {
      type: 'link',
      href: '/rust/how-to/create',
      label: 'Care for details?',
      customProps: {
        icon: Icons['academic-cap-solid'],
        description:
          'Dive in all Zerops has to offer for your Rust application.',
      },
    },
  ]}
/>

## Feature Highlights

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/rust/how-to/create',
      label: 'Create Rust service',
      customProps: {
        icon: Icons['rust'],
        description: 'Start with creating a Rust service using GUI or zCLI.',
      },
    },
    {
      type: 'link',
      href: '/rust/how-to/build-pipeline#add-zeropsyaml-to-your-repository',
      label: 'zerops.yaml',
      customProps: {
        icon: Icons['puzzle'],
        description:
          'See a full example of zerops.yaml file to create your own app.',
      },
    },
    {
      type: 'link',
      href: '/rust/how-to/scaling',
      label: 'Scaling configuration',
      customProps: {
        icon: Icons['adjustments'],
        description:
          'Set up scaling of your Rust application so that it runs smoothly while using only necessary resources.',
      },
    },
  ]}
/>

{" "}

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/rust/how-to/build-process#customize-rust-build-environment',
      label: 'Customize build environment',
      customProps: {
        icon: Icons['sparkles'],
      },
    },
    {
      type: 'link',
      href: '/rust/how-to/customize-runtime',
      label: 'Customize runtime environment',
      customProps: {
        icon: Icons['sparkles-solid'],
      },
    },
  ]}
/>

## When in doubt, reach out

Don't know how to start or got stuck during the process? You might not be the first one, visit the FAQ section to find out.

In case you haven't found an answer (and also if you have), we and our community are looking forward to hearing from you on Discord.

Have you build something that others might find useful? Don't hesitate to share your knowledge!

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/rust/faq',
      label: 'FAQ',
      customProps: {
        icon: Icons['chat-bubble-left-right'],
        description: 'Most common questions in one place.',
      },
    },
    {
      type: 'link',
      href: 'https://discord.com/invite/WDvCZ54',
      label: 'Discord',
      customProps: {
        icon: Icons['discord'],
        description:
          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',
      },
    },
  ]}
/>

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>



Zerops provides built-in backup functionality for your Shared Storage service. For general information about configuring backups, viewing backup files, limits, and security, please refer to the [general backup documentation](/features/backup).

Shared Storage backups on Zerops:
- Are stored as tarballs containing the entire contents of the shared storage directory (`/mnt/<volume>`)
- Can be managed through the Shared Storage service detail page under **Backups List & Configuration**

### Storage Optimization

For large Shared Storage volumes:
- Be mindful of the [project backup limits](/features/backup#limits) (25 GiB total backup volume per project)
- Consider adjusting your backup frequency for optimal storage usage
- Regularly clean up unnecessary files from your Shared Storage to reduce backup size



This page covers how to connect an existing shared storage to runtime services and how to disconnect services when needed.

## In Zerops GUI

### Connect a new shared storage

When creating a new shared storage service, you can directly select which runtime services it should be connected to. See [Create Shared Storage](/shared-storage/how-to/create) for details about the creation process.

### Connect an existing shared storage

For existing storage, go to the shared storage service detail page and select **Shared storage connections**. Toggle ON any runtime services you wish to connect to this storage.

<p align="center">
  <img
    src="/img/screenshots/connect_shared_storage_1.png"
    alt="Connecting shared storage during creation"
    width="90%"
    height="auto"
  />
</p>

## Disconnect a shared storage in Zerops GUI

To disconnect storage, access the shared storage service detail page, select **Shared storage connections**, and toggle OFF the desired runtime service.

{/*
## Connect using zsc

Connect shared storage from the command line with the `zsc connectSharedStorage` command. Specify one or more storage names as parameters:

```sh
zsc connectSharedStorage sharedstorage0
zsc connectSharedStorage sharedDisk secondDisk
```

Run this command from within your runtime container via web terminal, SSH, or in your `zerops.yaml` file. For more details, see the [Zerops Setup Control documentation](/references/zsc).*/}



Shared Storage provides persistent file storage that can be mounted as a POSIX-compatible filesystem to your runtime services. Built on [SeaweedFS ↗](https://github.com/seaweedfs/seaweedfs), it enables reliable data persistence and sharing across services in your infrastructure.

## Create Using Zerops GUI

First, set up a project in Zerops GUI and add a runtime service. Then go to the project dashboard page and choose **Add new service** in the left menu in the **Services** block. Then add a new Shared Storage service:

<Video
  src="/vids/services/shared-storage.webm"
  type="video/webm"
/>

### Set a Hostname

Enter a unique service identifier like "storage", "files" etc. Duplicate services with the same name in the same project are forbidden.

#### Hostname Limitations:

- Maximum 25 characters
- Must contain only lowercase ASCII letters (a-z) or numbers (0-9)

:::note
The hostname is fixed after the service is created. It can't be changed later.
:::

### Connect to Services

Select one or more project's runtime services in the Share with Services block:

<p align="center">
  <img
    src="/img/screenshots/connect_shared_storage.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

The new Shared Storage will be connected to the selected runtimes.

:::note
Runtime services can be connected and disconnected at any time even after the shared storage is created.
:::

### Choose Deployment Mode

Choose between **Highly Available** (recommended for production) or **Single Container** (suitable for development) deployment.

:::warning
The Shared Storage deployment mode is fixed after the service is created. It can't be changed later.

See [Technical Details](/shared-storage/technical-details#deployment-modes) for more information about deployment modes.
:::

### Set Auto Scaling Configuration

Configure vertical auto scaling parameters to control resource allocation and costs.

<p align="center">
  <img
    src="/img/screenshots/shared_storage_autoscaling.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

:::note
For detailed information about auto scaling capabilities and recommendations, see [Technical Details](/shared-storage/technical-details#auto-scaling-configuration).
:::

## Create Using zCLI

zCLI is the Zerops command-line tool. To create a new Shared Storage service via the command-line, follow these steps:

1. [Install & setup zCLI](/references/cli)
2. Create a project description file
3. Create a project with a runtime and a Shared Storage service

### Choose Your Runtime

<GroupCards heading="Read about how to create a project description file and create a runtime service with a Shared storage." items={languages} />

export const languages = [
    { name: "Node.js", link: "/nodejs/how-to/shared-storage#create-nodejs-service-with-a-shared-storage-using-zcli" },
    { name: "PHP", link: "/php/how-to/shared-storage#create-php-service-with-a-shared-storage-using-zcli" },
    { name: "Python", link: "/python/how-to/shared-storage#create-python-service-with-a-shared-storage-using-zcli" },
    { name: "Go", link: "/go/how-to/shared-storage#create-go-service-with-a-shared-storage-using-zcli" },
    { name: ".NET", link: "/dotnet/how-to/shared-storage#create-dotnet-service-with-a-shared-storage-using-zcli" },
    { name: "Rust", link: "/rust/how-to/shared-storage#create-rust-service-with-a-shared-storage-using-zcli" }
]


Zerops Shared Storage provides several web interfaces to manage, monitor, and troubleshoot your storage. These interfaces are accessible through the [Zerops VPN](/references/vpn) and offer different capabilities for managing your data and monitoring system performance.

## Access Web Interfaces

### Filer UI

* `http://<storage-service-hostname>.zerops:8888`

The Filer UI provides a web-based interface for managing files and directories in your Shared Storage:
- Browse the directory structure and create new directories
- Upload new files (up to 64MB) and download existing files
- Rename and delete files and directories

### Master UI
* `http://node-stable-1.db.<storage-service-hostname>.zerops:9333`

The Master UI provides system status and monitoring information:

- View cluster topology
- Monitor volume servers
- Check system status and health
- View statistics and metrics

### Volume UI

* `http://node-stable-<node-number>.db.<storage-service-hostname>.zerops:8080/ui/index.html`

The Volume UI allows you to monitor individual storage volumes:

- View volume status
- Check disk usage
- Monitor I/O operations
- View volume statistics

## Monitoring

Several options are available to help you monitor your Shared Storage:

### Runtime Service Logs
* Navigate to your runtime service detail page → **Runtime Logs** section → filter using the tag `zerops-mount-<service-hostname>`

### Shared Storage Logs
* Access from the Shared Storage service detail page → **Runtime Logs** tab → browse or search for relevant information

### System and Volume Status
* Monitor replication status, disk usage, and performance metrics through the Master UI and Volume UI



Once a Shared Storage is [connected](/shared-storage/how-to/connect) to a runtime service, Zerops will create a new folder `/mnt/[shared storage name]` in the runtime service's filesystem.

For example, `/mnt/teststorage` for a `teststorage` Shared Storage:

<p align="center">
  <img
    src="/img/screenshots/connect_shared_storage_2.png"
    alt="image"
    width="100%"
    height="auto"
  />
</p>

:::note
The content of this folder is shared among all containers of the connected runtime service.

If you connect multiple runtimes, the content of the folder will be shared among all containers of these services.
:::

## Mount Points and Multiple Volumes

- Multiple storage volumes can be mounted to a single service (e.g., `/mnt/files1`, `/mnt/files2`, etc.)
- Shared storage mount is only available in runtime containers, not during build and prepare runtime phases
- All filesystem operations are automatically logged to runtime logs

For technical details about mount behavior and filesystem capabilities, see the [Technical Details](/shared-storage/technical-details#mount-integration) page.

## Use Cases

Shared Storage is ideal for:

- **Persistent filesystem-based databases**: SQLite, Prometheus DB, etc.
- **Configuration sharing**: Deploy configurations once and share across multiple services
  - Example: Deploy Apache Airflow configurations and DAG files once and share with all worker nodes
- **Alternative to object storage**: For applications that require filesystem semantics rather than object storage
- **Application data**: Store and serve images, documents, and other assets

## Performance Considerations

When using Shared Storage, keep in mind:

- For write-heavy workloads, consider batching operations
- Minimize operations with many small files for better performance

For more detailed information about performance constraints and limitations, see the [Technical Details](/shared-storage/technical-details#performance-considerations) page.

## Troubleshooting

### Common Issues

- The `df` command may show incorrect or misleading information when used with shared storage mounts. Please refer to the Zerops GUI for accurate storage metrics.



# Shared Storage

Zerops provides a fully managed and scaled **Shared Storage** service, which can be mounted to your runtime services. It offers:
- Persistent file sharing between containers of the same service or different services
- Standard filesystem operations through a POSIX-compatible interface
- Built-in high-availability configuration

## Documentation Sections

<DocCardList
  colSize={4}
  items={[
    {
      type: 'link',
      href: '/shared-storage/how-to/connect',
      label: 'Connect to Services',
      customProps: {
        icon: Icons['link'],
        description: 'Connect your Shared Storage to runtime services.',
      },
    },
    {
      type: 'link',
      href: '/shared-storage/how-to/use',
      label: 'Usage & Limitations',
      customProps: {
        icon: Icons['chart-bar'],
        description: 'Learn how to save and access data, along with use cases and technical limits.',
      },
    },
    {
      type: 'link',
      href: '/shared-storage/how-to/manage',
      label: 'Management & Access',
      customProps: {
        icon: Icons['tools'],
        description: 'Access UI components and troubleshoot common issues.',
      },
    },
    {
      type: 'link',
      href: '/shared-storage/how-to/backup',
      label: 'Backups',
      customProps: {
        icon: Icons['archive-box'],
        description: 'Configure automatic backups of your data.',
      },
    },
    {
      type: 'link',
      href: '/shared-storage/tech-details',
      label: 'Technical Details',
      customProps: {
        icon: Icons['document-text'],
        description: 'Explore the technical architecture and deployment options.',
      },
    },
  ]}
/>

*Need help? Join our [Discord community](https://discord.gg/zeropsio).*

## Popular Guides

<DocCardList
  colSize={6}
  items={[
    {
      type: 'link',
      href: '/references/cli',
      label: 'zCLI',
      customProps: {
        icon: Icons['command-line'],
        description:
          'Get even more out of Zerops with the zCLI command line tool.',
      },
    },
    {
      type: 'link',
      href: '/references/vpn',
      label: 'Zerops VPN',
      customProps: {
        icon: Icons['globe-europe'],
        description: 'Connect to your services easily with Zerops VPN.',
      },
    },
  ]}
/>



Zerops Shared Storage is built on [SeaweedFS](https://github.com/seaweedfs/seaweedfs), a distributed filesystem optimized for high-volume storage with efficient retrieval.

## Architecture

Shared Storage consists of three main components:
- **Master Server**: Manages metadata and coordinates volume servers
- **Volume Servers**: Store the actual file data
- **Filer**: Provides a POSIX-compatible interface for file operations

An **automatic vacuum process** helps maintain optimal storage performance by reclaiming space from deleted files. This process is triggered when the size of deleted content exceeds 15% (reduced from the default 30%).

### Mount Integration

When connected to a runtime service:
- Storage is mounted at `/mnt/<storage-hostname>`
- Mount point is owned by the `zerops` user and group (no sudo required)
- All filesystem operations are logged to runtime logs (tagged as `zerops-mount-<service-hostname>`)
- Mounting will overwrite any existing content in the mount directory
- Shared storage mount is only available in runtime containers, not during build and prepare runtime phases

## Deployment Modes

Zerops provides Shared Storage in two deployment modes:

### Highly Available

Recommended for production environments where data reliability is critical.

- **Architecture**: 2 volume servers with the master located on one of them
- **Data Durability**: Data and filer metadata are replicated 1:1 across nodes
- **Fault Tolerance**:
    - If a node fails, an automatic repair process begins
    - A new container replaces the failed one
    - Data is automatically replicated to the new container (duration depends on data size)
    - During master node failure, mounted directories become temporarily unavailable until the new master initializes (~30s)

### Single Container

Suitable for development environments or non-critical data storage.

- **Architecture**: Master, volume, and filer server all located on a single container
- **Data Durability**: All data is lost if the container fails
- **Recommended For**: Development environments or temporary data storage

:::warning
The deployment mode is fixed after the service is created and cannot be changed later.
:::

## Filesystem Capabilities

Shared Storage supports standard POSIX filesystem operations:

- Create, read, update, and delete files and directories
- Set permissions (with some limitations)
- Standard file locking operations
- Hard and symbolic links
- Directory listing and traversal

For a complete list of supported features, see the [SeaweedFS FUSE documentation](https://github.com/seaweedfs/seaweedfs/wiki/FUSE-Mount#supported-features).

## Resource Constraints

### Storage Limits

- Maximum storage space: 60GB (can be increased via support request)
- Maximum file size: Unlimited within the 60GB total storage constraint
- Maximum upload size via Filer UI: 64MB

### Memory Usage

- Base memory consumption: ~60MB when idle
- Peak memory usage: ~150MB under higher filesystem loads
- Optimized for low RAM usage (may trade off some performance)

### Performance Considerations

- **Latency**: Higher latency compared to local storage due to network-based distributed architecture
- **Write Performance**: For write-heavy workloads, consider batching operations
- **Small Files**: Minimize operations with many small files for better performance

## Auto Scaling Configuration

Zerops scales Shared Storage services automatically by raising or lowering the hardware resources of each database container.

Vertical auto scaling has the following default configuration:

<ResourceTable resources={{
  ram: {
    min: '0.5 GB',
  },
  disk: {
      min: '5 GB'
      }
}} />

For most cases, the default parameters will work without issues. If you need to limit the cost of the Shared Storage service, lower the maximal resources. Zerops will never scale above the selected maximums.

When you are experiencing problems with insufficient Shared Storage performance or capacity, increase the minimal resources. Zerops will never scale below the selected minimums.

:::note
You can change the auto scaling parameters later.
:::



The Static service provides a streamlined way to serve static content through a pre-configured Nginx setup. It's designed to be simple to use while maintaining the flexibility needed for modern web applications.

<CustomCard title="Experience the simplicity of Zerops">
  Deploy an Analog app with static hosting in seconds. All you need is a Zerops account.

  <DeployButton link="analog" badgeWidth="200" />
</CustomCard>

## Quick Start

Add a Static service to your project by including this in your `zerops.yaml`:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    run:
      os: alpine
      base: static
```

The Static service comes with sensible defaults that work out of the box for most SPAs and static websites. By default, without any `routing` configuration, the service will:
1. Try to serve the exact path (`$uri`)
2. Try with .html extension (`$uri.html`)
3. Look for an index.html in the directory (`$uri/index.html`)
4. Fall back to `/index.html`
5. Return 404 if none of the above exist

:::note Zero Configuration for SPAs
This means for basic SPA deployments or static file hosting, you don't need to specify any redirects at all!
:::

## Routing Configuration

The Static service allows you to configure URL routing and redirects through a simple YAML configuration, abstracting away the complexity of Nginx configuration.

### Basic Structure

Configure routing in the `run.routing` section of your `zerops.yaml`:

```yaml title="zerops.yaml"
run:
  routing:
    redirects:
      - from: /*
        to: /index.html
        status: 302
```

### Redirect Types

#### Relative Redirects

Use relative redirects to route paths within your application. When both `from` and `to` are relative paths, you can omit the `status` code to create a masked redirect that shows the content of the target page while preserving the original URL:

```yaml title="zerops.yaml"
routing:
  redirects:
    # Masked redirect - URL stays the same but shows content from index.html
    - from: /*
      to: /index.html

    # Standard redirect with status code
    - from: /old-page
      to: /new-page
      status: 301

    # Preserve the path when redirecting between directories
    - from: /blog/*
      to: /articles/
      preservePath: true
      status: 302

    # Preserve both path and query parameters
    - from: /posts/*
      to: /blog/
      preservePath: true
      preserveQuery: true
      status: 302
```

:::caution Important
When using `preservePath` with wildcards, ensure the `to` path ends with a `/` to maintain proper path concatenation. For example, `/blog/*` to `/new-blog/` will correctly redirect `/blog/hello.html` to `/new-blog/hello.html`, while `/new-blog` would result in `/new-bloghello.html`.
:::

#### Absolute Redirects

For redirecting between domains or to external URLs, use absolute redirects by including `http://` or `https://`. When using absolute URLs in either `from` or `to`, you must specify a `status` code:

```yaml title="zerops.yaml"
routing:
  redirects:
    # Redirect an old domain to a new one
    - from: https://old-domain.com/*
      to: https://new-domain.com
      status: 301
      preserveQuery: true  # Optional: maintain query parameters

    # Redirect with path preservation
    - from: https://old-site.com/*
      to: https://new-site.com/
      status: 301
      preservePath: true
```

### Advanced Routing Features

#### Wildcard Matching

Use `*` as a wildcard in your paths:
- **At the end of a path**: Matches any subsequent content
- **At the start of a domain** (after `https://`): Enables regex matching for subdomains

Example of complex domain management:

```yaml title="zerops.yaml"
run:
  routing:
    redirects:
      # Redirect a specific domain to an article
      - from: https://promo-domain.com/*
        to: https://main-site.com/special-offer
        status: 302

      # Redirect all subdomains to main site
      - from: https://*.old-domain.com/*
        to: https://main-site.com
        status: 302
```

#### Matching Priority

When multiple redirects are configured, they follow Nginx's matching priority system:

1. Exact matches are checked first
2. Simple path matches (without wildcards) are checked next
3. Pattern matches (with wildcards) are checked last, in the order they appear in your configuration

For example:

```yaml title="zerops.yaml"
routing:
  redirects:
    # Exact match for homepage - standard redirect
    - from: /
      to: /home
      status: 302

    # Simple path match - masked redirect
    - from: /about
      to: /about-us

    # Pattern match with path preservation
    - from: /blog/*
      to: /articles/
      preservePath: true
      status: 302

    # Catch-all pattern - masked redirect for SPA
    - from: /*
      to: /index.html
```

In this configuration:
- `/` will redirect to `/home` with a 302 status
- `/about` will show content from `/about-us` but keep the URL as `/about`
- `/blog/post-123.html` will redirect to `/articles/post-123.html`
- Any other path will show the content from `/index.html` while preserving the original URL (common for SPAs)

## Prerender Integration

The Static service includes built-in support for Prerender.io, making it easy to implement server-side rendering for search engines and social media crawlers.

### Basic Prerender Setup

1. Set the `PRERENDER_TOKEN` secret variable with your Prerender.io token
2. The service automatically configures necessary rewrites based on user agents

### Custom Prerender Host

If you're using a custom Prerender host, add it to environment variables in `zerops.yaml`:

```yaml
run:
  envVariables:
  - PRERENDER_HOST=your.prerender.host
```

:::note Default
The default host is `service.prerender.io` if not specified.
:::

## Advanced Configuration

### Switching to Full Nginx

If you need more control over your Nginx configuration:

1. Go to your Static service overview in the UI
2. Click the three vertical dots in the left panel
3. Select **Need to switch to full Nginx service?**
4. Copy the generated Nginx configuration
5. Use this configuration as a starting point for a full Nginx service

:::tip
This allows you to graduate to a more customizable setup while maintaining your existing routing logic.
:::

## Best Practices

1. **SPA Configuration**
   ```yaml title="zerops.yaml"
   routing:
     redirects:
       - from: /*
         to: /index.html
         status: 302
   ```
   Use this configuration for Single Page Applications to ensure all routes are handled by your application.

2. **Domain Migration**
   ```yaml title="zerops.yaml"
   routing:
     redirects:
       - from: https://old-domain.com/*
         to: https://new-domain.com
         status: 301
   ```
   Use permanent (301) redirects when permanently moving content to maintain SEO value.

3. **Complex Redirects**
   Order your redirects from most specific to most general to ensure proper routing:
   ```yaml title="zerops.yaml"
   routing:
     redirects:
       - from: /specific-path/*
         to: /specific-landing
         status: 302
       - from: /*
         to: /index.html
         status: 302
   ```

## Frontend Framework Integration

The Static service seamlessly integrates with modern frontend frameworks. It can serve built static files from any framework while maintaining the option to add custom routing and Prerender.io integration if needed.

### Example: Analog App Deployment

Here's a simple configuration for deploying an [Analog application](https://github.com/zeropsio/recipe-analog-static):

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      base: nodejs@20
      buildCommands:
        - pnpm i
        - pnpm build
      deployFiles:
        - dist/analog/public/~
    run:
      base: static
```

This configuration:
1. Uses Node.js 20 for building the application
2. Installs dependencies with pnpm
3. Builds the application
4. Deploys the resulting static files to the Static service

You can enhance this basic setup by adding:
- Custom redirects for URL management
- Prerender.io integration for SEO
- Additional routing rules as needed

## Common Configurations

### Multiple Domain Management
```yaml title="zerops.yaml"
run:
  routing:
    redirects:
      # Product-specific domain
      - from: https://product-promo.com/*
        to: https://main-site.com/products
        status: 302

      # Campaign domain
      - from: https://special-offer.com/*
        to: https://main-site.com/campaign
        status: 302

      # Legacy domains and subdomains
      - from: https://*.legacy-domain.com/*
        to: https://main-site.com
        status: 302
```

### Development Setup
```yaml title="zerops.yaml"
run:
  routing:
    redirects:
      # API requests
      - from: /api/*
        to: https://api.your-domain.com
        status: 302

      # SPA fallback
      - from: /*
        to: /index.html
        status: 302
```



Zerops provides a fully managed [Typesense search engine](https://typesense.org/) service that combines developer productivity with enterprise-grade reliability. The platform handles infrastructure complexity through automated deployment, scaling, and maintenance while providing developers full access to Typesense's native capabilities.

## Supported Versions

Currently supported Typesense version:
<UnorderedList data={data.typesense.readable}/>

Import configuration version:
<UnorderedCodeList data={data.typesense.import}/>

## Service Configuration

Our Typesense implementation comes with carefully tuned defaults that diverge from the [standard Typesense configuration](https://typesense.org/docs/27.1/api/server-configuration.html#using-command-line-arguments) in the following ways:

```yaml
thread-pool-size: 16
num-collections-parallel-load: 8
```

These defaults are optimized for most common use cases and managed by the platform. If you need to adjust these settings, please contact us through our [support channels](#support).

### Data Persistence

Typesense data is automatically persisted to disk at `/var/lib/typesense`.

This ensures that data remains intact during service restarts (Typesense automatically reloads the persisted data into memory upon startup).

This persistence mechanism works in both HA and non-HA deployment modes, though with different reliability guarantees as detailed below.

### Deployment Modes

:::warning
The choice between HA and non-HA mode must be made during service creation and cannot be changed later. Make sure to carefully consider your requirements before deploying.
:::

#### Non-HA Mode
- Suitable for development and testing
- Data persistence not guaranteed during node failures
- Lower resource requirements

#### HA Mode
- Implements Typesense's native [**Raft consensus**](https://typesense.org/docs/guide/high-availability.html) mechanism for data replication
- Deploys as a **3-node cluster by default** for optimal reliability
  - Scaling configuration of 3-5 or 3-7 nodes for higher workloads is possible upon request (contact [support](#support) to configure custom node ranges)
- Includes **built-in data synchronization** across all nodes
- Features **automatic leader election** to maintain cluster availability
  - Recovery typically takes up to 1 minute during node failures or leader transitions
  - During these periods, requests may temporarily receive `503 Not Ready or Lagging` or `500 Could not find a leader` responses
  - These states automatically resolve once consensus is reestablished

### API Key Management

The master API key is automatically generated and managed by the platform. You can access it through:
- The service access details in the Zerops GUI
- The `apiKey` environment variable in your service configuration

:::warning
Currently, as a security-focused design decision, the master API key cannot be modified after generation.
:::

### CORS Configuration

Your Typesense instance comes with CORS enabled by default, ensuring seamless integration with frontend applications. Browser-based clients can directly access the instance by providing the `X-Typesense-Api-Key` header, maintaining security while enabling straightforward client-side implementation.

## Network Architecture & Access Patterns

### Access Methods

#### HTTPS Access

When using HTTPS access (either through Zerops subdomain or custom domain), traffic is distributed across nodes via our integrated Nginx proxy layer. This provides a single access point that handles load balancing automatically.

For enabling HTTPS access:
1. Configure through the [Zerops access documentation](/features/access)
2. Or use `enableSubdomainAccess: true` when [importing](/references/import#service-configuration) a Typesense service

#### Direct Node Access

Allows to access individual nodes using internal DNS:
1. **Via [Zerops VPN](/references/vpn)**
2. **Internal Project Access** - services within the same project can reach nodes directly

Node addressing patterns:
##### Standard format
**Format:**```node{n}.db.{hostname}.zerops```
- e.g. `node1.db.typesenseha.zerops`, `node2.db.typesenseha.zerops`
##### Stable DNS records
**Format:**```node-stable-{n}.db.{hostname}.zerops```
- **maintain consistent IP mapping** until node retirement (scaling down or failure events)
- e.g. `node-stable-1.db.typesenseha.zerops`, `node-stable-2.db.typesenseha.zerops`

## Quick Start Example

Here's a simple example of using Typesense with the JavaScript client:

```javascript

const client = new TypesenseClient({
  nodes: [{
    host: 'your-service.zerops.dev', // Your Zerops subdomain
    port: '443',
    protocol: 'https'
  }],
  apiKey: process.env.TYPESENSE_API_KEY,
  connectionTimeoutSeconds: 2
})

// Create a collection
await client.collections().create({
  name: 'companies',
  fields: [
    { name: 'company_name', type: 'string' },
    { name: 'num_employees', type: 'int32' },
    { name: 'country', type: 'string', facet: true }
  ],
  default_sorting_field: 'num_employees'
})

// Example search query
const searchResults = await client.collections('companies')
  .documents()
  .search({
    q: 'tech',
    query_by: 'company_name',
    filter_by: 'country:=USA',
    sort_by: 'num_employees:desc'
  })
```

## Best Practices

#### API Key Security
- Never expose the master API key in client-side code
- Generate scoped search-only API keys for frontend applications
- Rotate API keys periodically through your service configuration

#### High Availability
- Implement retry logic in clients for handling temporary unavailability
- Use stable DNS records for direct node access when needed

#### Performance Optimization
- Utilize batch operations for bulk updates
- Configure appropriate timeout values based on your use case
- Consider data volume when designing collection schemas

## Support

For advanced configurations or custom requirements:
- Join our [Discord community](https://discord.gg/zeropsio)
- Contact support via [email](mailto:support@zerops.io)



Valkey is a powerful, open-source alternative to Redis, offering full compatibility with Redis clients while providing an independent development path focused on community-driven innovation. Deploy and manage Valkey on Zerops' fully managed infrastructure to get instant access to high-performance in-memory data storage.

:::tip
Valkey is our recommended Redis alternative as KeyDB's development has slowed significantly in recent times.
:::

## Supported Versions

Currently supported Valkey versions:
<UnorderedList data={data.valkey.readable}/>

Import configuration version:
<UnorderedCodeList data={data.valkey.import}/>

## Service Configuration

Zerops offers Valkey in two deployment configurations to meet different availability requirements.

## Deployment Options

### Non-HA Setup
- Single node deployment on port `6379` (non-TLS) and `6380` (TLS)
- No backup mechanism beyond Zerops infrastructure reliability
- Data persists unless the hardware node fails
- Suitable for development or non-critical workloads

### HA (High Availability) Setup

Our HA implementation uses a unique approach to ensure high availability while maintaining compatibility with all Redis clients:

- 3-node configuration (1 master + 2 replicas)
- Access ports:
  - `6379` - read/write operations (non-TLS, routed to master)
  - `6380` - read/write operations over TLS (routed to master)
  - `7000` - read-only operations (non-TLS)
  - `7001` - read-only operations over TLS
- Implementation details:
  - All nodes are configured identically and listen on standard ports
  - First node in the cluster is designated as the master
  - On replica nodes, ports `6379`/`6380` traffic is forwarded to the master
  - Ports `7000`/`7001` are mapped locally to each node for direct replica access
  - When a master fails, a replica is promoted and routing is updated automatically
  - DNS entries are updated for seamless client connection
  - This implementation provides traffic forwarding to master (not natively supported by Valkey)

:::note
Be aware that replica data may lag slightly behind the master due to asynchronous replication.
:::

## Learn More

- [Official Valkey Documentation](https://valkey.io/docs) - Comprehensive guide to Valkey features

## Support

For advanced configurations or custom requirements:
- Join our [Discord community](https://discord.gg/zeropsio)
- Contact support via [email](mailto:support@zerops.io)




This is a list of all currently supported versions of technologies that can be used for <code><a href="/zerops-yaml/specification#base-required">build.base</a></code> and <code><a href="/zerops-yaml/specification#base">run.base</a></code> sections in `zerops.yaml`.

:::note
Versions listed on the same line are aliases of the same underlying version.
:::


## Runtime services

<table className="w-full my-1.5 whitespace-nowrap">
  <thead>
    <tr>
      <th rowspan="2" className="">Service Type</th>
      <th rowspan="2" className="">Supported OS</th>
      <th colspan="2" className="w-full">Versions</th>
    </tr>
  <tr>
    <th colspan="2" className="w-full">Build / Runtime</th>
  </tr>
</thead>
  <tbody>
    <tr>
     <td className="w-fit">Bun</td>
     <td className="w-fit">`ubuntu` / `alpine`</td>
     <td colspan="2" className="w-fit"><UnorderedCodeList data={data.bun.base} /></td>
    </tr>
    <tr>
     <td className="w-fit">Deno</td>
     <td className="w-fit">`ubuntu`</td>
     <td colspan="2" className="w-fit"><UnorderedCodeList data={data.deno.base} /></td>
    </tr>
    <tr>
     <td className="w-fit">.NET</td>
     <td className="w-fit">`ubuntu` / `alpine`</td>
     <td colspan="2" className="w-fit"><UnorderedCodeList data={data.dotnet.base} /></td>
    </tr>
    <tr>
     <td className="w-fit">Elixir</td>
     <td className="w-fit">`ubuntu` / `alpine`</td>
     <td colspan="2" className="w-fit"><UnorderedCodeList data={data.elixir.base} /></td>
    </tr>
    <tr>
     <td className="w-fit">Gleam</td>
     <td className="w-fit">`ubuntu`</td>
     <td colspan="2" className="w-fit"><UnorderedCodeList data={data.gleam.base} /></td>
    </tr>
    <tr>
     <td className="w-fit">Go</td>
     <td className="w-fit">`ubuntu` / `alpine`</td>
     <td colspan="2" className="w-fit"><UnorderedCodeList data={data.go.base} /></td>
    </tr>
    <tr>
     <td className="w-fit">Java</td>
     <td className="w-fit">`ubuntu` / `alpine`</td>
     <td colspan="2" className="w-fit"><UnorderedCodeList data={data.java.base} /></td>
    </tr>
    <tr>
      <td className="w-fit">Node.js</td>
      <td className="w-fit">`ubuntu` / `alpine`</td>
      <td colspan="2" className="w-fit"><UnorderedCodeList data={data.nodejs.base} /></td>
    </tr>
    <tr>
      <td className="w-fit">Python</td>
      <td className="w-fit">`ubuntu` / `alpine`</td>
      <td colspan="2" className="w-fit"><UnorderedCodeList data={data.python.base} /></td>
    </tr>
    <tr>
      <td className="w-fit">Rust</td>
      <td className="w-fit">`ubuntu` / `alpine`</td>
      <td colspan="2" className="w-fit"><UnorderedCodeList data={data.rust.base} /></td>
    </tr>
      <tr>
        <th className="w-fit">&nbsp;</th>
        <th className="w-fit">&nbsp;</th>
        <th className="w-full">Build</th>
        <th className="w-full">Runtime</th>
      </tr>
    <tr>
      <td className="w-fit">PHP + Apache</td>
      <td className="w-fit">`ubuntu` / `alpine`</td>
      <td className="w-fit"><UnorderedCodeList data={data.php.base.build} /></td>
      <td className="w-fit"><UnorderedCodeList data={data.php.base.runtime.apache} /></td>
    </tr>
    <tr>
      <td className="w-fit">PHP + nginx</td>
      <td className="w-fit">`ubuntu` / `alpine`</td>
      <td className="w-fit"><UnorderedCodeList data={data.php.base.build} /></td>
      <td className="w-fit"><UnorderedCodeList data={data.php.base.runtime.nginx} /></td>
    </tr>
  </tbody>
</table>

## Static services

<table className="w-full my-1.5 whitespace-nowrap">
  <thead>
    <tr>
      <th rowspan="2" className="">Service Type</th>
      <th rowspan="2" className="">Supported OS</th>
      <th colspan="2" className="w-full">Versions</th>
    </tr>
  <tr>
    <th className="w-full">Build</th>
    <th className="w-full">Runtime</th>
  </tr>
  </thead>
  <tbody>
    <tr>
      <td className="w-fit">nginx</td>
      <td className="w-fit">`ubuntu`/`alpine`</td>
      <td className="w-fit">-</td>
      <td className="w-fit"><UnorderedCodeList data={data.nginx.base.build} /></td>
    </tr>
    <tr>
      <td className="w-fit">static</td>
      <td className="w-fit">`ubuntu`/`alpine`</td>
      <td className="w-fit">-</td>
      <td className="w-fit"><UnorderedCodeList data={data.static.base.build} /></td>
    </tr>
  </tbody>
</table>

## Containers and virtual machines

<table className="w-full my-1.5 whitespace-nowrap">
  <thead>
    <tr>
      <th rowspan="2" className="">Service Type</th>
      <th rowspan="2" className="">Supported OS</th>
      <th colspan="2" className="w-full">Versions</th>
    </tr>
  <tr>
    <th colspan="2" className="w-full">Build / Runtime</th>
  </tr>
  </thead>
  <tbody>
    <tr>
    <td className="w-fit">Alpine</td>
    <td className="w-fit">`alpine`</td>
    <td className="w-fit"><UnorderedCodeList data={data.alpine.base} /></td>
    </tr>
    <tr>
      <td className="w-fit">Ubuntu</td>
      <td className="w-fit">`ubuntu`</td>
      <td className="w-fit"><UnorderedCodeList data={data.ubuntu.base} /></td>
    </tr>
  </tbody>
</table>


Cron jobs are scheduled commands that execute automatically inside a service's containers based on defined timing rules.

In Zerops, these jobs are configured in the `run` section of `zerops.yaml` file under the `crontab` key.

## Parameters

### command
*string, REQUIRED*

The shell command to execute at the scheduled time. This can be any valid command.

### timing
*string, REQUIRED*

The schedule for when the task should run, specified in standard cron format using five space-separated fields:
  - Minute (0–59)
  - Hour (0–23)
  - Day of the month (1–31)
  - Month (1–12)
  - Day of the week (0–7; both 0 and 7 represent Sunday)

#### Examples
  - `"0 5 * * *"` – Runs daily at 5:00 AM.
  - `"*/10 * * * *"` – Runs every 10 minutes.

### allContainers
*boolean, REQUIRED*

**Options:**
- `true` – Command runs on all containers.
- `false` – Command runs on only one container.

### workingDir
*string, REQUIRED*

Specifies the directory where the command will be executed. If not set, it defaults to `/var/www`.

## Example Configurations
Here’s a basic example of how to set up a cron job in your service's `zerops.yaml`:

```yaml
run: 
  crontab:
    - command: "date >> /var/log/cron.log"
      timing: "0 * * * *"
```
This configuration logs the current date to `/var/log/cron.log` every hour.

### Running on Multiple Containers
By default, cron jobs run on a single container, even if multiple containers exist for the service. To execute a command across all containers, you can use the `allContainers` parameter:

```yaml
run: 
  crontab:
    - command: "rm -rf /tmp/*"
      timing: "0 0 * * *"
      allContainers: true
```
This example removes temporary files from all containers every day at midnight.

### Custom Working Directory
You can also specify a custom working directory for your commands using the `workingDir` parameter:

```yaml
run: 
  crontab:
    - command: "php artisan schedule:run"
      timing: "* * * * *"
      workingDir: /var/www/html
```
In this case, the command runs every minute in the `/var/www/html` directory.

### Multiple Cronjobs
It is possible to define multiple cron jobs as a YAML object list under the `crontab` key.

```yaml
run:
  crontab:
    - command: ...
      ...
    - command: ...
      ...
```







export const languages = [
    { name: "Node.js", link: "/nodejs/how-to/build-pipeline" },
    { name: "PHP", link: "/php/how-to/build-pipeline" },
    { name: "Python", link: "/python/how-to/build-pipeline" },
    { name: "Go", link: "/go/how-to/build-pipeline" },
    { name: ".NET", link: "/dotnet/how-to/build-pipeline" },
    { name: "Rust", link: "/rust/how-to/build-pipeline" },
    { name: "Java", link: "/java/how-to/build-pipeline" },
    { name: "Nginx", link: "/nginx/how-to/build-pipeline" }
]

The `zerops.yaml` file is crucial for defining how Zerops should [build and deploy](/features/pipeline) your application.
Add the `zerops.yaml` file to the **root of your repository** and customize it to suit your application's needs.

---

<GroupCards emoji="🙌" heading="Quick Links to Runtime-Specific Guides" items={languages} />

## Basic Structure

```yaml title="zerops.yaml"
zerops:
  - setup: <service_name>
    build: ...
    run: ...
```

- The top-level element is always `zerops`.
- `setup` contains the **hostname** of your service (must exist in Zerops).
- Multiple services can be defined in a single `zerops.yaml` (useful for monorepos):

```yaml
zerops:
  - setup: app
    build: ...
    run: ...

  - setup: api
    build: ...
    run: ...
```

Each service configuration requires `build` and `run` sections. An optional `deploy` section can be added for readiness checks.

## Service Inheritance

### extends <Badge type="optional" />

The `extends` key allows you to inherit configuration from another service defined in the same `zerops.yaml` file. This is useful for creating environment-specific configurations while maintaining a common base.

```yaml
zerops:
  - setup: base
    build:
      buildCommands:
        - echo "hello"
      deployFiles: ./
    run:
      start: server run

  - setup: prod
    extends: base
    run:
      crontab:
        - command: xyz
          allContainers: false
          timing: "* * * * *"

  - setup: dev
    extends: base
    run:
      crontab:
        - command: different command
          allContainers: false
          timing: "* * * * *"
```

When using `extends`:
- The `extends` value must refer to another service's `setup` value in the same file
- The child service inherits all configuration from the base service
- Configuration is merged at the section level (`build`, `run`, `deploy`)
- You can override specific sections by redefining them

:::tip
Create a base service with common configuration and extend it for environment-specific services to keep your `zerops.yaml` file DRY (Don't Repeat Yourself).
:::

## Build Configuration

### base <Badge type="required" />

Sets the base technology for the build environment. [See available options](/zerops-yaml/base-list).

```yaml
build:
  base: nodejs@latest
```

You can specify multiple technologies:

```yaml
build:
  base:
    - nodejs@latest
  prepareCommands:
    - zsc add python@3.9
```

### os <Badge type="optional" />

Sets the operating system for the build environment. Options:

- `alpine` (default)
- `ubuntu`

Current versions:

- {data.alpine.default}
- {data.ubuntu.default}

```yaml
build:
  os: ubuntu
```

### prepareCommands <Badge type="optional" />

Customizes the build environment by installing additional dependencies or tools.

```yaml
build:
  prepareCommands:
    - apt-get update
    - apt-get install -y some-package
```

### buildCommands <Badge type="required" />

Defines the commands to build your application.

```yaml
build:
  buildCommands:
    - npm install
    - npm run build
```

#### Running commands in a single shell instance:

```yaml
buildCommands:
  - |
    npm install
    npm run build
```

### deployFiles <Badge type="required" />

Specifies which files or folders to deploy after a successful build.

```yaml
build:
  deployFiles:
    - dist
    - package.json
    - node_modules
```

The files/folders will be placed into `/var/www` folder in runtime, e.g. `./src/assets/fonts` would result in `/var/www/src/assets/fonts`.

#### Using wildcards:

Zerops supports the `~` character as a wildcard for one or more folders in the path.

Deploys all `file.txt` files that are located in any path that begins with `/path/` and ends with `/to/`.

```yaml
deployFiles: ./path/~/to/file.txt
```

By default, `./src/assets/fonts` deploys to `/var/www/src/assets/fonts`, keeping the full path. Adding `~`, like `./src/assets/~fonts`, shortens it to `/var/www/fonts`

#### .deployignore

Add a `.deployignore` file to the root of your project to specify which files and folders Zerops should ignore during deploy. The syntax follows the same pattern format as <a href="https://git-scm.com/docs/gitignore#_pattern_format">`.gitignore`</a>.

To ignore a specific file or directory path, start the pattern with a forward slash (`/`). Without the leading slash, the pattern will match files with that name in any directory.

:::tip
For consistency, it's recommended to configure both your `.gitignore` and `.deployignore` files with the same patterns.
:::

Examples:

```yaml title="zerops.yaml"
zerops:
  - setup: app
    build:
      deployFiles: ./
```

```text title=".deployignore"
/src/file.txt
```
The example above ignores `file.txt` only in the root src directory.
```text title=".deployignore"
src/file.txt
```
This example above ignores `file.txt` in ANY directory named `src`, such as:
- `/src/file.txt`
- `/folder2/folder3/src/file.txt`
- `/src/src/file.txt`

:::note
`.deployignore` file also works with <a href="/references/cli/commands#deploy">`zcli service deploy`</a> command.
:::

### cache <Badge type="optional" />

Defines which files or folders to cache for subsequent builds.

```yaml
build:
  cache: node_modules
```

For more information, see our detailed [guide on build cache](/features/build-cache), complete with extensive examples.

### envVariables <Badge type="optional" />

Sets environment variables for the build environment.

```yaml
build:
  envVariables:
    DB_NAME: db
    DB_HOST: db
    DB_USER: db
    DB_PASS: ${db_password}
```

:::info
The `yamlPreprocessor` option in your project & service import YAML allows you to generate random secret values, passwords, and public/private key pairs. For more information, see the [yamlPreprocessor](/references/import-yaml/pre-processor) page.
:::

## Runtime Configuration

### base <Badge type="optional" />

Sets the base technology for the runtime environment. If not specified, the current version is maintained.

```yaml
run:
  base: nodejs@latest
```

### os <Badge type="optional" />

Sets the operating system for the runtime environment. Options and versions are the same as for the build environment.

### ports <Badge type="optional" />

Specifies the internal ports on which your application will listen.

```yaml
run:
  ports:
    - port: 8080
      protocol: TCP # Optional
      httpSupport: true # Optional
    - port: 8081
      ...
```

Available parameters:

#### port <Badge type="required" />
Defines the port number on which your application listens. Must be between *10* and *65435*, as ports outside this range are reserved for internal Zerops systems.

#### protocol <Badge type="optional" />
Specifies the network protocol to use:
- Allowed values: `TCP` *(default)* or `UDP`
#### httpSupport <Badge type="optional" />
Indicates whether the port is running a web server:
- Default value: `true`
- Set to `false` if a web server isn't running on the port
- Only available with TCP protocol
- Used by Zerops for [public access](/features/access) configuration

### prepareCommands <Badge type="optional" />

Customizes the runtime environment by installing additional dependencies or tools.

### addToRunPrepare <Badge type="optional" />

Defines files or folders to be copied from the build container to the prepare runtime container.

### initCommands <Badge type="optional" />

Defines commands to run each time a new runtime container starts or restarts.

```yaml
run:
  initCommands:
    - rm -rf ./cache
```

### start <Badge type="required-some"/>

Defines the start command for your application.

```yaml
run:
  start: npm start
```

### startCommands <Badge type="optional" />

Defines start commands 

Unlike `start`, you can define multiple commands that starts their own processes.

```yaml
run:
  startCommands:
    # start the application
    - command: npm run start:prod
      name: server
    # start the replication
    
    - command: litestream replicate -config=litestream.yaml
      name: replication
      # restore the database on container init
      initCommands:
        - litestream restore -if-replica-exists -if-db-not-exists -config=litestream.yaml $DB_NAME
```

See [start-commands-example](https://github.com/zeropsio/start-commands-example)

### documentRoot <Badge type="optional" />

Customizes the root folder for publicly accessible web server content (available only for webserver runtimes).

### siteConfigPath <Badge type="optional" />

Sets the custom webserver configuration (available only for webserver runtimes).

### envVariables <Badge text="Optional" color="#202e57" />

Defines environment variables for the runtime environment.

```yaml
    run:
      base: nodejs@20
      envVariables:
        DB_NAME: db
        DB_HOST: db
        DB_USER: db
        DB_PASS: ${db_password}
```

### healthCheck <Badge type="optional" />

Defines a health check for your application.

```yaml
run:
  healthCheck:
    httpGet:
      port: 80
      path: /status
```

### crontab <Badge type="optional" />

  Defines scheduled commands to run as cron jobs within a service.

  ```yaml
  run:
    crontab:
      - command: "date >> /var/log/cron.log"
        timing: "0 * * * *"
  ```

Setup cron jobs. See [examples](/references/cron).

## Deploy Configuration

### readinessCheck <Badge type="optional" />

Defines a readiness check for your application. (See [readiness checks](/features/pipeline#readiness-checks))

```yaml
deploy:
  readinessCheck:
    httpGet:
      port: 80
      path: /status
      host: 127.0.0.1
      scheme: https

    # Or use commands
    exec:
      command: |
        touch grass
        rm -rf life
        mv /outside/user /home/user
```

:::note
For more detailed information on specific configurations, refer to the runtime-specific guides linked at the beginning of this document.
:::

---


